/* BKRepoServiceClient.cpp
   Generated by gSOAP 2.8.6 from BKRepoService.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "BKRepoServiceH.h"

SOAP_SOURCE_STAMP("@(#) BKRepoServiceClient.cpp ver 2.8.6 2012-11-26 17:19:48 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__openMobileSession(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__openMobileSessionRequest *ns1__openMobileSessionRequest_, ns1__openSessionResponse *ns1__openSessionResponse_)
{	struct __ns1__openMobileSession soap_tmp___ns1__openMobileSession;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/services/bk/repo";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__openMobileSession.ns1__openMobileSessionRequest_ = ns1__openMobileSessionRequest_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__openMobileSession(soap, &soap_tmp___ns1__openMobileSession);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__openMobileSession(soap, &soap_tmp___ns1__openMobileSession, "-ns1:openMobileSession", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__openMobileSession(soap, &soap_tmp___ns1__openMobileSession, "-ns1:openMobileSession", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__openSessionResponse_)
		return soap_closesock(soap);
	ns1__openSessionResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__openSessionResponse_->soap_get(soap, "ns1:openSessionResponse", "ns1:openSessionResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__openOfficeSession(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__openOfficeSessionRequest *ns1__openOfficeSessionRequest_, ns1__openSessionResponse *ns1__openSessionResponse_)
{	struct __ns1__openOfficeSession soap_tmp___ns1__openOfficeSession;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/services/bk/repo";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__openOfficeSession.ns1__openOfficeSessionRequest_ = ns1__openOfficeSessionRequest_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__openOfficeSession(soap, &soap_tmp___ns1__openOfficeSession);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__openOfficeSession(soap, &soap_tmp___ns1__openOfficeSession, "-ns1:openOfficeSession", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__openOfficeSession(soap, &soap_tmp___ns1__openOfficeSession, "-ns1:openOfficeSession", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__openSessionResponse_)
		return soap_closesock(soap);
	ns1__openSessionResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__openSessionResponse_->soap_get(soap, "ns1:openSessionResponse", "ns1:openSessionResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__closeSession(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__sessionRequest *ns1__closeSessionRequest, ns1__closeSessionResponse *ns1__closeSessionResponse_)
{	struct __ns1__closeSession soap_tmp___ns1__closeSession;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/services/bk/repo";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__closeSession.ns1__closeSessionRequest = ns1__closeSessionRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__closeSession(soap, &soap_tmp___ns1__closeSession);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__closeSession(soap, &soap_tmp___ns1__closeSession, "-ns1:closeSession", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__closeSession(soap, &soap_tmp___ns1__closeSession, "-ns1:closeSession", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__closeSessionResponse_)
		return soap_closesock(soap);
	ns1__closeSessionResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__closeSessionResponse_->soap_get(soap, "ns1:closeSessionResponse", "ns1:closeSessionResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__openHentCursor(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__sessionRequest *ns1__openHentCursorRequest, ns1__openHentCursorResponse *ns1__openHentCursorResponse_)
{	struct __ns1__openHentCursor soap_tmp___ns1__openHentCursor;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/services/bk/repo";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__openHentCursor.ns1__openHentCursorRequest = ns1__openHentCursorRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__openHentCursor(soap, &soap_tmp___ns1__openHentCursor);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__openHentCursor(soap, &soap_tmp___ns1__openHentCursor, "-ns1:openHentCursor", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__openHentCursor(soap, &soap_tmp___ns1__openHentCursor, "-ns1:openHentCursor", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__openHentCursorResponse_)
		return soap_closesock(soap);
	ns1__openHentCursorResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__openHentCursorResponse_->soap_get(soap, "ns1:openHentCursorResponse", "ns1:openHentCursorResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__fetchHents(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__cursorRequest *ns1__fetchHentsRequest, ns1__fetchHentsResponse *ns1__fetchHentsResponse_)
{	struct __ns1__fetchHents soap_tmp___ns1__fetchHents;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/services/bk/repo";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__fetchHents.ns1__fetchHentsRequest = ns1__fetchHentsRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__fetchHents(soap, &soap_tmp___ns1__fetchHents);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__fetchHents(soap, &soap_tmp___ns1__fetchHents, "-ns1:fetchHents", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__fetchHents(soap, &soap_tmp___ns1__fetchHents, "-ns1:fetchHents", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__fetchHentsResponse_)
		return soap_closesock(soap);
	ns1__fetchHentsResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__fetchHentsResponse_->soap_get(soap, "ns1:fetchHentsResponse", "ns1:fetchHentsResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__closeHentCursor(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__sessionRequest *ns1__closeHentCursorRequest, ns1__closeHentCursorResponse *ns1__closeHentCursorResponse_)
{	struct __ns1__closeHentCursor soap_tmp___ns1__closeHentCursor;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/services/bk/repo";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__closeHentCursor.ns1__closeHentCursorRequest = ns1__closeHentCursorRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__closeHentCursor(soap, &soap_tmp___ns1__closeHentCursor);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__closeHentCursor(soap, &soap_tmp___ns1__closeHentCursor, "-ns1:closeHentCursor", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__closeHentCursor(soap, &soap_tmp___ns1__closeHentCursor, "-ns1:closeHentCursor", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__closeHentCursorResponse_)
		return soap_closesock(soap);
	ns1__closeHentCursorResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__closeHentCursorResponse_->soap_get(soap, "ns1:closeHentCursorResponse", "ns1:closeHentCursorResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__openSyncTransaction(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__sessionRequest *ns1__openSyncTransactionRequest, ns1__openSyncTransactionResponse *ns1__openSyncTransactionResponse_)
{	struct __ns1__openSyncTransaction soap_tmp___ns1__openSyncTransaction;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/services/bk/repo";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__openSyncTransaction.ns1__openSyncTransactionRequest = ns1__openSyncTransactionRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__openSyncTransaction(soap, &soap_tmp___ns1__openSyncTransaction);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__openSyncTransaction(soap, &soap_tmp___ns1__openSyncTransaction, "-ns1:openSyncTransaction", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__openSyncTransaction(soap, &soap_tmp___ns1__openSyncTransaction, "-ns1:openSyncTransaction", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__openSyncTransactionResponse_)
		return soap_closesock(soap);
	ns1__openSyncTransactionResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__openSyncTransactionResponse_->soap_get(soap, "ns1:openSyncTransactionResponse", "ns1:openSyncTransactionResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__updateHent(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__updateHentRequest *ns1__updateHentRequest_, ns1__updateHentResponse *ns1__updateHentResponse_)
{	struct __ns1__updateHent soap_tmp___ns1__updateHent;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/services/bk/repo";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__updateHent.ns1__updateHentRequest_ = ns1__updateHentRequest_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__updateHent(soap, &soap_tmp___ns1__updateHent);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__updateHent(soap, &soap_tmp___ns1__updateHent, "-ns1:updateHent", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__updateHent(soap, &soap_tmp___ns1__updateHent, "-ns1:updateHent", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__updateHentResponse_)
		return soap_closesock(soap);
	ns1__updateHentResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__updateHentResponse_->soap_get(soap, "ns1:updateHentResponse", "ns1:updateHentResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__updateStock(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__updateStockRequest *ns1__updateStockRequest_, ns1__updateStockResponse *ns1__updateStockResponse_)
{	struct __ns1__updateStock soap_tmp___ns1__updateStock;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/services/bk/repo";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__updateStock.ns1__updateStockRequest_ = ns1__updateStockRequest_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__updateStock(soap, &soap_tmp___ns1__updateStock);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__updateStock(soap, &soap_tmp___ns1__updateStock, "-ns1:updateStock", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__updateStock(soap, &soap_tmp___ns1__updateStock, "-ns1:updateStock", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__updateStockResponse_)
		return soap_closesock(soap);
	ns1__updateStockResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__updateStockResponse_->soap_get(soap, "ns1:updateStockResponse", "ns1:updateStockResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__closeSyncTransaction(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__sessionRequest *ns1__closeSyncTransactionRequest_, ns1__closeSyncTransactionResponse *ns1__closeSyncTransactionResponse_)
{	struct __ns1__closeSyncTransaction soap_tmp___ns1__closeSyncTransaction;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/services/bk/repo";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__closeSyncTransaction.ns1__closeSyncTransactionRequest_ = ns1__closeSyncTransactionRequest_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__closeSyncTransaction(soap, &soap_tmp___ns1__closeSyncTransaction);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__closeSyncTransaction(soap, &soap_tmp___ns1__closeSyncTransaction, "-ns1:closeSyncTransaction", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__closeSyncTransaction(soap, &soap_tmp___ns1__closeSyncTransaction, "-ns1:closeSyncTransaction", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__closeSyncTransactionResponse_)
		return soap_closesock(soap);
	ns1__closeSyncTransactionResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__closeSyncTransactionResponse_->soap_get(soap, "ns1:closeSyncTransactionResponse", "ns1:closeSyncTransactionResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__commitSyncTransaction(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__sessionRequest *ns1__commitSyncTransactionRequest_, ns1__commitSyncTransactionResponse *ns1__commitSyncTransactionResponse_)
{	struct __ns1__commitSyncTransaction soap_tmp___ns1__commitSyncTransaction;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/services/bk/repo";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__commitSyncTransaction.ns1__commitSyncTransactionRequest_ = ns1__commitSyncTransactionRequest_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__commitSyncTransaction(soap, &soap_tmp___ns1__commitSyncTransaction);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__commitSyncTransaction(soap, &soap_tmp___ns1__commitSyncTransaction, "-ns1:commitSyncTransaction", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__commitSyncTransaction(soap, &soap_tmp___ns1__commitSyncTransaction, "-ns1:commitSyncTransaction", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__commitSyncTransactionResponse_)
		return soap_closesock(soap);
	ns1__commitSyncTransactionResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__commitSyncTransactionResponse_->soap_get(soap, "ns1:commitSyncTransactionResponse", "ns1:commitSyncTransactionResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__openStockCursor(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__sessionRequest *ns1__openStockCursorRequest, ns1__openStockCursorResponse *ns1__openStockCursorResponse_)
{	struct __ns1__openStockCursor soap_tmp___ns1__openStockCursor;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/services/bk/repo";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__openStockCursor.ns1__openStockCursorRequest = ns1__openStockCursorRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__openStockCursor(soap, &soap_tmp___ns1__openStockCursor);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__openStockCursor(soap, &soap_tmp___ns1__openStockCursor, "-ns1:openStockCursor", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__openStockCursor(soap, &soap_tmp___ns1__openStockCursor, "-ns1:openStockCursor", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__openStockCursorResponse_)
		return soap_closesock(soap);
	ns1__openStockCursorResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__openStockCursorResponse_->soap_get(soap, "ns1:openStockCursorResponse", "ns1:openStockCursorResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__fetchStocks(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__cursorRequest *ns1__fetchStocksRequest, ns1__fetchStocksResponse *ns1__fetchStocksResponse_)
{	struct __ns1__fetchStocks soap_tmp___ns1__fetchStocks;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/services/bk/repo";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__fetchStocks.ns1__fetchStocksRequest = ns1__fetchStocksRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__fetchStocks(soap, &soap_tmp___ns1__fetchStocks);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__fetchStocks(soap, &soap_tmp___ns1__fetchStocks, "-ns1:fetchStocks", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__fetchStocks(soap, &soap_tmp___ns1__fetchStocks, "-ns1:fetchStocks", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__fetchStocksResponse_)
		return soap_closesock(soap);
	ns1__fetchStocksResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__fetchStocksResponse_->soap_get(soap, "ns1:fetchStocksResponse", "ns1:fetchStocksResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__closeStockCursor(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__sessionRequest *ns1__closeStockCursorRequest, ns1__closeStockCursorResponse *ns1__closeStockCursorResponse_)
{	struct __ns1__closeStockCursor soap_tmp___ns1__closeStockCursor;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/services/bk/repo";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__closeStockCursor.ns1__closeStockCursorRequest = ns1__closeStockCursorRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__closeStockCursor(soap, &soap_tmp___ns1__closeStockCursor);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__closeStockCursor(soap, &soap_tmp___ns1__closeStockCursor, "-ns1:closeStockCursor", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__closeStockCursor(soap, &soap_tmp___ns1__closeStockCursor, "-ns1:closeStockCursor", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__closeStockCursorResponse_)
		return soap_closesock(soap);
	ns1__closeStockCursorResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__closeStockCursorResponse_->soap_get(soap, "ns1:closeStockCursorResponse", "ns1:closeStockCursorResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__updateCompany(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__updateCompanyRequest *ns1__updateCompanyRequest_, ns1__updateCompanyResponse *ns1__updateCompanyResponse_)
{	struct __ns1__updateCompany soap_tmp___ns1__updateCompany;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/services/bk/repo";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__updateCompany.ns1__updateCompanyRequest_ = ns1__updateCompanyRequest_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__updateCompany(soap, &soap_tmp___ns1__updateCompany);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__updateCompany(soap, &soap_tmp___ns1__updateCompany, "-ns1:updateCompany", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__updateCompany(soap, &soap_tmp___ns1__updateCompany, "-ns1:updateCompany", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__updateCompanyResponse_)
		return soap_closesock(soap);
	ns1__updateCompanyResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__updateCompanyResponse_->soap_get(soap, "ns1:updateCompanyResponse", "ns1:updateCompanyResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__fetchCompany(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__sessionRequest *ns1__fetchCompanyRequest, ns1__fetchCompanyResponse *ns1__fetchCompanyResponse_)
{	struct __ns1__fetchCompany soap_tmp___ns1__fetchCompany;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/services/bk/repo";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__fetchCompany.ns1__fetchCompanyRequest = ns1__fetchCompanyRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__fetchCompany(soap, &soap_tmp___ns1__fetchCompany);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__fetchCompany(soap, &soap_tmp___ns1__fetchCompany, "-ns1:fetchCompany", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__fetchCompany(soap, &soap_tmp___ns1__fetchCompany, "-ns1:fetchCompany", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__fetchCompanyResponse_)
		return soap_closesock(soap);
	ns1__fetchCompanyResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__fetchCompanyResponse_->soap_get(soap, "ns1:fetchCompanyResponse", "ns1:fetchCompanyResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__uploadPurchase(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__uploadPurchaseRequest *ns1__uploadPurchaseRequest_, ns1__uploadPurchaseResponse *ns1__uploadPurchaseResponse_)
{	struct __ns1__uploadPurchase soap_tmp___ns1__uploadPurchase;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/services/bk/repo";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__uploadPurchase.ns1__uploadPurchaseRequest_ = ns1__uploadPurchaseRequest_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__uploadPurchase(soap, &soap_tmp___ns1__uploadPurchase);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__uploadPurchase(soap, &soap_tmp___ns1__uploadPurchase, "-ns1:uploadPurchase", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__uploadPurchase(soap, &soap_tmp___ns1__uploadPurchase, "-ns1:uploadPurchase", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__uploadPurchaseResponse_)
		return soap_closesock(soap);
	ns1__uploadPurchaseResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__uploadPurchaseResponse_->soap_get(soap, "ns1:uploadPurchaseResponse", "ns1:uploadPurchaseResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__openPurchaseCursor(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__sessionRequest *ns1__openPurchaseCursorRequest, ns1__openPurchaseCursorResponse *ns1__openPurchaseCursorResponse_)
{	struct __ns1__openPurchaseCursor soap_tmp___ns1__openPurchaseCursor;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/services/bk/repo";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__openPurchaseCursor.ns1__openPurchaseCursorRequest = ns1__openPurchaseCursorRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__openPurchaseCursor(soap, &soap_tmp___ns1__openPurchaseCursor);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__openPurchaseCursor(soap, &soap_tmp___ns1__openPurchaseCursor, "-ns1:openPurchaseCursor", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__openPurchaseCursor(soap, &soap_tmp___ns1__openPurchaseCursor, "-ns1:openPurchaseCursor", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__openPurchaseCursorResponse_)
		return soap_closesock(soap);
	ns1__openPurchaseCursorResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__openPurchaseCursorResponse_->soap_get(soap, "ns1:openPurchaseCursorResponse", "ns1:openPurchaseCursorResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__closePurchaseCursor(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__sessionRequest *ns1__closePurchaseCursorRequest, ns1__closePurchaseCursorResponse *ns1__closePurchaseCursorResponse_)
{	struct __ns1__closePurchaseCursor soap_tmp___ns1__closePurchaseCursor;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/services/bk/repo";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__closePurchaseCursor.ns1__closePurchaseCursorRequest = ns1__closePurchaseCursorRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__closePurchaseCursor(soap, &soap_tmp___ns1__closePurchaseCursor);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__closePurchaseCursor(soap, &soap_tmp___ns1__closePurchaseCursor, "-ns1:closePurchaseCursor", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__closePurchaseCursor(soap, &soap_tmp___ns1__closePurchaseCursor, "-ns1:closePurchaseCursor", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__closePurchaseCursorResponse_)
		return soap_closesock(soap);
	ns1__closePurchaseCursorResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__closePurchaseCursorResponse_->soap_get(soap, "ns1:closePurchaseCursorResponse", "ns1:closePurchaseCursorResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__fetchPurchases(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__cursorRequest *ns1__fetchPurchasesRequest, ns1__fetchPurchasesResponse *ns1__fetchPurchasesResponse_)
{	struct __ns1__fetchPurchases soap_tmp___ns1__fetchPurchases;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/services/bk/repo";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__fetchPurchases.ns1__fetchPurchasesRequest = ns1__fetchPurchasesRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__fetchPurchases(soap, &soap_tmp___ns1__fetchPurchases);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__fetchPurchases(soap, &soap_tmp___ns1__fetchPurchases, "-ns1:fetchPurchases", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__fetchPurchases(soap, &soap_tmp___ns1__fetchPurchases, "-ns1:fetchPurchases", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__fetchPurchasesResponse_)
		return soap_closesock(soap);
	ns1__fetchPurchasesResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__fetchPurchasesResponse_->soap_get(soap, "ns1:fetchPurchasesResponse", "ns1:fetchPurchasesResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__downloadPurchase(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__downloadPurchaseRequest *ns1__downloadPurchaseRequest_, ns1__downloadPurchaseResponse *ns1__downloadPurchaseResponse_)
{	struct __ns1__downloadPurchase soap_tmp___ns1__downloadPurchase;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/services/bk/repo";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__downloadPurchase.ns1__downloadPurchaseRequest_ = ns1__downloadPurchaseRequest_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__downloadPurchase(soap, &soap_tmp___ns1__downloadPurchase);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__downloadPurchase(soap, &soap_tmp___ns1__downloadPurchase, "-ns1:downloadPurchase", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__downloadPurchase(soap, &soap_tmp___ns1__downloadPurchase, "-ns1:downloadPurchase", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__downloadPurchaseResponse_)
		return soap_closesock(soap);
	ns1__downloadPurchaseResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__downloadPurchaseResponse_->soap_get(soap, "ns1:downloadPurchaseResponse", "ns1:downloadPurchaseResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of BKRepoServiceClient.cpp */
