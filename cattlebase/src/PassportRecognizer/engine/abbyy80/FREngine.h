/*
The TWAIN Toolkit is distributed as is. The developer and distributors of the TWAIN Toolkit expressly disclaim all
implied, express or statutory warranties including, without limitation, the implied warranties of merchantability,
noninfringement of third party rights and fitness for a particular purpose. Neither the developers
nor the distributorswill be liable for damages, whether direct, indirect, special, incidental,
or consequential, as a result of the reproduction, modification, distribution or other use of the TWAIN Toolkit.
*/




/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0500 */
/* at Fri Mar 18 16:47:21 2011
 */
/* Compiler settings for .\idl\FREngine.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__


#ifndef __FREngine_h__
#define __FREngine_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IText_FWD_DEFINED__
#define __IText_FWD_DEFINED__
typedef interface IText IText;
#endif 	/* __IText_FWD_DEFINED__ */


#ifndef __IHyperlink_FWD_DEFINED__
#define __IHyperlink_FWD_DEFINED__
typedef interface IHyperlink IHyperlink;
#endif 	/* __IHyperlink_FWD_DEFINED__ */


#ifndef __IPageElement_FWD_DEFINED__
#define __IPageElement_FWD_DEFINED__
typedef interface IPageElement IPageElement;
#endif 	/* __IPageElement_FWD_DEFINED__ */


#ifndef __ICharacterRecognitionVariants_FWD_DEFINED__
#define __ICharacterRecognitionVariants_FWD_DEFINED__
typedef interface ICharacterRecognitionVariants ICharacterRecognitionVariants;
#endif 	/* __ICharacterRecognitionVariants_FWD_DEFINED__ */


#ifndef __ICharacterRecognitionVariant_FWD_DEFINED__
#define __ICharacterRecognitionVariant_FWD_DEFINED__
typedef interface ICharacterRecognitionVariant ICharacterRecognitionVariant;
#endif 	/* __ICharacterRecognitionVariant_FWD_DEFINED__ */


#ifndef __IWordRecognitionVariants_FWD_DEFINED__
#define __IWordRecognitionVariants_FWD_DEFINED__
typedef interface IWordRecognitionVariants IWordRecognitionVariants;
#endif 	/* __IWordRecognitionVariants_FWD_DEFINED__ */


#ifndef __IWord_FWD_DEFINED__
#define __IWord_FWD_DEFINED__
typedef interface IWord IWord;
#endif 	/* __IWord_FWD_DEFINED__ */


#ifndef __IWords_FWD_DEFINED__
#define __IWords_FWD_DEFINED__
typedef interface IWords IWords;
#endif 	/* __IWords_FWD_DEFINED__ */


#ifndef __ITextOrientation_FWD_DEFINED__
#define __ITextOrientation_FWD_DEFINED__
typedef interface ITextOrientation ITextOrientation;
#endif 	/* __ITextOrientation_FWD_DEFINED__ */


#ifndef __IFRPage_FWD_DEFINED__
#define __IFRPage_FWD_DEFINED__
typedef interface IFRPage IFRPage;
#endif 	/* __IFRPage_FWD_DEFINED__ */


#ifndef __ITextTableCell_FWD_DEFINED__
#define __ITextTableCell_FWD_DEFINED__
typedef interface ITextTableCell ITextTableCell;
#endif 	/* __ITextTableCell_FWD_DEFINED__ */


#ifndef __ICaptions_FWD_DEFINED__
#define __ICaptions_FWD_DEFINED__
typedef interface ICaptions ICaptions;
#endif 	/* __ICaptions_FWD_DEFINED__ */


#ifndef __IFRRectangle_FWD_DEFINED__
#define __IFRRectangle_FWD_DEFINED__
typedef interface IFRRectangle IFRRectangle;
#endif 	/* __IFRRectangle_FWD_DEFINED__ */


#ifndef __IRunningTitleSeriesText_FWD_DEFINED__
#define __IRunningTitleSeriesText_FWD_DEFINED__
typedef interface IRunningTitleSeriesText IRunningTitleSeriesText;
#endif 	/* __IRunningTitleSeriesText_FWD_DEFINED__ */


#ifndef __IEngine_FWD_DEFINED__
#define __IEngine_FWD_DEFINED__
typedef interface IEngine IEngine;
#endif 	/* __IEngine_FWD_DEFINED__ */


#ifndef __IRegion_FWD_DEFINED__
#define __IRegion_FWD_DEFINED__
typedef interface IRegion IRegion;
#endif 	/* __IRegion_FWD_DEFINED__ */


#ifndef __IParagraphStyle_FWD_DEFINED__
#define __IParagraphStyle_FWD_DEFINED__
typedef interface IParagraphStyle IParagraphStyle;
#endif 	/* __IParagraphStyle_FWD_DEFINED__ */


#ifndef __IFontStyle_FWD_DEFINED__
#define __IFontStyle_FWD_DEFINED__
typedef interface IFontStyle IFontStyle;
#endif 	/* __IFontStyle_FWD_DEFINED__ */


#ifndef __IListParams_FWD_DEFINED__
#define __IListParams_FWD_DEFINED__
typedef interface IListParams IListParams;
#endif 	/* __IListParams_FWD_DEFINED__ */


#ifndef __IStreamElementLocationParams_FWD_DEFINED__
#define __IStreamElementLocationParams_FWD_DEFINED__
typedef interface IStreamElementLocationParams IStreamElementLocationParams;
#endif 	/* __IStreamElementLocationParams_FWD_DEFINED__ */


#ifndef __ICharParams_FWD_DEFINED__
#define __ICharParams_FWD_DEFINED__
typedef interface ICharParams ICharParams;
#endif 	/* __ICharParams_FWD_DEFINED__ */


#ifndef __CharParams_FWD_DEFINED__
#define __CharParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class CharParams CharParams;
#else
typedef struct CharParams CharParams;
#endif /* __cplusplus */

#endif 	/* __CharParams_FWD_DEFINED__ */


#ifndef __ITabPosition_FWD_DEFINED__
#define __ITabPosition_FWD_DEFINED__
typedef interface ITabPosition ITabPosition;
#endif 	/* __ITabPosition_FWD_DEFINED__ */


#ifndef __TabPosition_FWD_DEFINED__
#define __TabPosition_FWD_DEFINED__

#ifdef __cplusplus
typedef class TabPosition TabPosition;
#else
typedef struct TabPosition TabPosition;
#endif /* __cplusplus */

#endif 	/* __TabPosition_FWD_DEFINED__ */


#ifndef __ITabPositions_FWD_DEFINED__
#define __ITabPositions_FWD_DEFINED__
typedef interface ITabPositions ITabPositions;
#endif 	/* __ITabPositions_FWD_DEFINED__ */


#ifndef __TabPositions_FWD_DEFINED__
#define __TabPositions_FWD_DEFINED__

#ifdef __cplusplus
typedef class TabPositions TabPositions;
#else
typedef struct TabPositions TabPositions;
#endif /* __cplusplus */

#endif 	/* __TabPositions_FWD_DEFINED__ */


#ifndef __IParagraphParams_FWD_DEFINED__
#define __IParagraphParams_FWD_DEFINED__
typedef interface IParagraphParams IParagraphParams;
#endif 	/* __IParagraphParams_FWD_DEFINED__ */


#ifndef __ParagraphParams_FWD_DEFINED__
#define __ParagraphParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class ParagraphParams ParagraphParams;
#else
typedef struct ParagraphParams ParagraphParams;
#endif /* __cplusplus */

#endif 	/* __ParagraphParams_FWD_DEFINED__ */


#ifndef __IParagraphLine_FWD_DEFINED__
#define __IParagraphLine_FWD_DEFINED__
typedef interface IParagraphLine IParagraphLine;
#endif 	/* __IParagraphLine_FWD_DEFINED__ */


#ifndef __ParagraphLine_FWD_DEFINED__
#define __ParagraphLine_FWD_DEFINED__

#ifdef __cplusplus
typedef class ParagraphLine ParagraphLine;
#else
typedef struct ParagraphLine ParagraphLine;
#endif /* __cplusplus */

#endif 	/* __ParagraphLine_FWD_DEFINED__ */


#ifndef __IParagraphLines_FWD_DEFINED__
#define __IParagraphLines_FWD_DEFINED__
typedef interface IParagraphLines IParagraphLines;
#endif 	/* __IParagraphLines_FWD_DEFINED__ */


#ifndef __ParagraphLines_FWD_DEFINED__
#define __ParagraphLines_FWD_DEFINED__

#ifdef __cplusplus
typedef class ParagraphLines ParagraphLines;
#else
typedef struct ParagraphLines ParagraphLines;
#endif /* __cplusplus */

#endif 	/* __ParagraphLines_FWD_DEFINED__ */


#ifndef __IParagraph_FWD_DEFINED__
#define __IParagraph_FWD_DEFINED__
typedef interface IParagraph IParagraph;
#endif 	/* __IParagraph_FWD_DEFINED__ */


#ifndef __Paragraph_FWD_DEFINED__
#define __Paragraph_FWD_DEFINED__

#ifdef __cplusplus
typedef class Paragraph Paragraph;
#else
typedef struct Paragraph Paragraph;
#endif /* __cplusplus */

#endif 	/* __Paragraph_FWD_DEFINED__ */


#ifndef __IParagraphs_FWD_DEFINED__
#define __IParagraphs_FWD_DEFINED__
typedef interface IParagraphs IParagraphs;
#endif 	/* __IParagraphs_FWD_DEFINED__ */


#ifndef __Paragraphs_FWD_DEFINED__
#define __Paragraphs_FWD_DEFINED__

#ifdef __cplusplus
typedef class Paragraphs Paragraphs;
#else
typedef struct Paragraphs Paragraphs;
#endif /* __cplusplus */

#endif 	/* __Paragraphs_FWD_DEFINED__ */


#ifndef __IWordRecognitionVariant_FWD_DEFINED__
#define __IWordRecognitionVariant_FWD_DEFINED__
typedef interface IWordRecognitionVariant IWordRecognitionVariant;
#endif 	/* __IWordRecognitionVariant_FWD_DEFINED__ */


#ifndef __WordRecognitionVariant_FWD_DEFINED__
#define __WordRecognitionVariant_FWD_DEFINED__

#ifdef __cplusplus
typedef class WordRecognitionVariant WordRecognitionVariant;
#else
typedef struct WordRecognitionVariant WordRecognitionVariant;
#endif /* __cplusplus */

#endif 	/* __WordRecognitionVariant_FWD_DEFINED__ */


#ifndef __WordRecognitionVariants_FWD_DEFINED__
#define __WordRecognitionVariants_FWD_DEFINED__

#ifdef __cplusplus
typedef class WordRecognitionVariants WordRecognitionVariants;
#else
typedef struct WordRecognitionVariants WordRecognitionVariants;
#endif /* __cplusplus */

#endif 	/* __WordRecognitionVariants_FWD_DEFINED__ */


#ifndef __CharacterRecognitionVariant_FWD_DEFINED__
#define __CharacterRecognitionVariant_FWD_DEFINED__

#ifdef __cplusplus
typedef class CharacterRecognitionVariant CharacterRecognitionVariant;
#else
typedef struct CharacterRecognitionVariant CharacterRecognitionVariant;
#endif /* __cplusplus */

#endif 	/* __CharacterRecognitionVariant_FWD_DEFINED__ */


#ifndef __CharacterRecognitionVariants_FWD_DEFINED__
#define __CharacterRecognitionVariants_FWD_DEFINED__

#ifdef __cplusplus
typedef class CharacterRecognitionVariants CharacterRecognitionVariants;
#else
typedef struct CharacterRecognitionVariants CharacterRecognitionVariants;
#endif /* __cplusplus */

#endif 	/* __CharacterRecognitionVariants_FWD_DEFINED__ */


#ifndef __Text_FWD_DEFINED__
#define __Text_FWD_DEFINED__

#ifdef __cplusplus
typedef class Text Text;
#else
typedef struct Text Text;
#endif /* __cplusplus */

#endif 	/* __Text_FWD_DEFINED__ */


#ifndef __Hyperlink_FWD_DEFINED__
#define __Hyperlink_FWD_DEFINED__

#ifdef __cplusplus
typedef class Hyperlink Hyperlink;
#else
typedef struct Hyperlink Hyperlink;
#endif /* __cplusplus */

#endif 	/* __Hyperlink_FWD_DEFINED__ */


#ifndef __Word_FWD_DEFINED__
#define __Word_FWD_DEFINED__

#ifdef __cplusplus
typedef class Word Word;
#else
typedef struct Word Word;
#endif /* __cplusplus */

#endif 	/* __Word_FWD_DEFINED__ */


#ifndef __Words_FWD_DEFINED__
#define __Words_FWD_DEFINED__

#ifdef __cplusplus
typedef class Words Words;
#else
typedef struct Words Words;
#endif /* __cplusplus */

#endif 	/* __Words_FWD_DEFINED__ */


#ifndef __ITextTable_FWD_DEFINED__
#define __ITextTable_FWD_DEFINED__
typedef interface ITextTable ITextTable;
#endif 	/* __ITextTable_FWD_DEFINED__ */


#ifndef __TextTable_FWD_DEFINED__
#define __TextTable_FWD_DEFINED__

#ifdef __cplusplus
typedef class TextTable TextTable;
#else
typedef struct TextTable TextTable;
#endif /* __cplusplus */

#endif 	/* __TextTable_FWD_DEFINED__ */


#ifndef __ITextPicture_FWD_DEFINED__
#define __ITextPicture_FWD_DEFINED__
typedef interface ITextPicture ITextPicture;
#endif 	/* __ITextPicture_FWD_DEFINED__ */


#ifndef __TextPicture_FWD_DEFINED__
#define __TextPicture_FWD_DEFINED__

#ifdef __cplusplus
typedef class TextPicture TextPicture;
#else
typedef struct TextPicture TextPicture;
#endif /* __cplusplus */

#endif 	/* __TextPicture_FWD_DEFINED__ */


#ifndef __ITextBarcode_FWD_DEFINED__
#define __ITextBarcode_FWD_DEFINED__
typedef interface ITextBarcode ITextBarcode;
#endif 	/* __ITextBarcode_FWD_DEFINED__ */


#ifndef __TextBarcode_FWD_DEFINED__
#define __TextBarcode_FWD_DEFINED__

#ifdef __cplusplus
typedef class TextBarcode TextBarcode;
#else
typedef struct TextBarcode TextBarcode;
#endif /* __cplusplus */

#endif 	/* __TextBarcode_FWD_DEFINED__ */


#ifndef __TextTableCell_FWD_DEFINED__
#define __TextTableCell_FWD_DEFINED__

#ifdef __cplusplus
typedef class TextTableCell TextTableCell;
#else
typedef struct TextTableCell TextTableCell;
#endif /* __cplusplus */

#endif 	/* __TextTableCell_FWD_DEFINED__ */


#ifndef __ICaption_FWD_DEFINED__
#define __ICaption_FWD_DEFINED__
typedef interface ICaption ICaption;
#endif 	/* __ICaption_FWD_DEFINED__ */


#ifndef __Caption_FWD_DEFINED__
#define __Caption_FWD_DEFINED__

#ifdef __cplusplus
typedef class Caption Caption;
#else
typedef struct Caption Caption;
#endif /* __cplusplus */

#endif 	/* __Caption_FWD_DEFINED__ */


#ifndef __Captions_FWD_DEFINED__
#define __Captions_FWD_DEFINED__

#ifdef __cplusplus
typedef class Captions Captions;
#else
typedef struct Captions Captions;
#endif /* __cplusplus */

#endif 	/* __Captions_FWD_DEFINED__ */


#ifndef __IRTFExportParams_FWD_DEFINED__
#define __IRTFExportParams_FWD_DEFINED__
typedef interface IRTFExportParams IRTFExportParams;
#endif 	/* __IRTFExportParams_FWD_DEFINED__ */


#ifndef __RTFExportParams_FWD_DEFINED__
#define __RTFExportParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class RTFExportParams RTFExportParams;
#else
typedef struct RTFExportParams RTFExportParams;
#endif /* __cplusplus */

#endif 	/* __RTFExportParams_FWD_DEFINED__ */


#ifndef __ITextExportParams_FWD_DEFINED__
#define __ITextExportParams_FWD_DEFINED__
typedef interface ITextExportParams ITextExportParams;
#endif 	/* __ITextExportParams_FWD_DEFINED__ */


#ifndef __TextExportParams_FWD_DEFINED__
#define __TextExportParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class TextExportParams TextExportParams;
#else
typedef struct TextExportParams TextExportParams;
#endif /* __cplusplus */

#endif 	/* __TextExportParams_FWD_DEFINED__ */


#ifndef __IXLExportParams_FWD_DEFINED__
#define __IXLExportParams_FWD_DEFINED__
typedef interface IXLExportParams IXLExportParams;
#endif 	/* __IXLExportParams_FWD_DEFINED__ */


#ifndef __XLExportParams_FWD_DEFINED__
#define __XLExportParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class XLExportParams XLExportParams;
#else
typedef struct XLExportParams XLExportParams;
#endif /* __cplusplus */

#endif 	/* __XLExportParams_FWD_DEFINED__ */


#ifndef __IHTMLExportParams_FWD_DEFINED__
#define __IHTMLExportParams_FWD_DEFINED__
typedef interface IHTMLExportParams IHTMLExportParams;
#endif 	/* __IHTMLExportParams_FWD_DEFINED__ */


#ifndef __HTMLExportParams_FWD_DEFINED__
#define __HTMLExportParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class HTMLExportParams HTMLExportParams;
#else
typedef struct HTMLExportParams HTMLExportParams;
#endif /* __cplusplus */

#endif 	/* __HTMLExportParams_FWD_DEFINED__ */


#ifndef __IPDFEncryptionInfo_FWD_DEFINED__
#define __IPDFEncryptionInfo_FWD_DEFINED__
typedef interface IPDFEncryptionInfo IPDFEncryptionInfo;
#endif 	/* __IPDFEncryptionInfo_FWD_DEFINED__ */


#ifndef __PDFEncryptionInfo_FWD_DEFINED__
#define __PDFEncryptionInfo_FWD_DEFINED__

#ifdef __cplusplus
typedef class PDFEncryptionInfo PDFEncryptionInfo;
#else
typedef struct PDFEncryptionInfo PDFEncryptionInfo;
#endif /* __cplusplus */

#endif 	/* __PDFEncryptionInfo_FWD_DEFINED__ */


#ifndef __IPDFMRCParams_FWD_DEFINED__
#define __IPDFMRCParams_FWD_DEFINED__
typedef interface IPDFMRCParams IPDFMRCParams;
#endif 	/* __IPDFMRCParams_FWD_DEFINED__ */


#ifndef __PDFMRCParams_FWD_DEFINED__
#define __PDFMRCParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class PDFMRCParams PDFMRCParams;
#else
typedef struct PDFMRCParams PDFMRCParams;
#endif /* __cplusplus */

#endif 	/* __PDFMRCParams_FWD_DEFINED__ */


#ifndef __IPDFExportParamsOld_FWD_DEFINED__
#define __IPDFExportParamsOld_FWD_DEFINED__
typedef interface IPDFExportParamsOld IPDFExportParamsOld;
#endif 	/* __IPDFExportParamsOld_FWD_DEFINED__ */


#ifndef __PDFExportParamsOld_FWD_DEFINED__
#define __PDFExportParamsOld_FWD_DEFINED__

#ifdef __cplusplus
typedef class PDFExportParamsOld PDFExportParamsOld;
#else
typedef struct PDFExportParamsOld PDFExportParamsOld;
#endif /* __cplusplus */

#endif 	/* __PDFExportParamsOld_FWD_DEFINED__ */


#ifndef __IPDFAExportParamsOld_FWD_DEFINED__
#define __IPDFAExportParamsOld_FWD_DEFINED__
typedef interface IPDFAExportParamsOld IPDFAExportParamsOld;
#endif 	/* __IPDFAExportParamsOld_FWD_DEFINED__ */


#ifndef __PDFAExportParamsOld_FWD_DEFINED__
#define __PDFAExportParamsOld_FWD_DEFINED__

#ifdef __cplusplus
typedef class PDFAExportParamsOld PDFAExportParamsOld;
#else
typedef struct PDFAExportParamsOld PDFAExportParamsOld;
#endif /* __cplusplus */

#endif 	/* __PDFAExportParamsOld_FWD_DEFINED__ */


#ifndef __IDocumentContentInfoWritingParams_FWD_DEFINED__
#define __IDocumentContentInfoWritingParams_FWD_DEFINED__
typedef interface IDocumentContentInfoWritingParams IDocumentContentInfoWritingParams;
#endif 	/* __IDocumentContentInfoWritingParams_FWD_DEFINED__ */


#ifndef __DocumentContentInfoWritingParams_FWD_DEFINED__
#define __DocumentContentInfoWritingParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class DocumentContentInfoWritingParams DocumentContentInfoWritingParams;
#else
typedef struct DocumentContentInfoWritingParams DocumentContentInfoWritingParams;
#endif /* __cplusplus */

#endif 	/* __DocumentContentInfoWritingParams_FWD_DEFINED__ */


#ifndef __IPDFPaperSizeParams_FWD_DEFINED__
#define __IPDFPaperSizeParams_FWD_DEFINED__
typedef interface IPDFPaperSizeParams IPDFPaperSizeParams;
#endif 	/* __IPDFPaperSizeParams_FWD_DEFINED__ */


#ifndef __PDFPaperSizeParams_FWD_DEFINED__
#define __PDFPaperSizeParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class PDFPaperSizeParams PDFPaperSizeParams;
#else
typedef struct PDFPaperSizeParams PDFPaperSizeParams;
#endif /* __cplusplus */

#endif 	/* __PDFPaperSizeParams_FWD_DEFINED__ */


#ifndef __IPDFExportFeatures_FWD_DEFINED__
#define __IPDFExportFeatures_FWD_DEFINED__
typedef interface IPDFExportFeatures IPDFExportFeatures;
#endif 	/* __IPDFExportFeatures_FWD_DEFINED__ */


#ifndef __PDFExportFeatures_FWD_DEFINED__
#define __PDFExportFeatures_FWD_DEFINED__

#ifdef __cplusplus
typedef class PDFExportFeatures PDFExportFeatures;
#else
typedef struct PDFExportFeatures PDFExportFeatures;
#endif /* __cplusplus */

#endif 	/* __PDFExportFeatures_FWD_DEFINED__ */


#ifndef __IPDFPictureCompressionParams_FWD_DEFINED__
#define __IPDFPictureCompressionParams_FWD_DEFINED__
typedef interface IPDFPictureCompressionParams IPDFPictureCompressionParams;
#endif 	/* __IPDFPictureCompressionParams_FWD_DEFINED__ */


#ifndef __PDFPictureCompressionParams_FWD_DEFINED__
#define __PDFPictureCompressionParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class PDFPictureCompressionParams PDFPictureCompressionParams;
#else
typedef struct PDFPictureCompressionParams PDFPictureCompressionParams;
#endif /* __cplusplus */

#endif 	/* __PDFPictureCompressionParams_FWD_DEFINED__ */


#ifndef __IPDFExportParams_FWD_DEFINED__
#define __IPDFExportParams_FWD_DEFINED__
typedef interface IPDFExportParams IPDFExportParams;
#endif 	/* __IPDFExportParams_FWD_DEFINED__ */


#ifndef __PDFExportParams_FWD_DEFINED__
#define __PDFExportParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class PDFExportParams PDFExportParams;
#else
typedef struct PDFExportParams PDFExportParams;
#endif /* __cplusplus */

#endif 	/* __PDFExportParams_FWD_DEFINED__ */


#ifndef __IXMLExportParams_FWD_DEFINED__
#define __IXMLExportParams_FWD_DEFINED__
typedef interface IXMLExportParams IXMLExportParams;
#endif 	/* __IXMLExportParams_FWD_DEFINED__ */


#ifndef __XMLExportParams_FWD_DEFINED__
#define __XMLExportParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class XMLExportParams XMLExportParams;
#else
typedef struct XMLExportParams XMLExportParams;
#endif /* __cplusplus */

#endif 	/* __XMLExportParams_FWD_DEFINED__ */


#ifndef __IPPTExportParams_FWD_DEFINED__
#define __IPPTExportParams_FWD_DEFINED__
typedef interface IPPTExportParams IPPTExportParams;
#endif 	/* __IPPTExportParams_FWD_DEFINED__ */


#ifndef __PPTExportParams_FWD_DEFINED__
#define __PPTExportParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class PPTExportParams PPTExportParams;
#else
typedef struct PPTExportParams PPTExportParams;
#endif /* __cplusplus */

#endif 	/* __PPTExportParams_FWD_DEFINED__ */


#ifndef __IAltoExportParams_FWD_DEFINED__
#define __IAltoExportParams_FWD_DEFINED__
typedef interface IAltoExportParams IAltoExportParams;
#endif 	/* __IAltoExportParams_FWD_DEFINED__ */


#ifndef __AltoExportParams_FWD_DEFINED__
#define __AltoExportParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class AltoExportParams AltoExportParams;
#else
typedef struct AltoExportParams AltoExportParams;
#endif /* __cplusplus */

#endif 	/* __AltoExportParams_FWD_DEFINED__ */


#ifndef __IImageDocument_FWD_DEFINED__
#define __IImageDocument_FWD_DEFINED__
typedef interface IImageDocument IImageDocument;
#endif 	/* __IImageDocument_FWD_DEFINED__ */


#ifndef __Region_FWD_DEFINED__
#define __Region_FWD_DEFINED__

#ifdef __cplusplus
typedef class Region Region;
#else
typedef struct Region Region;
#endif /* __cplusplus */

#endif 	/* __Region_FWD_DEFINED__ */


#ifndef __IImageModification_FWD_DEFINED__
#define __IImageModification_FWD_DEFINED__
typedef interface IImageModification IImageModification;
#endif 	/* __IImageModification_FWD_DEFINED__ */


#ifndef __ImageModification_FWD_DEFINED__
#define __ImageModification_FWD_DEFINED__

#ifdef __cplusplus
typedef class ImageModification ImageModification;
#else
typedef struct ImageModification ImageModification;
#endif /* __cplusplus */

#endif 	/* __ImageModification_FWD_DEFINED__ */


#ifndef __IImage_FWD_DEFINED__
#define __IImage_FWD_DEFINED__
typedef interface IImage IImage;
#endif 	/* __IImage_FWD_DEFINED__ */


#ifndef __Image_FWD_DEFINED__
#define __Image_FWD_DEFINED__

#ifdef __cplusplus
typedef class Image Image;
#else
typedef struct Image Image;
#endif /* __cplusplus */

#endif 	/* __Image_FWD_DEFINED__ */


#ifndef __IPrepareImageMode_FWD_DEFINED__
#define __IPrepareImageMode_FWD_DEFINED__
typedef interface IPrepareImageMode IPrepareImageMode;
#endif 	/* __IPrepareImageMode_FWD_DEFINED__ */


#ifndef __PrepareImageMode_FWD_DEFINED__
#define __PrepareImageMode_FWD_DEFINED__

#ifdef __cplusplus
typedef class PrepareImageMode PrepareImageMode;
#else
typedef struct PrepareImageMode PrepareImageMode;
#endif /* __cplusplus */

#endif 	/* __PrepareImageMode_FWD_DEFINED__ */


#ifndef __DIImageDocumentEvents_FWD_DEFINED__
#define __DIImageDocumentEvents_FWD_DEFINED__
typedef interface DIImageDocumentEvents DIImageDocumentEvents;
#endif 	/* __DIImageDocumentEvents_FWD_DEFINED__ */


#ifndef __IImageDocumentEvents_FWD_DEFINED__
#define __IImageDocumentEvents_FWD_DEFINED__
typedef interface IImageDocumentEvents IImageDocumentEvents;
#endif 	/* __IImageDocumentEvents_FWD_DEFINED__ */


#ifndef __ImageDocument_FWD_DEFINED__
#define __ImageDocument_FWD_DEFINED__

#ifdef __cplusplus
typedef class ImageDocument ImageDocument;
#else
typedef struct ImageDocument ImageDocument;
#endif /* __cplusplus */

#endif 	/* __ImageDocument_FWD_DEFINED__ */


#ifndef __IMultipageImageWriter_FWD_DEFINED__
#define __IMultipageImageWriter_FWD_DEFINED__
typedef interface IMultipageImageWriter IMultipageImageWriter;
#endif 	/* __IMultipageImageWriter_FWD_DEFINED__ */


#ifndef __MultipageImageWriter_FWD_DEFINED__
#define __MultipageImageWriter_FWD_DEFINED__

#ifdef __cplusplus
typedef class MultipageImageWriter MultipageImageWriter;
#else
typedef struct MultipageImageWriter MultipageImageWriter;
#endif /* __cplusplus */

#endif 	/* __MultipageImageWriter_FWD_DEFINED__ */


#ifndef __IJpegExtendedParams_FWD_DEFINED__
#define __IJpegExtendedParams_FWD_DEFINED__
typedef interface IJpegExtendedParams IJpegExtendedParams;
#endif 	/* __IJpegExtendedParams_FWD_DEFINED__ */


#ifndef __JpegExtendedParams_FWD_DEFINED__
#define __JpegExtendedParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class JpegExtendedParams JpegExtendedParams;
#else
typedef struct JpegExtendedParams JpegExtendedParams;
#endif /* __cplusplus */

#endif 	/* __JpegExtendedParams_FWD_DEFINED__ */


#ifndef __IPdfExtendedParams_FWD_DEFINED__
#define __IPdfExtendedParams_FWD_DEFINED__
typedef interface IPdfExtendedParams IPdfExtendedParams;
#endif 	/* __IPdfExtendedParams_FWD_DEFINED__ */


#ifndef __PdfExtendedParams_FWD_DEFINED__
#define __PdfExtendedParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class PdfExtendedParams PdfExtendedParams;
#else
typedef struct PdfExtendedParams PdfExtendedParams;
#endif /* __cplusplus */

#endif 	/* __PdfExtendedParams_FWD_DEFINED__ */


#ifndef __ITrainingImage_FWD_DEFINED__
#define __ITrainingImage_FWD_DEFINED__
typedef interface ITrainingImage ITrainingImage;
#endif 	/* __ITrainingImage_FWD_DEFINED__ */


#ifndef __TrainingImage_FWD_DEFINED__
#define __TrainingImage_FWD_DEFINED__

#ifdef __cplusplus
typedef class TrainingImage TrainingImage;
#else
typedef struct TrainingImage TrainingImage;
#endif /* __cplusplus */

#endif 	/* __TrainingImage_FWD_DEFINED__ */


#ifndef __IObjectsExtractionParams_FWD_DEFINED__
#define __IObjectsExtractionParams_FWD_DEFINED__
typedef interface IObjectsExtractionParams IObjectsExtractionParams;
#endif 	/* __IObjectsExtractionParams_FWD_DEFINED__ */


#ifndef __IBarcodeParams_FWD_DEFINED__
#define __IBarcodeParams_FWD_DEFINED__
typedef interface IBarcodeParams IBarcodeParams;
#endif 	/* __IBarcodeParams_FWD_DEFINED__ */


#ifndef __ITextLanguage_FWD_DEFINED__
#define __ITextLanguage_FWD_DEFINED__
typedef interface ITextLanguage ITextLanguage;
#endif 	/* __ITextLanguage_FWD_DEFINED__ */


#ifndef __ILongsCollection_FWD_DEFINED__
#define __ILongsCollection_FWD_DEFINED__
typedef interface ILongsCollection ILongsCollection;
#endif 	/* __ILongsCollection_FWD_DEFINED__ */


#ifndef __ITableAnalysisParams_FWD_DEFINED__
#define __ITableAnalysisParams_FWD_DEFINED__
typedef interface ITableAnalysisParams ITableAnalysisParams;
#endif 	/* __ITableAnalysisParams_FWD_DEFINED__ */


#ifndef __IOrientationDetectionParams_FWD_DEFINED__
#define __IOrientationDetectionParams_FWD_DEFINED__
typedef interface IOrientationDetectionParams IOrientationDetectionParams;
#endif 	/* __IOrientationDetectionParams_FWD_DEFINED__ */


#ifndef __OrientationDetectionParams_FWD_DEFINED__
#define __OrientationDetectionParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class OrientationDetectionParams OrientationDetectionParams;
#else
typedef struct OrientationDetectionParams OrientationDetectionParams;
#endif /* __cplusplus */

#endif 	/* __OrientationDetectionParams_FWD_DEFINED__ */


#ifndef __IPageAnalysisParams_FWD_DEFINED__
#define __IPageAnalysisParams_FWD_DEFINED__
typedef interface IPageAnalysisParams IPageAnalysisParams;
#endif 	/* __IPageAnalysisParams_FWD_DEFINED__ */


#ifndef __PageAnalysisParams_FWD_DEFINED__
#define __PageAnalysisParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class PageAnalysisParams PageAnalysisParams;
#else
typedef struct PageAnalysisParams PageAnalysisParams;
#endif /* __cplusplus */

#endif 	/* __PageAnalysisParams_FWD_DEFINED__ */


#ifndef __TableAnalysisParams_FWD_DEFINED__
#define __TableAnalysisParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class TableAnalysisParams TableAnalysisParams;
#else
typedef struct TableAnalysisParams TableAnalysisParams;
#endif /* __cplusplus */

#endif 	/* __TableAnalysisParams_FWD_DEFINED__ */


#ifndef __IRecognizerExtendedParams_FWD_DEFINED__
#define __IRecognizerExtendedParams_FWD_DEFINED__
typedef interface IRecognizerExtendedParams IRecognizerExtendedParams;
#endif 	/* __IRecognizerExtendedParams_FWD_DEFINED__ */


#ifndef __RecognizerExtendedParams_FWD_DEFINED__
#define __RecognizerExtendedParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class RecognizerExtendedParams RecognizerExtendedParams;
#else
typedef struct RecognizerExtendedParams RecognizerExtendedParams;
#endif /* __cplusplus */

#endif 	/* __RecognizerExtendedParams_FWD_DEFINED__ */


#ifndef __IRecognizerParams_FWD_DEFINED__
#define __IRecognizerParams_FWD_DEFINED__
typedef interface IRecognizerParams IRecognizerParams;
#endif 	/* __IRecognizerParams_FWD_DEFINED__ */


#ifndef __RecognizerParams_FWD_DEFINED__
#define __RecognizerParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class RecognizerParams RecognizerParams;
#else
typedef struct RecognizerParams RecognizerParams;
#endif /* __cplusplus */

#endif 	/* __RecognizerParams_FWD_DEFINED__ */


#ifndef __IImageProcessingParams_FWD_DEFINED__
#define __IImageProcessingParams_FWD_DEFINED__
typedef interface IImageProcessingParams IImageProcessingParams;
#endif 	/* __IImageProcessingParams_FWD_DEFINED__ */


#ifndef __ImageProcessingParams_FWD_DEFINED__
#define __ImageProcessingParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class ImageProcessingParams ImageProcessingParams;
#else
typedef struct ImageProcessingParams ImageProcessingParams;
#endif /* __cplusplus */

#endif 	/* __ImageProcessingParams_FWD_DEFINED__ */


#ifndef __IDocumentStructureDetectionParams_FWD_DEFINED__
#define __IDocumentStructureDetectionParams_FWD_DEFINED__
typedef interface IDocumentStructureDetectionParams IDocumentStructureDetectionParams;
#endif 	/* __IDocumentStructureDetectionParams_FWD_DEFINED__ */


#ifndef __DocumentStructureDetectionParams_FWD_DEFINED__
#define __DocumentStructureDetectionParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class DocumentStructureDetectionParams DocumentStructureDetectionParams;
#else
typedef struct DocumentStructureDetectionParams DocumentStructureDetectionParams;
#endif /* __cplusplus */

#endif 	/* __DocumentStructureDetectionParams_FWD_DEFINED__ */


#ifndef __IFontFormattingDetectionParams_FWD_DEFINED__
#define __IFontFormattingDetectionParams_FWD_DEFINED__
typedef interface IFontFormattingDetectionParams IFontFormattingDetectionParams;
#endif 	/* __IFontFormattingDetectionParams_FWD_DEFINED__ */


#ifndef __FontFormattingDetectionParams_FWD_DEFINED__
#define __FontFormattingDetectionParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class FontFormattingDetectionParams FontFormattingDetectionParams;
#else
typedef struct FontFormattingDetectionParams FontFormattingDetectionParams;
#endif /* __cplusplus */

#endif 	/* __FontFormattingDetectionParams_FWD_DEFINED__ */


#ifndef __ISynthesisParamsForDocument_FWD_DEFINED__
#define __ISynthesisParamsForDocument_FWD_DEFINED__
typedef interface ISynthesisParamsForDocument ISynthesisParamsForDocument;
#endif 	/* __ISynthesisParamsForDocument_FWD_DEFINED__ */


#ifndef __SynthesisParamsForDocument_FWD_DEFINED__
#define __SynthesisParamsForDocument_FWD_DEFINED__

#ifdef __cplusplus
typedef class SynthesisParamsForDocument SynthesisParamsForDocument;
#else
typedef struct SynthesisParamsForDocument SynthesisParamsForDocument;
#endif /* __cplusplus */

#endif 	/* __SynthesisParamsForDocument_FWD_DEFINED__ */


#ifndef __IFontFormattingDetectionParamsForPage_FWD_DEFINED__
#define __IFontFormattingDetectionParamsForPage_FWD_DEFINED__
typedef interface IFontFormattingDetectionParamsForPage IFontFormattingDetectionParamsForPage;
#endif 	/* __IFontFormattingDetectionParamsForPage_FWD_DEFINED__ */


#ifndef __FontFormattingDetectionParamsForPage_FWD_DEFINED__
#define __FontFormattingDetectionParamsForPage_FWD_DEFINED__

#ifdef __cplusplus
typedef class FontFormattingDetectionParamsForPage FontFormattingDetectionParamsForPage;
#else
typedef struct FontFormattingDetectionParamsForPage FontFormattingDetectionParamsForPage;
#endif /* __cplusplus */

#endif 	/* __FontFormattingDetectionParamsForPage_FWD_DEFINED__ */


#ifndef __ISynthesisParamsForPage_FWD_DEFINED__
#define __ISynthesisParamsForPage_FWD_DEFINED__
typedef interface ISynthesisParamsForPage ISynthesisParamsForPage;
#endif 	/* __ISynthesisParamsForPage_FWD_DEFINED__ */


#ifndef __SynthesisParamsForPage_FWD_DEFINED__
#define __SynthesisParamsForPage_FWD_DEFINED__

#ifdef __cplusplus
typedef class SynthesisParamsForPage SynthesisParamsForPage;
#else
typedef struct SynthesisParamsForPage SynthesisParamsForPage;
#endif /* __cplusplus */

#endif 	/* __SynthesisParamsForPage_FWD_DEFINED__ */


#ifndef __IPageProcessingParams_FWD_DEFINED__
#define __IPageProcessingParams_FWD_DEFINED__
typedef interface IPageProcessingParams IPageProcessingParams;
#endif 	/* __IPageProcessingParams_FWD_DEFINED__ */


#ifndef __PageProcessingParams_FWD_DEFINED__
#define __PageProcessingParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class PageProcessingParams PageProcessingParams;
#else
typedef struct PageProcessingParams PageProcessingParams;
#endif /* __cplusplus */

#endif 	/* __PageProcessingParams_FWD_DEFINED__ */


#ifndef __ObjectsExtractionParams_FWD_DEFINED__
#define __ObjectsExtractionParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class ObjectsExtractionParams ObjectsExtractionParams;
#else
typedef struct ObjectsExtractionParams ObjectsExtractionParams;
#endif /* __cplusplus */

#endif 	/* __ObjectsExtractionParams_FWD_DEFINED__ */


#ifndef __ITextBlockAnalysisParams_FWD_DEFINED__
#define __ITextBlockAnalysisParams_FWD_DEFINED__
typedef interface ITextBlockAnalysisParams ITextBlockAnalysisParams;
#endif 	/* __ITextBlockAnalysisParams_FWD_DEFINED__ */


#ifndef __TextBlockAnalysisParams_FWD_DEFINED__
#define __TextBlockAnalysisParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class TextBlockAnalysisParams TextBlockAnalysisParams;
#else
typedef struct TextBlockAnalysisParams TextBlockAnalysisParams;
#endif /* __cplusplus */

#endif 	/* __TextBlockAnalysisParams_FWD_DEFINED__ */


#ifndef __IStringsCollection_FWD_DEFINED__
#define __IStringsCollection_FWD_DEFINED__
typedef interface IStringsCollection IStringsCollection;
#endif 	/* __IStringsCollection_FWD_DEFINED__ */


#ifndef __IEnumDictionaryWords_FWD_DEFINED__
#define __IEnumDictionaryWords_FWD_DEFINED__
typedef interface IEnumDictionaryWords IEnumDictionaryWords;
#endif 	/* __IEnumDictionaryWords_FWD_DEFINED__ */


#ifndef __IDictionary_FWD_DEFINED__
#define __IDictionary_FWD_DEFINED__
typedef interface IDictionary IDictionary;
#endif 	/* __IDictionary_FWD_DEFINED__ */


#ifndef __Dictionary_FWD_DEFINED__
#define __Dictionary_FWD_DEFINED__

#ifdef __cplusplus
typedef class Dictionary Dictionary;
#else
typedef struct Dictionary Dictionary;
#endif /* __cplusplus */

#endif 	/* __Dictionary_FWD_DEFINED__ */


#ifndef __EnumDictionaryWords_FWD_DEFINED__
#define __EnumDictionaryWords_FWD_DEFINED__

#ifdef __cplusplus
typedef class EnumDictionaryWords EnumDictionaryWords;
#else
typedef struct EnumDictionaryWords EnumDictionaryWords;
#endif /* __cplusplus */

#endif 	/* __EnumDictionaryWords_FWD_DEFINED__ */


#ifndef __IDictionaryDescriptions_FWD_DEFINED__
#define __IDictionaryDescriptions_FWD_DEFINED__
typedef interface IDictionaryDescriptions IDictionaryDescriptions;
#endif 	/* __IDictionaryDescriptions_FWD_DEFINED__ */


#ifndef __IBaseLanguage_FWD_DEFINED__
#define __IBaseLanguage_FWD_DEFINED__
typedef interface IBaseLanguage IBaseLanguage;
#endif 	/* __IBaseLanguage_FWD_DEFINED__ */


#ifndef __BaseLanguage_FWD_DEFINED__
#define __BaseLanguage_FWD_DEFINED__

#ifdef __cplusplus
typedef class BaseLanguage BaseLanguage;
#else
typedef struct BaseLanguage BaseLanguage;
#endif /* __cplusplus */

#endif 	/* __BaseLanguage_FWD_DEFINED__ */


#ifndef __IBaseLanguages_FWD_DEFINED__
#define __IBaseLanguages_FWD_DEFINED__
typedef interface IBaseLanguages IBaseLanguages;
#endif 	/* __IBaseLanguages_FWD_DEFINED__ */


#ifndef __BaseLanguages_FWD_DEFINED__
#define __BaseLanguages_FWD_DEFINED__

#ifdef __cplusplus
typedef class BaseLanguages BaseLanguages;
#else
typedef struct BaseLanguages BaseLanguages;
#endif /* __cplusplus */

#endif 	/* __BaseLanguages_FWD_DEFINED__ */


#ifndef __TextLanguage_FWD_DEFINED__
#define __TextLanguage_FWD_DEFINED__

#ifdef __cplusplus
typedef class TextLanguage TextLanguage;
#else
typedef struct TextLanguage TextLanguage;
#endif /* __cplusplus */

#endif 	/* __TextLanguage_FWD_DEFINED__ */


#ifndef __IPredefinedLanguage_FWD_DEFINED__
#define __IPredefinedLanguage_FWD_DEFINED__
typedef interface IPredefinedLanguage IPredefinedLanguage;
#endif 	/* __IPredefinedLanguage_FWD_DEFINED__ */


#ifndef __PredefinedLanguage_FWD_DEFINED__
#define __PredefinedLanguage_FWD_DEFINED__

#ifdef __cplusplus
typedef class PredefinedLanguage PredefinedLanguage;
#else
typedef struct PredefinedLanguage PredefinedLanguage;
#endif /* __cplusplus */

#endif 	/* __PredefinedLanguage_FWD_DEFINED__ */


#ifndef __IPredefinedLanguages_FWD_DEFINED__
#define __IPredefinedLanguages_FWD_DEFINED__
typedef interface IPredefinedLanguages IPredefinedLanguages;
#endif 	/* __IPredefinedLanguages_FWD_DEFINED__ */


#ifndef __PredefinedLanguages_FWD_DEFINED__
#define __PredefinedLanguages_FWD_DEFINED__

#ifdef __cplusplus
typedef class PredefinedLanguages PredefinedLanguages;
#else
typedef struct PredefinedLanguages PredefinedLanguages;
#endif /* __cplusplus */

#endif 	/* __PredefinedLanguages_FWD_DEFINED__ */


#ifndef __ILanguageDatabase_FWD_DEFINED__
#define __ILanguageDatabase_FWD_DEFINED__
typedef interface ILanguageDatabase ILanguageDatabase;
#endif 	/* __ILanguageDatabase_FWD_DEFINED__ */


#ifndef __LanguageDatabase_FWD_DEFINED__
#define __LanguageDatabase_FWD_DEFINED__

#ifdef __cplusplus
typedef class LanguageDatabase LanguageDatabase;
#else
typedef struct LanguageDatabase LanguageDatabase;
#endif /* __cplusplus */

#endif 	/* __LanguageDatabase_FWD_DEFINED__ */


#ifndef __IFuzzyStringsCollection_FWD_DEFINED__
#define __IFuzzyStringsCollection_FWD_DEFINED__
typedef interface IFuzzyStringsCollection IFuzzyStringsCollection;
#endif 	/* __IFuzzyStringsCollection_FWD_DEFINED__ */


#ifndef __IDictionaryDescription_FWD_DEFINED__
#define __IDictionaryDescription_FWD_DEFINED__
typedef interface IDictionaryDescription IDictionaryDescription;
#endif 	/* __IDictionaryDescription_FWD_DEFINED__ */


#ifndef __IStandardDictionaryDescription_FWD_DEFINED__
#define __IStandardDictionaryDescription_FWD_DEFINED__
typedef interface IStandardDictionaryDescription IStandardDictionaryDescription;
#endif 	/* __IStandardDictionaryDescription_FWD_DEFINED__ */


#ifndef __IUserDictionaryDescription_FWD_DEFINED__
#define __IUserDictionaryDescription_FWD_DEFINED__
typedef interface IUserDictionaryDescription IUserDictionaryDescription;
#endif 	/* __IUserDictionaryDescription_FWD_DEFINED__ */


#ifndef __IRegExpDictionaryDescription_FWD_DEFINED__
#define __IRegExpDictionaryDescription_FWD_DEFINED__
typedef interface IRegExpDictionaryDescription IRegExpDictionaryDescription;
#endif 	/* __IRegExpDictionaryDescription_FWD_DEFINED__ */


#ifndef __DictionaryDescriptions_FWD_DEFINED__
#define __DictionaryDescriptions_FWD_DEFINED__

#ifdef __cplusplus
typedef class DictionaryDescriptions DictionaryDescriptions;
#else
typedef struct DictionaryDescriptions DictionaryDescriptions;
#endif /* __cplusplus */

#endif 	/* __DictionaryDescriptions_FWD_DEFINED__ */


#ifndef __DictionaryDescription_FWD_DEFINED__
#define __DictionaryDescription_FWD_DEFINED__

#ifdef __cplusplus
typedef class DictionaryDescription DictionaryDescription;
#else
typedef struct DictionaryDescription DictionaryDescription;
#endif /* __cplusplus */

#endif 	/* __DictionaryDescription_FWD_DEFINED__ */


#ifndef __RegExpDictionaryDescription_FWD_DEFINED__
#define __RegExpDictionaryDescription_FWD_DEFINED__

#ifdef __cplusplus
typedef class RegExpDictionaryDescription RegExpDictionaryDescription;
#else
typedef struct RegExpDictionaryDescription RegExpDictionaryDescription;
#endif /* __cplusplus */

#endif 	/* __RegExpDictionaryDescription_FWD_DEFINED__ */


#ifndef __UserDictionaryDescription_FWD_DEFINED__
#define __UserDictionaryDescription_FWD_DEFINED__

#ifdef __cplusplus
typedef class UserDictionaryDescription UserDictionaryDescription;
#else
typedef struct UserDictionaryDescription UserDictionaryDescription;
#endif /* __cplusplus */

#endif 	/* __UserDictionaryDescription_FWD_DEFINED__ */


#ifndef __StandardDictionaryDescription_FWD_DEFINED__
#define __StandardDictionaryDescription_FWD_DEFINED__

#ifdef __cplusplus
typedef class StandardDictionaryDescription StandardDictionaryDescription;
#else
typedef struct StandardDictionaryDescription StandardDictionaryDescription;
#endif /* __cplusplus */

#endif 	/* __StandardDictionaryDescription_FWD_DEFINED__ */


#ifndef __IFuzzyString_FWD_DEFINED__
#define __IFuzzyString_FWD_DEFINED__
typedef interface IFuzzyString IFuzzyString;
#endif 	/* __IFuzzyString_FWD_DEFINED__ */


#ifndef __FuzzyString_FWD_DEFINED__
#define __FuzzyString_FWD_DEFINED__

#ifdef __cplusplus
typedef class FuzzyString FuzzyString;
#else
typedef struct FuzzyString FuzzyString;
#endif /* __cplusplus */

#endif 	/* __FuzzyString_FWD_DEFINED__ */


#ifndef __IExternalDictionaryCallback_FWD_DEFINED__
#define __IExternalDictionaryCallback_FWD_DEFINED__
typedef interface IExternalDictionaryCallback IExternalDictionaryCallback;
#endif 	/* __IExternalDictionaryCallback_FWD_DEFINED__ */


#ifndef __IExternalDictionary_FWD_DEFINED__
#define __IExternalDictionary_FWD_DEFINED__
typedef interface IExternalDictionary IExternalDictionary;
#endif 	/* __IExternalDictionary_FWD_DEFINED__ */


#ifndef __IExternalDictionaryDescription_FWD_DEFINED__
#define __IExternalDictionaryDescription_FWD_DEFINED__
typedef interface IExternalDictionaryDescription IExternalDictionaryDescription;
#endif 	/* __IExternalDictionaryDescription_FWD_DEFINED__ */


#ifndef __ExternalDictionaryDescription_FWD_DEFINED__
#define __ExternalDictionaryDescription_FWD_DEFINED__

#ifdef __cplusplus
typedef class ExternalDictionaryDescription ExternalDictionaryDescription;
#else
typedef struct ExternalDictionaryDescription ExternalDictionaryDescription;
#endif /* __cplusplus */

#endif 	/* __ExternalDictionaryDescription_FWD_DEFINED__ */


#ifndef __BarcodeParams_FWD_DEFINED__
#define __BarcodeParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class BarcodeParams BarcodeParams;
#else
typedef struct BarcodeParams BarcodeParams;
#endif /* __cplusplus */

#endif 	/* __BarcodeParams_FWD_DEFINED__ */


#ifndef __IBarcodeSymbol_FWD_DEFINED__
#define __IBarcodeSymbol_FWD_DEFINED__
typedef interface IBarcodeSymbol IBarcodeSymbol;
#endif 	/* __IBarcodeSymbol_FWD_DEFINED__ */


#ifndef __IBarcodeText_FWD_DEFINED__
#define __IBarcodeText_FWD_DEFINED__
typedef interface IBarcodeText IBarcodeText;
#endif 	/* __IBarcodeText_FWD_DEFINED__ */


#ifndef __IBlock_FWD_DEFINED__
#define __IBlock_FWD_DEFINED__
typedef interface IBlock IBlock;
#endif 	/* __IBlock_FWD_DEFINED__ */


#ifndef __IBarcodeBlock_FWD_DEFINED__
#define __IBarcodeBlock_FWD_DEFINED__
typedef interface IBarcodeBlock IBarcodeBlock;
#endif 	/* __IBarcodeBlock_FWD_DEFINED__ */


#ifndef __BarcodeBlock_FWD_DEFINED__
#define __BarcodeBlock_FWD_DEFINED__

#ifdef __cplusplus
typedef class BarcodeBlock BarcodeBlock;
#else
typedef struct BarcodeBlock BarcodeBlock;
#endif /* __cplusplus */

#endif 	/* __BarcodeBlock_FWD_DEFINED__ */

#ifndef __IBarcodeBlockProperties_FWD_DEFINED__
#define __IBarcodeBlockProperties_FWD_DEFINED__
typedef interface IBarcodeBlockProperties IBarcodeBlockProperties;
#endif 	/* __IBarcodeBlockProperties_FWD_DEFINED__ */


#ifndef __BarcodeBlockProperties_FWD_DEFINED__
#define __BarcodeBlockProperties_FWD_DEFINED__

#ifdef __cplusplus
typedef class BarcodeBlockProperties BarcodeBlockProperties;
#else
typedef struct BarcodeBlockProperties BarcodeBlockProperties;
#endif /* __cplusplus */

#endif 	/* __BarcodeBlockProperties_FWD_DEFINED__ */


#ifndef __ITextBlockProperties_FWD_DEFINED__
#define __ITextBlockProperties_FWD_DEFINED__
typedef interface ITextBlockProperties ITextBlockProperties;
#endif 	/* __ITextBlockProperties_FWD_DEFINED__ */


#ifndef __TextBlockProperties_FWD_DEFINED__
#define __TextBlockProperties_FWD_DEFINED__

#ifdef __cplusplus
typedef class TextBlockProperties TextBlockProperties;
#else
typedef struct TextBlockProperties TextBlockProperties;
#endif /* __cplusplus */

#endif 	/* __TextBlockProperties_FWD_DEFINED__ */


#ifndef __IPlainText_FWD_DEFINED__
#define __IPlainText_FWD_DEFINED__
typedef interface IPlainText IPlainText;
#endif 	/* __IPlainText_FWD_DEFINED__ */


#ifndef __PlainText_FWD_DEFINED__
#define __PlainText_FWD_DEFINED__

#ifdef __cplusplus
typedef class PlainText PlainText;
#else
typedef struct PlainText PlainText;
#endif /* __cplusplus */

#endif 	/* __PlainText_FWD_DEFINED__ */


#ifndef __ITextBlock_FWD_DEFINED__
#define __ITextBlock_FWD_DEFINED__
typedef interface ITextBlock ITextBlock;
#endif 	/* __ITextBlock_FWD_DEFINED__ */


#ifndef __ITableSeparator_FWD_DEFINED__
#define __ITableSeparator_FWD_DEFINED__
typedef interface ITableSeparator ITableSeparator;
#endif 	/* __ITableSeparator_FWD_DEFINED__ */


#ifndef __ITableSeparators_FWD_DEFINED__
#define __ITableSeparators_FWD_DEFINED__
typedef interface ITableSeparators ITableSeparators;
#endif 	/* __ITableSeparators_FWD_DEFINED__ */


#ifndef __ITableCell_FWD_DEFINED__
#define __ITableCell_FWD_DEFINED__
typedef interface ITableCell ITableCell;
#endif 	/* __ITableCell_FWD_DEFINED__ */


#ifndef __ITableCells_FWD_DEFINED__
#define __ITableCells_FWD_DEFINED__
typedef interface ITableCells ITableCells;
#endif 	/* __ITableCells_FWD_DEFINED__ */


#ifndef __ITableBlock_FWD_DEFINED__
#define __ITableBlock_FWD_DEFINED__
typedef interface ITableBlock ITableBlock;
#endif 	/* __ITableBlock_FWD_DEFINED__ */


#ifndef __IRasterPictureBlock_FWD_DEFINED__
#define __IRasterPictureBlock_FWD_DEFINED__
typedef interface IRasterPictureBlock IRasterPictureBlock;
#endif 	/* __IRasterPictureBlock_FWD_DEFINED__ */


#ifndef __IVectorPictureBlock_FWD_DEFINED__
#define __IVectorPictureBlock_FWD_DEFINED__
typedef interface IVectorPictureBlock IVectorPictureBlock;
#endif 	/* __IVectorPictureBlock_FWD_DEFINED__ */


#ifndef __ICheckmarkBlock_FWD_DEFINED__
#define __ICheckmarkBlock_FWD_DEFINED__
typedef interface ICheckmarkBlock ICheckmarkBlock;
#endif 	/* __ICheckmarkBlock_FWD_DEFINED__ */


#ifndef __ICheckmarkGroup_FWD_DEFINED__
#define __ICheckmarkGroup_FWD_DEFINED__
typedef interface ICheckmarkGroup ICheckmarkGroup;
#endif 	/* __ICheckmarkGroup_FWD_DEFINED__ */


#ifndef __ILayoutBlocks_FWD_DEFINED__
#define __ILayoutBlocks_FWD_DEFINED__
typedef interface ILayoutBlocks ILayoutBlocks;
#endif 	/* __ILayoutBlocks_FWD_DEFINED__ */


#ifndef __ISeparatorBlock_FWD_DEFINED__
#define __ISeparatorBlock_FWD_DEFINED__
typedef interface ISeparatorBlock ISeparatorBlock;
#endif 	/* __ISeparatorBlock_FWD_DEFINED__ */


#ifndef __ISeparatorGroup_FWD_DEFINED__
#define __ISeparatorGroup_FWD_DEFINED__
typedef interface ISeparatorGroup ISeparatorGroup;
#endif 	/* __ISeparatorGroup_FWD_DEFINED__ */


#ifndef __TextOrientation_FWD_DEFINED__
#define __TextOrientation_FWD_DEFINED__

#ifdef __cplusplus
typedef class TextOrientation TextOrientation;
#else
typedef struct TextOrientation TextOrientation;
#endif /* __cplusplus */

#endif 	/* __TextOrientation_FWD_DEFINED__ */


#ifndef __Block_FWD_DEFINED__
#define __Block_FWD_DEFINED__

#ifdef __cplusplus
typedef class Block Block;
#else
typedef struct Block Block;
#endif /* __cplusplus */

#endif 	/* __Block_FWD_DEFINED__ */


#ifndef __TextBlock_FWD_DEFINED__
#define __TextBlock_FWD_DEFINED__

#ifdef __cplusplus
typedef class TextBlock TextBlock;
#else
typedef struct TextBlock TextBlock;
#endif /* __cplusplus */

#endif 	/* __TextBlock_FWD_DEFINED__ */


#ifndef __TableSeparator_FWD_DEFINED__
#define __TableSeparator_FWD_DEFINED__

#ifdef __cplusplus
typedef class TableSeparator TableSeparator;
#else
typedef struct TableSeparator TableSeparator;
#endif /* __cplusplus */

#endif 	/* __TableSeparator_FWD_DEFINED__ */


#ifndef __TableSeparators_FWD_DEFINED__
#define __TableSeparators_FWD_DEFINED__

#ifdef __cplusplus
typedef class TableSeparators TableSeparators;
#else
typedef struct TableSeparators TableSeparators;
#endif /* __cplusplus */

#endif 	/* __TableSeparators_FWD_DEFINED__ */


#ifndef __TableCell_FWD_DEFINED__
#define __TableCell_FWD_DEFINED__

#ifdef __cplusplus
typedef class TableCell TableCell;
#else
typedef struct TableCell TableCell;
#endif /* __cplusplus */

#endif 	/* __TableCell_FWD_DEFINED__ */


#ifndef __TableCells_FWD_DEFINED__
#define __TableCells_FWD_DEFINED__

#ifdef __cplusplus
typedef class TableCells TableCells;
#else
typedef struct TableCells TableCells;
#endif /* __cplusplus */

#endif 	/* __TableCells_FWD_DEFINED__ */


#ifndef __TableBlock_FWD_DEFINED__
#define __TableBlock_FWD_DEFINED__

#ifdef __cplusplus
typedef class TableBlock TableBlock;
#else
typedef struct TableBlock TableBlock;
#endif /* __cplusplus */

#endif 	/* __TableBlock_FWD_DEFINED__ */


#ifndef __RasterPictureBlock_FWD_DEFINED__
#define __RasterPictureBlock_FWD_DEFINED__

#ifdef __cplusplus
typedef class RasterPictureBlock RasterPictureBlock;
#else
typedef struct RasterPictureBlock RasterPictureBlock;
#endif /* __cplusplus */

#endif 	/* __RasterPictureBlock_FWD_DEFINED__ */


#ifndef __VectorPictureBlock_FWD_DEFINED__
#define __VectorPictureBlock_FWD_DEFINED__

#ifdef __cplusplus
typedef class VectorPictureBlock VectorPictureBlock;
#else
typedef struct VectorPictureBlock VectorPictureBlock;
#endif /* __cplusplus */

#endif 	/* __VectorPictureBlock_FWD_DEFINED__ */


#ifndef __CheckmarkBlock_FWD_DEFINED__
#define __CheckmarkBlock_FWD_DEFINED__

#ifdef __cplusplus
typedef class CheckmarkBlock CheckmarkBlock;
#else
typedef struct CheckmarkBlock CheckmarkBlock;
#endif /* __cplusplus */

#endif 	/* __CheckmarkBlock_FWD_DEFINED__ */


#ifndef __CheckmarkGroup_FWD_DEFINED__
#define __CheckmarkGroup_FWD_DEFINED__

#ifdef __cplusplus
typedef class CheckmarkGroup CheckmarkGroup;
#else
typedef struct CheckmarkGroup CheckmarkGroup;
#endif /* __cplusplus */

#endif 	/* __CheckmarkGroup_FWD_DEFINED__ */


#ifndef __LayoutBlocks_FWD_DEFINED__
#define __LayoutBlocks_FWD_DEFINED__

#ifdef __cplusplus
typedef class LayoutBlocks LayoutBlocks;
#else
typedef struct LayoutBlocks LayoutBlocks;
#endif /* __cplusplus */

#endif 	/* __LayoutBlocks_FWD_DEFINED__ */


#ifndef __SeparatorBlock_FWD_DEFINED__
#define __SeparatorBlock_FWD_DEFINED__

#ifdef __cplusplus
typedef class SeparatorBlock SeparatorBlock;
#else
typedef struct SeparatorBlock SeparatorBlock;
#endif /* __cplusplus */

#endif 	/* __SeparatorBlock_FWD_DEFINED__ */


#ifndef __SeparatorGroup_FWD_DEFINED__
#define __SeparatorGroup_FWD_DEFINED__

#ifdef __cplusplus
typedef class SeparatorGroup SeparatorGroup;
#else
typedef struct SeparatorGroup SeparatorGroup;
#endif /* __cplusplus */

#endif 	/* __SeparatorGroup_FWD_DEFINED__ */


#ifndef __ILayout_FWD_DEFINED__
#define __ILayout_FWD_DEFINED__
typedef interface ILayout ILayout;
#endif 	/* __ILayout_FWD_DEFINED__ */


#ifndef __Layout_FWD_DEFINED__
#define __Layout_FWD_DEFINED__

#ifdef __cplusplus
typedef class Layout Layout;
#else
typedef struct Layout Layout;
#endif /* __cplusplus */

#endif 	/* __Layout_FWD_DEFINED__ */


#ifndef __StringsCollection_FWD_DEFINED__
#define __StringsCollection_FWD_DEFINED__

#ifdef __cplusplus
typedef class StringsCollection StringsCollection;
#else
typedef struct StringsCollection StringsCollection;
#endif /* __cplusplus */

#endif 	/* __StringsCollection_FWD_DEFINED__ */


#ifndef __FuzzyStringsCollection_FWD_DEFINED__
#define __FuzzyStringsCollection_FWD_DEFINED__

#ifdef __cplusplus
typedef class FuzzyStringsCollection FuzzyStringsCollection;
#else
typedef struct FuzzyStringsCollection FuzzyStringsCollection;
#endif /* __cplusplus */

#endif 	/* __FuzzyStringsCollection_FWD_DEFINED__ */


#ifndef __LongsCollection_FWD_DEFINED__
#define __LongsCollection_FWD_DEFINED__

#ifdef __cplusplus
typedef class LongsCollection LongsCollection;
#else
typedef struct LongsCollection LongsCollection;
#endif /* __cplusplus */

#endif 	/* __LongsCollection_FWD_DEFINED__ */


#ifndef __IImageDocumentsCollection_FWD_DEFINED__
#define __IImageDocumentsCollection_FWD_DEFINED__
typedef interface IImageDocumentsCollection IImageDocumentsCollection;
#endif 	/* __IImageDocumentsCollection_FWD_DEFINED__ */


#ifndef __ImageDocumentsCollection_FWD_DEFINED__
#define __ImageDocumentsCollection_FWD_DEFINED__

#ifdef __cplusplus
typedef class ImageDocumentsCollection ImageDocumentsCollection;
#else
typedef struct ImageDocumentsCollection ImageDocumentsCollection;
#endif /* __cplusplus */

#endif 	/* __ImageDocumentsCollection_FWD_DEFINED__ */


#ifndef __ILayoutsCollection_FWD_DEFINED__
#define __ILayoutsCollection_FWD_DEFINED__
typedef interface ILayoutsCollection ILayoutsCollection;
#endif 	/* __ILayoutsCollection_FWD_DEFINED__ */


#ifndef __IBlocksCollection_FWD_DEFINED__
#define __IBlocksCollection_FWD_DEFINED__
typedef interface IBlocksCollection IBlocksCollection;
#endif 	/* __ILayoutsCollection_FWD_DEFINED__ */


#ifndef __LayoutsCollection_FWD_DEFINED__
#define __LayoutsCollection_FWD_DEFINED__

#ifdef __cplusplus
typedef class LayoutsCollection LayoutsCollection;
#else
typedef struct LayoutsCollection LayoutsCollection;
#endif /* __cplusplus */

#endif 	/* __LayoutsCollection_FWD_DEFINED__ */


#ifndef __ITrainingImagesCollection_FWD_DEFINED__
#define __ITrainingImagesCollection_FWD_DEFINED__
typedef interface ITrainingImagesCollection ITrainingImagesCollection;
#endif 	/* __ITrainingImagesCollection_FWD_DEFINED__ */


#ifndef __TrainingImagesCollection_FWD_DEFINED__
#define __TrainingImagesCollection_FWD_DEFINED__

#ifdef __cplusplus
typedef class TrainingImagesCollection TrainingImagesCollection;
#else
typedef struct TrainingImagesCollection TrainingImagesCollection;
#endif /* __cplusplus */

#endif 	/* __TrainingImagesCollection_FWD_DEFINED__ */


#ifndef __IScanSourceSettings_FWD_DEFINED__
#define __IScanSourceSettings_FWD_DEFINED__
typedef interface IScanSourceSettings IScanSourceSettings;
#endif 	/* __IScanSourceSettings_FWD_DEFINED__ */


#ifndef __IScanManagerEvents_FWD_DEFINED__
#define __IScanManagerEvents_FWD_DEFINED__
typedef interface IScanManagerEvents IScanManagerEvents;
#endif 	/* __IScanManagerEvents_FWD_DEFINED__ */


#ifndef __DIScanManagerEvents_FWD_DEFINED__
#define __DIScanManagerEvents_FWD_DEFINED__
typedef interface DIScanManagerEvents DIScanManagerEvents;
#endif 	/* __DIScanManagerEvents_FWD_DEFINED__ */


#ifndef __IScanManager_FWD_DEFINED__
#define __IScanManager_FWD_DEFINED__
typedef interface IScanManager IScanManager;
#endif 	/* __IScanManager_FWD_DEFINED__ */


#ifndef __ScanManager_FWD_DEFINED__
#define __ScanManager_FWD_DEFINED__

#ifdef __cplusplus
typedef class ScanManager ScanManager;
#else
typedef struct ScanManager ScanManager;
#endif /* __cplusplus */

#endif 	/* __ScanManager_FWD_DEFINED__ */


#ifndef __ScanSourceSettings_FWD_DEFINED__
#define __ScanSourceSettings_FWD_DEFINED__

#ifdef __cplusplus
typedef class ScanSourceSettings ScanSourceSettings;
#else
typedef struct ScanSourceSettings ScanSourceSettings;
#endif /* __cplusplus */

#endif 	/* __ScanSourceSettings_FWD_DEFINED__ */


#ifndef __IDocumentInfo_FWD_DEFINED__
#define __IDocumentInfo_FWD_DEFINED__
typedef interface IDocumentInfo IDocumentInfo;
#endif 	/* __IDocumentInfo_FWD_DEFINED__ */


#ifndef __DIDocumentAnalyzerEvents_FWD_DEFINED__
#define __DIDocumentAnalyzerEvents_FWD_DEFINED__
typedef interface DIDocumentAnalyzerEvents DIDocumentAnalyzerEvents;
#endif 	/* __DIDocumentAnalyzerEvents_FWD_DEFINED__ */


#ifndef __IDocumentAnalyzerEvents_FWD_DEFINED__
#define __IDocumentAnalyzerEvents_FWD_DEFINED__
typedef interface IDocumentAnalyzerEvents IDocumentAnalyzerEvents;
#endif 	/* __IDocumentAnalyzerEvents_FWD_DEFINED__ */


#ifndef __IDocumentAnalyzer_FWD_DEFINED__
#define __IDocumentAnalyzer_FWD_DEFINED__
typedef interface IDocumentAnalyzer IDocumentAnalyzer;
#endif 	/* __IDocumentAnalyzer_FWD_DEFINED__ */


#ifndef __DocumentAnalyzer_FWD_DEFINED__
#define __DocumentAnalyzer_FWD_DEFINED__

#ifdef __cplusplus
typedef class DocumentAnalyzer DocumentAnalyzer;
#else
typedef struct DocumentAnalyzer DocumentAnalyzer;
#endif /* __cplusplus */

#endif 	/* __DocumentAnalyzer_FWD_DEFINED__ */


#ifndef __IDocumentInformationDictionaryItem_FWD_DEFINED__
#define __IDocumentInformationDictionaryItem_FWD_DEFINED__
typedef interface IDocumentInformationDictionaryItem IDocumentInformationDictionaryItem;
#endif 	/* __IDocumentInformationDictionaryItem_FWD_DEFINED__ */


#ifndef __DocumentInformationDictionaryItem_FWD_DEFINED__
#define __DocumentInformationDictionaryItem_FWD_DEFINED__

#ifdef __cplusplus
typedef class DocumentInformationDictionaryItem DocumentInformationDictionaryItem;
#else
typedef struct DocumentInformationDictionaryItem DocumentInformationDictionaryItem;
#endif /* __cplusplus */

#endif 	/* __DocumentInformationDictionaryItem_FWD_DEFINED__ */


#ifndef __IDocumentInformationDictionary_FWD_DEFINED__
#define __IDocumentInformationDictionary_FWD_DEFINED__
typedef interface IDocumentInformationDictionary IDocumentInformationDictionary;
#endif 	/* __IDocumentInformationDictionary_FWD_DEFINED__ */


#ifndef __DocumentInformationDictionary_FWD_DEFINED__
#define __DocumentInformationDictionary_FWD_DEFINED__

#ifdef __cplusplus
typedef class DocumentInformationDictionary DocumentInformationDictionary;
#else
typedef struct DocumentInformationDictionary DocumentInformationDictionary;
#endif /* __cplusplus */

#endif 	/* __DocumentInformationDictionary_FWD_DEFINED__ */


#ifndef __IDocumentContentInfo_FWD_DEFINED__
#define __IDocumentContentInfo_FWD_DEFINED__
typedef interface IDocumentContentInfo IDocumentContentInfo;
#endif 	/* __IDocumentContentInfo_FWD_DEFINED__ */


#ifndef __DocumentContentInfo_FWD_DEFINED__
#define __DocumentContentInfo_FWD_DEFINED__

#ifdef __cplusplus
typedef class DocumentContentInfo DocumentContentInfo;
#else
typedef struct DocumentContentInfo DocumentContentInfo;
#endif /* __cplusplus */

#endif 	/* __DocumentContentInfo_FWD_DEFINED__ */


#ifndef __IPageStructure_FWD_DEFINED__
#define __IPageStructure_FWD_DEFINED__
typedef interface IPageStructure IPageStructure;
#endif 	/* __IPageStructure_FWD_DEFINED__ */


#ifndef __IRunningTitle_FWD_DEFINED__
#define __IRunningTitle_FWD_DEFINED__
typedef interface IRunningTitle IRunningTitle;
#endif 	/* __IRunningTitle_FWD_DEFINED__ */


#ifndef __IRunningTitleSeries_FWD_DEFINED__
#define __IRunningTitleSeries_FWD_DEFINED__
typedef interface IRunningTitleSeries IRunningTitleSeries;
#endif 	/* __IRunningTitleSeries_FWD_DEFINED__ */


#ifndef __IPageStream_FWD_DEFINED__
#define __IPageStream_FWD_DEFINED__
typedef interface IPageStream IPageStream;
#endif 	/* __IPageStream_FWD_DEFINED__ */


#ifndef __IPageSection_FWD_DEFINED__
#define __IPageSection_FWD_DEFINED__
typedef interface IPageSection IPageSection;
#endif 	/* __IPageSection_FWD_DEFINED__ */


#ifndef __IIncut_FWD_DEFINED__
#define __IIncut_FWD_DEFINED__
typedef interface IIncut IIncut;
#endif 	/* __IIncut_FWD_DEFINED__ */


#ifndef __IFootnote_FWD_DEFINED__
#define __IFootnote_FWD_DEFINED__
typedef interface IFootnote IFootnote;
#endif 	/* __IFootnote_FWD_DEFINED__ */


#ifndef __IMainText_FWD_DEFINED__
#define __IMainText_FWD_DEFINED__
typedef interface IMainText IMainText;
#endif 	/* __IMainText_FWD_DEFINED__ */


#ifndef __IArtefact_FWD_DEFINED__
#define __IArtefact_FWD_DEFINED__
typedef interface IArtefact IArtefact;
#endif 	/* __IArtefact_FWD_DEFINED__ */


#ifndef __IRunningTitleSeriesArray_FWD_DEFINED__
#define __IRunningTitleSeriesArray_FWD_DEFINED__
typedef interface IRunningTitleSeriesArray IRunningTitleSeriesArray;
#endif 	/* __IRunningTitleSeriesArray_FWD_DEFINED__ */


#ifndef __IPageElements_FWD_DEFINED__
#define __IPageElements_FWD_DEFINED__
typedef interface IPageElements IPageElements;
#endif 	/* __IPageElements_FWD_DEFINED__ */


#ifndef __IPageSections_FWD_DEFINED__
#define __IPageSections_FWD_DEFINED__
typedef interface IPageSections IPageSections;
#endif 	/* __IPageSections_FWD_DEFINED__ */


#ifndef __IFootnoteSeries_FWD_DEFINED__
#define __IFootnoteSeries_FWD_DEFINED__
typedef interface IFootnoteSeries IFootnoteSeries;
#endif 	/* __IFootnoteSeries_FWD_DEFINED__ */


#ifndef __IBackgroundLayer_FWD_DEFINED__
#define __IBackgroundLayer_FWD_DEFINED__
typedef interface IBackgroundLayer IBackgroundLayer;
#endif 	/* __IBackgroundLayer_FWD_DEFINED__ */


#ifndef __IPageBlackSeparator_FWD_DEFINED__
#define __IPageBlackSeparator_FWD_DEFINED__
typedef interface IPageBlackSeparator IPageBlackSeparator;
#endif 	/* __IPageBlackSeparator_FWD_DEFINED__ */


#ifndef __PageElement_FWD_DEFINED__
#define __PageElement_FWD_DEFINED__

#ifdef __cplusplus
typedef class PageElement PageElement;
#else
typedef struct PageElement PageElement;
#endif /* __cplusplus */

#endif 	/* __PageElement_FWD_DEFINED__ */


#ifndef __PageStructure_FWD_DEFINED__
#define __PageStructure_FWD_DEFINED__

#ifdef __cplusplus
typedef class PageStructure PageStructure;
#else
typedef struct PageStructure PageStructure;
#endif /* __cplusplus */

#endif 	/* __PageStructure_FWD_DEFINED__ */


#ifndef __RunningTitle_FWD_DEFINED__
#define __RunningTitle_FWD_DEFINED__

#ifdef __cplusplus
typedef class RunningTitle RunningTitle;
#else
typedef struct RunningTitle RunningTitle;
#endif /* __cplusplus */

#endif 	/* __RunningTitle_FWD_DEFINED__ */


#ifndef __PageStream_FWD_DEFINED__
#define __PageStream_FWD_DEFINED__

#ifdef __cplusplus
typedef class PageStream PageStream;
#else
typedef struct PageStream PageStream;
#endif /* __cplusplus */

#endif 	/* __PageStream_FWD_DEFINED__ */


#ifndef __IPageStreams_FWD_DEFINED__
#define __IPageStreams_FWD_DEFINED__
typedef interface IPageStreams IPageStreams;
#endif 	/* __IPageStreams_FWD_DEFINED__ */


#ifndef __PageSection_FWD_DEFINED__
#define __PageSection_FWD_DEFINED__

#ifdef __cplusplus
typedef class PageSection PageSection;
#else
typedef struct PageSection PageSection;
#endif /* __cplusplus */

#endif 	/* __PageSection_FWD_DEFINED__ */


#ifndef __PageSections_FWD_DEFINED__
#define __PageSections_FWD_DEFINED__

#ifdef __cplusplus
typedef class PageSections PageSections;
#else
typedef struct PageSections PageSections;
#endif /* __cplusplus */

#endif 	/* __PageSections_FWD_DEFINED__ */


#ifndef __RunningTitleSeries_FWD_DEFINED__
#define __RunningTitleSeries_FWD_DEFINED__

#ifdef __cplusplus
typedef class RunningTitleSeries RunningTitleSeries;
#else
typedef struct RunningTitleSeries RunningTitleSeries;
#endif /* __cplusplus */

#endif 	/* __RunningTitleSeries_FWD_DEFINED__ */


#ifndef __Incut_FWD_DEFINED__
#define __Incut_FWD_DEFINED__

#ifdef __cplusplus
typedef class Incut Incut;
#else
typedef struct Incut Incut;
#endif /* __cplusplus */

#endif 	/* __Incut_FWD_DEFINED__ */


#ifndef __Footnote_FWD_DEFINED__
#define __Footnote_FWD_DEFINED__

#ifdef __cplusplus
typedef class Footnote Footnote;
#else
typedef struct Footnote Footnote;
#endif /* __cplusplus */

#endif 	/* __Footnote_FWD_DEFINED__ */


#ifndef __MainText_FWD_DEFINED__
#define __MainText_FWD_DEFINED__

#ifdef __cplusplus
typedef class MainText MainText;
#else
typedef struct MainText MainText;
#endif /* __cplusplus */

#endif 	/* __MainText_FWD_DEFINED__ */


#ifndef __Artefact_FWD_DEFINED__
#define __Artefact_FWD_DEFINED__

#ifdef __cplusplus
typedef class Artefact Artefact;
#else
typedef struct Artefact Artefact;
#endif /* __cplusplus */

#endif 	/* __Artefact_FWD_DEFINED__ */


#ifndef __RunningTitleSeriesArray_FWD_DEFINED__
#define __RunningTitleSeriesArray_FWD_DEFINED__

#ifdef __cplusplus
typedef class RunningTitleSeriesArray RunningTitleSeriesArray;
#else
typedef struct RunningTitleSeriesArray RunningTitleSeriesArray;
#endif /* __cplusplus */

#endif 	/* __RunningTitleSeriesArray_FWD_DEFINED__ */


#ifndef __RunningTitleSeriesText_FWD_DEFINED__
#define __RunningTitleSeriesText_FWD_DEFINED__

#ifdef __cplusplus
typedef class RunningTitleSeriesText RunningTitleSeriesText;
#else
typedef struct RunningTitleSeriesText RunningTitleSeriesText;
#endif /* __cplusplus */

#endif 	/* __RunningTitleSeriesText_FWD_DEFINED__ */


#ifndef __BackgroundLayer_FWD_DEFINED__
#define __BackgroundLayer_FWD_DEFINED__

#ifdef __cplusplus
typedef class BackgroundLayer BackgroundLayer;
#else
typedef struct BackgroundLayer BackgroundLayer;
#endif /* __cplusplus */

#endif 	/* __BackgroundLayer_FWD_DEFINED__ */


#ifndef __BlackSeparator_FWD_DEFINED__
#define __BlackSeparator_FWD_DEFINED__

#ifdef __cplusplus
typedef class BlackSeparator BlackSeparator;
#else
typedef struct BlackSeparator BlackSeparator;
#endif /* __cplusplus */

#endif 	/* __BlackSeparator_FWD_DEFINED__ */


#ifndef __IGlobalStyleStorage_FWD_DEFINED__
#define __IGlobalStyleStorage_FWD_DEFINED__
typedef interface IGlobalStyleStorage IGlobalStyleStorage;
#endif 	/* __IGlobalStyleStorage_FWD_DEFINED__ */


#ifndef __IFootnoteSeriesArray_FWD_DEFINED__
#define __IFootnoteSeriesArray_FWD_DEFINED__
typedef interface IFootnoteSeriesArray IFootnoteSeriesArray;
#endif 	/* __IFootnoteSeriesArray_FWD_DEFINED__ */


#ifndef __IDocumentSection_FWD_DEFINED__
#define __IDocumentSection_FWD_DEFINED__
typedef interface IDocumentSection IDocumentSection;
#endif 	/* __IDocumentSection_FWD_DEFINED__ */


#ifndef __IDocumentStream_FWD_DEFINED__
#define __IDocumentStream_FWD_DEFINED__
typedef interface IDocumentStream IDocumentStream;
#endif 	/* __IDocumentStream_FWD_DEFINED__ */


#ifndef __IDocumentElement_FWD_DEFINED__
#define __IDocumentElement_FWD_DEFINED__
typedef interface IDocumentElement IDocumentElement;
#endif 	/* __IDocumentElement_FWD_DEFINED__ */


#ifndef __IListLevel_FWD_DEFINED__
#define __IListLevel_FWD_DEFINED__
typedef interface IListLevel IListLevel;
#endif 	/* __IListLevel_FWD_DEFINED__ */


#ifndef __IList_FWD_DEFINED__
#define __IList_FWD_DEFINED__
typedef interface IList IList;
#endif 	/* __IList_FWD_DEFINED__ */


#ifndef __IDocumentStructure_FWD_DEFINED__
#define __IDocumentStructure_FWD_DEFINED__
typedef interface IDocumentStructure IDocumentStructure;
#endif 	/* __IDocumentStructure_FWD_DEFINED__ */


#ifndef __DocumentStructure_FWD_DEFINED__
#define __DocumentStructure_FWD_DEFINED__

#ifdef __cplusplus
typedef class DocumentStructure DocumentStructure;
#else
typedef struct DocumentStructure DocumentStructure;
#endif /* __cplusplus */

#endif 	/* __DocumentStructure_FWD_DEFINED__ */


#ifndef __FootnoteSeriesArray_FWD_DEFINED__
#define __FootnoteSeriesArray_FWD_DEFINED__

#ifdef __cplusplus
typedef class FootnoteSeriesArray FootnoteSeriesArray;
#else
typedef struct FootnoteSeriesArray FootnoteSeriesArray;
#endif /* __cplusplus */

#endif 	/* __FootnoteSeriesArray_FWD_DEFINED__ */


#ifndef __FootnoteSeries_FWD_DEFINED__
#define __FootnoteSeries_FWD_DEFINED__

#ifdef __cplusplus
typedef class FootnoteSeries FootnoteSeries;
#else
typedef struct FootnoteSeries FootnoteSeries;
#endif /* __cplusplus */

#endif 	/* __FootnoteSeries_FWD_DEFINED__ */


#ifndef __GlobalStyleStorage_FWD_DEFINED__
#define __GlobalStyleStorage_FWD_DEFINED__

#ifdef __cplusplus
typedef class GlobalStyleStorage GlobalStyleStorage;
#else
typedef struct GlobalStyleStorage GlobalStyleStorage;
#endif /* __cplusplus */

#endif 	/* __GlobalStyleStorage_FWD_DEFINED__ */


#ifndef __DocumentSection_FWD_DEFINED__
#define __DocumentSection_FWD_DEFINED__

#ifdef __cplusplus
typedef class DocumentSection DocumentSection;
#else
typedef struct DocumentSection DocumentSection;
#endif /* __cplusplus */

#endif 	/* __DocumentSection_FWD_DEFINED__ */


#ifndef __DocumentStream_FWD_DEFINED__
#define __DocumentStream_FWD_DEFINED__

#ifdef __cplusplus
typedef class DocumentStream DocumentStream;
#else
typedef struct DocumentStream DocumentStream;
#endif /* __cplusplus */

#endif 	/* __DocumentStream_FWD_DEFINED__ */


#ifndef __DocumentElement_FWD_DEFINED__
#define __DocumentElement_FWD_DEFINED__

#ifdef __cplusplus
typedef class DocumentElement DocumentElement;
#else
typedef struct DocumentElement DocumentElement;
#endif /* __cplusplus */

#endif 	/* __DocumentElement_FWD_DEFINED__ */


#ifndef __StreamElementLocationParams_FWD_DEFINED__
#define __StreamElementLocationParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class StreamElementLocationParams StreamElementLocationParams;
#else
typedef struct StreamElementLocationParams StreamElementLocationParams;
#endif /* __cplusplus */

#endif 	/* __StreamElementLocationParams_FWD_DEFINED__ */


#ifndef __ParagraphStyle_FWD_DEFINED__
#define __ParagraphStyle_FWD_DEFINED__

#ifdef __cplusplus
typedef class ParagraphStyle ParagraphStyle;
#else
typedef struct ParagraphStyle ParagraphStyle;
#endif /* __cplusplus */

#endif 	/* __ParagraphStyle_FWD_DEFINED__ */


#ifndef __FontStyle_FWD_DEFINED__
#define __FontStyle_FWD_DEFINED__

#ifdef __cplusplus
typedef class FontStyle FontStyle;
#else
typedef struct FontStyle FontStyle;
#endif /* __cplusplus */

#endif 	/* __FontStyle_FWD_DEFINED__ */


#ifndef __List_FWD_DEFINED__
#define __List_FWD_DEFINED__

#ifdef __cplusplus
typedef class List List;
#else
typedef struct List List;
#endif /* __cplusplus */

#endif 	/* __List_FWD_DEFINED__ */


#ifndef __ListLevel_FWD_DEFINED__
#define __ListLevel_FWD_DEFINED__

#ifdef __cplusplus
typedef class ListLevel ListLevel;
#else
typedef struct ListLevel ListLevel;
#endif /* __cplusplus */

#endif 	/* __ListLevel_FWD_DEFINED__ */


#ifndef __ListParams_FWD_DEFINED__
#define __ListParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class ListParams ListParams;
#else
typedef struct ListParams ListParams;
#endif /* __cplusplus */

#endif 	/* __ListParams_FWD_DEFINED__ */


#ifndef __IFRPages_FWD_DEFINED__
#define __IFRPages_FWD_DEFINED__
typedef interface IFRPages IFRPages;
#endif 	/* __IFRPages_FWD_DEFINED__ */


#ifndef __IFRPagesEvents_FWD_DEFINED__
#define __IFRPagesEvents_FWD_DEFINED__
typedef interface IFRPagesEvents IFRPagesEvents;
#endif 	/* __IFRPagesEvents_FWD_DEFINED__ */


#ifndef __DIFRPagesEvents_FWD_DEFINED__
#define __DIFRPagesEvents_FWD_DEFINED__
typedef interface DIFRPagesEvents DIFRPagesEvents;
#endif 	/* __DIFRPagesEvents_FWD_DEFINED__ */


#ifndef __FRPages_FWD_DEFINED__
#define __FRPages_FWD_DEFINED__

#ifdef __cplusplus
typedef class FRPages FRPages;
#else
typedef struct FRPages FRPages;
#endif /* __cplusplus */

#endif 	/* __FRPages_FWD_DEFINED__ */


#ifndef __IFRDocument_FWD_DEFINED__
#define __IFRDocument_FWD_DEFINED__
typedef interface IFRDocument IFRDocument;
#endif 	/* __IFRDocument_FWD_DEFINED__ */


#ifndef __IFRPageEvents_FWD_DEFINED__
#define __IFRPageEvents_FWD_DEFINED__
typedef interface IFRPageEvents IFRPageEvents;
#endif 	/* __IFRPageEvents_FWD_DEFINED__ */


#ifndef __DIFRPageEvents_FWD_DEFINED__
#define __DIFRPageEvents_FWD_DEFINED__
typedef interface DIFRPageEvents DIFRPageEvents;
#endif 	/* __DIFRPageEvents_FWD_DEFINED__ */


#ifndef __FRPage_FWD_DEFINED__
#define __FRPage_FWD_DEFINED__

#ifdef __cplusplus
typedef class FRPage FRPage;
#else
typedef struct FRPage FRPage;
#endif /* __cplusplus */

#endif 	/* __FRPage_FWD_DEFINED__ */


#ifndef __IImagePasswordCallback_FWD_DEFINED__
#define __IImagePasswordCallback_FWD_DEFINED__
typedef interface IImagePasswordCallback IImagePasswordCallback;
#endif 	/* __IImagePasswordCallback_FWD_DEFINED__ */


#ifndef __IFRDocumentEvents_FWD_DEFINED__
#define __IFRDocumentEvents_FWD_DEFINED__
typedef interface IFRDocumentEvents IFRDocumentEvents;
#endif 	/* __IFRDocumentEvents_FWD_DEFINED__ */


#ifndef __DIFRDocumentEvents_FWD_DEFINED__
#define __DIFRDocumentEvents_FWD_DEFINED__
typedef interface DIFRDocumentEvents DIFRDocumentEvents;
#endif 	/* __DIFRDocumentEvents_FWD_DEFINED__ */


#ifndef __FRDocument_FWD_DEFINED__
#define __FRDocument_FWD_DEFINED__

#ifdef __cplusplus
typedef class FRDocument FRDocument;
#else
typedef struct FRDocument FRDocument;
#endif /* __cplusplus */

#endif 	/* __FRDocument_FWD_DEFINED__ */


#ifndef __FRRectangle_FWD_DEFINED__
#define __FRRectangle_FWD_DEFINED__

#ifdef __cplusplus
typedef class FRRectangle FRRectangle;
#else
typedef struct FRRectangle FRRectangle;
#endif /* __cplusplus */

#endif 	/* __FRRectangle_FWD_DEFINED__ */


#ifndef __IFileAdapter_FWD_DEFINED__
#define __IFileAdapter_FWD_DEFINED__
typedef interface IFileAdapter IFileAdapter;
#endif 	/* __IFileAdapter_FWD_DEFINED__ */


#ifndef __IImageSource_FWD_DEFINED__
#define __IImageSource_FWD_DEFINED__
typedef interface IImageSource IImageSource;
#endif 	/* __IImageSource_FWD_DEFINED__ */


#ifndef __IBatchProcessor_FWD_DEFINED__
#define __IBatchProcessor_FWD_DEFINED__
typedef interface IBatchProcessor IBatchProcessor;
#endif 	/* __IBatchProcessor_FWD_DEFINED__ */


#ifndef __BatchProcessor_FWD_DEFINED__
#define __BatchProcessor_FWD_DEFINED__

#ifdef __cplusplus
typedef class BatchProcessor BatchProcessor;
#else
typedef struct BatchProcessor BatchProcessor;
#endif /* __cplusplus */

#endif 	/* __BatchProcessor_FWD_DEFINED__ */


#ifndef __IRecognizedPages_FWD_DEFINED__
#define __IRecognizedPages_FWD_DEFINED__
typedef interface IRecognizedPages IRecognizedPages;
#endif 	/* __IRecognizedPages_FWD_DEFINED__ */


#ifndef __DIExporterEvents_FWD_DEFINED__
#define __DIExporterEvents_FWD_DEFINED__
typedef interface DIExporterEvents DIExporterEvents;
#endif 	/* __DIExporterEvents_FWD_DEFINED__ */


#ifndef __IExporterEvents_FWD_DEFINED__
#define __IExporterEvents_FWD_DEFINED__
typedef interface IExporterEvents IExporterEvents;
#endif 	/* __IExporterEvents_FWD_DEFINED__ */


#ifndef __IExporter_FWD_DEFINED__
#define __IExporter_FWD_DEFINED__
typedef interface IExporter IExporter;
#endif 	/* __IExporter_FWD_DEFINED__ */


#ifndef __Exporter_FWD_DEFINED__
#define __Exporter_FWD_DEFINED__

#ifdef __cplusplus
typedef class Exporter Exporter;
#else
typedef struct Exporter Exporter;
#endif /* __cplusplus */

#endif 	/* __Exporter_FWD_DEFINED__ */


#ifndef __ILicense_FWD_DEFINED__
#define __ILicense_FWD_DEFINED__
typedef interface ILicense ILicense;
#endif 	/* __ILicense_FWD_DEFINED__ */


#ifndef __ILicenseCollection_FWD_DEFINED__
#define __ILicenseCollection_FWD_DEFINED__
typedef interface ILicenseCollection ILicenseCollection;
#endif 	/* __ILicenseCollection_FWD_DEFINED__ */


#ifndef __IMultiProcessingParams_FWD_DEFINED__
#define __IMultiProcessingParams_FWD_DEFINED__
typedef interface IMultiProcessingParams IMultiProcessingParams;
#endif 	/* __IMultiProcessingParams_FWD_DEFINED__ */


#ifndef __DocumentInfo_FWD_DEFINED__
#define __DocumentInfo_FWD_DEFINED__

#ifdef __cplusplus
typedef class DocumentInfo DocumentInfo;
#else
typedef struct DocumentInfo DocumentInfo;
#endif /* __cplusplus */

#endif 	/* __DocumentInfo_FWD_DEFINED__ */


#ifndef __Engine_FWD_DEFINED__
#define __Engine_FWD_DEFINED__

#ifdef __cplusplus
typedef class Engine Engine;
#else
typedef struct Engine Engine;
#endif /* __cplusplus */

#endif 	/* __Engine_FWD_DEFINED__ */


#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_FREngine_0000_0000 */
/* [local] */ 

#ifndef MIDL_INTERFACE
#define MIDL_INTERFACE( id ) interface
#endif


extern RPC_IF_HANDLE __MIDL_itf_FREngine_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_FREngine_0000_0000_v0_0_s_ifspec;


#ifndef __FREngine_LIBRARY_DEFINED__
#define __FREngine_LIBRARY_DEFINED__

/* library FREngine */
/* [helpstring][helpcontext][helpfile][version][uuid] */ 

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum MessagesLanguageEnum
    {	ML_English	= 0,
	ML_Russian	= 1,
	ML_German	= 2,
	ML_French	= 3,
	ML_Ukrainian	= 4,
	ML_Spanish	= 5,
	ML_Italian	= 6,
	ML_DutchStandard	= 7,
	ML_Danish	= 8,
	ML_Swedish	= 9,
	ML_Slovak	= 14,
	ML_Polish	= 15,
	ML_Czech	= 16,
	ML_Hungarian	= 17,
	ML_Lithuanian	= 18,
	ML_Estonian	= 20,
	ML_Bulgarian	= 23,
	ML_Turkish	= 24,
	ML_PortugueseBrazilian	= 27,
	ML_Korean	= 63,
	ML_ChinesePRC	= 64,
	ML_ChineseTaiwan	= 65
    } 	MessagesLanguageEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum LanguageIdEnum
    {	LI_Null	= 0,
	LI_EnglishUnitedStates	= 1033,
	LI_EnglishUnitedKingdom	= 2057,
	LI_EnglishAustralian	= 3081,
	LI_EnglishCanadian	= 4105,
	LI_EnglishNewZealand	= 5129,
	LI_EnglishIreland	= 6153,
	LI_EnglishSouthAfrica	= 7177,
	LI_EnglishJamaica	= 8201,
	LI_EnglishCaribbean	= 9225,
	LI_EnglishBelize	= 10249,
	LI_EnglishTrinidad	= 11273,
	LI_Bulgarian	= 1026,
	LI_Czech	= 1029,
	LI_Danish	= 1030,
	LI_GermanStandard	= 1031,
	LI_GermanSwiss	= 2055,
	LI_GermanAustrian	= 3079,
	LI_GermanLuxembourg	= 4103,
	LI_GermanLiechtenstein	= 5127,
	LI_Greek	= 1032,
	LI_SpanishTraditionalSort	= 1034,
	LI_SpanishMexican	= 2058,
	LI_SpanishModernSort	= 3082,
	LI_SpanishGuatemala	= 4106,
	LI_SpanishCostaRica	= 5130,
	LI_SpanishPanama	= 6154,
	LI_SpanishDominicanRepublic	= 7178,
	LI_SpanishVenezuela	= 8202,
	LI_SpanishColombia	= 9226,
	LI_SpanishPeru	= 10250,
	LI_SpanishArgentina	= 11274,
	LI_SpanishEcuador	= 12298,
	LI_SpanishChile	= 13322,
	LI_SpanishUruguay	= 14346,
	LI_SpanishParaguay	= 15370,
	LI_SpanishBolivia	= 16394,
	LI_SpanishElSalvador	= 17418,
	LI_SpanishHonduras	= 18442,
	LI_SpanishNicaragua	= 19466,
	LI_SpanishPuertoRico	= 20490,
	LI_Finnish	= 1035,
	LI_FrenchStandard	= 1036,
	LI_FrenchBelgian	= 2060,
	LI_FrenchCanadian	= 3084,
	LI_FrenchSwiss	= 4108,
	LI_FrenchLuxembourg	= 5132,
	LI_Hungarian	= 1038,
	LI_Icelandic	= 1039,
	LI_ItalianStandard	= 1040,
	LI_ItalianSwiss	= 2064,
	LI_DutchStandard	= 1043,
	LI_DutchBelgian	= 2067,
	LI_NorwegianBokmal	= 1044,
	LI_NorwegianNynorsk	= 2068,
	LI_Polish	= 1045,
	LI_PortugueseBrazilian	= 1046,
	LI_PortugueseStandard	= 2070,
	LI_Romanian	= 1048,
	LI_Russian	= 1049,
	LI_Croatian	= 1050,
	LI_SerbianLatin	= 2074,
	LI_SerbianCyrillic	= 3098,
	LI_Slovak	= 1051,
	LI_Swedish	= 1053,
	LI_SwedishFinland	= 2077,
	LI_Turkish	= 1055,
	LI_Slovenian	= 1060,
	LI_Afrikaans	= 1078,
	LI_Albanian	= 1052,
	LI_Basque	= 1069,
	LI_Belarusian	= 1059,
	LI_Catalan	= 1027,
	LI_Estonian	= 1061,
	LI_Faeroese	= 1080,
	LI_Indonesian	= 1057,
	LI_Latvian	= 1062,
	LI_Lithuanian	= 1063,
	LI_Ukrainian	= 1058,
	LI_Japanese	= 1041,
	LI_Korean	= 1042,
	LI_KoreanJohab	= 2066,
	LI_ChinesePRC	= 2052,
	LI_ChineseSingapore	= 4100,
	LI_Thai	= 1054,
	LI_ChineseTaiwan	= 1028,
	LI_ChineseHongKong	= 3076,
	LI_Vietnamese	= 1066,
	LI_Hebrew	= 1037,
	LI_Macedonian	= 1071,
	LI_Swahili	= 1089,
	LI_Tatar	= 1092,
	LI_Irish	= 1552,
	LI_Tagalog	= 1553,
	LI_User	= 1554,
	LI_MalayMalaysian	= 1086,
	LI_MalayBruneiDarussalam	= 2110,
	LI_Maori	= 1064,
	LI_RomanianMoldavia	= 2072,
	LI_RhaetoRomanic	= 1047,
	LI_Breton	= 1536,
	LI_Esperanto	= 1537,
	LI_Fijian	= 1538,
	LI_Hawaiian	= 1539,
	LI_Latin	= 1540,
	LI_Provencal	= 1541,
	LI_Samoan	= 1542,
	LI_Welsh	= 1543,
	LI_Chechen	= 1544,
	LI_CrimeanTatar	= 1546,
	LI_Mongol	= 1104,
	LI_Ossetic	= 1547,
	LI_Kabardian	= 1548,
	LI_Yiddish	= 1077,
	LI_ArmenianEastern	= 1067,
	LI_ArmenianWestern	= 32811,
	LI_ArmenianGrabar	= 33835,
	LI_GermanNewSpelling	= 32775,
	LI_RussianOldSpelling	= 32793,
	LI_AzeriCyrillic	= 2092,
	LI_AzeriLatin	= 1068,
	LI_ChineseMacau	= 5124,
	LI_EnglishPhilippines	= 13321,
	LI_EnglishZimbabwe	= 12297,
	LI_FrenchMonaco	= 6156,
	LI_GaelicScottish	= 1084,
	LI_Kazakh	= 1087,
	LI_Lappish	= 1083,
	LI_LithuanianClassic	= 2087,
	LI_Maltese	= 1082,
	LI_RussianMoldavia	= 2073,
	LI_Sorbian	= 1070,
	LI_Tswana	= 1074,
	LI_UzbekCyrillic	= 2115,
	LI_UzbekLatin	= 1091,
	LI_Xhosa	= 1076,
	LI_Zulu	= 1077,
	LI_Abkhaz	= 1556,
	LI_Adyghe	= 1557,
	LI_Awar	= 1558,
	LI_Agul	= 1559,
	LI_Altaic	= 1545,
	LI_Aymara	= 1560,
	LI_Bashkir	= 1561,
	LI_Bemba	= 1562,
	LI_Blackfoot	= 1563,
	LI_Bugotu	= 1564,
	LI_Buryat	= 1565,
	LI_Chamorro	= 1566,
	LI_Chukcha	= 1567,
	LI_Chuvash	= 1568,
	LI_Corsican	= 1569,
	LI_Crow	= 1570,
	LI_Dargwa	= 1571,
	LI_Dungan	= 1572,
	LI_EskimoCyrillic	= 1573,
	LI_Even	= 1574,
	LI_Evenki	= 1575,
	LI_Frisian	= 1576,
	LI_Friulian	= 1577,
	LI_Gagauz	= 1578,
	LI_Galician	= 1579,
	LI_Ganda	= 1580,
	LI_EskimoLatin	= 1581,
	LI_Guarani	= 1582,
	LI_Hani	= 1583,
	LI_Ido	= 1584,
	LI_Ingush	= 1585,
	LI_Interlingua	= 1586,
	LI_Kalmyk	= 1587,
	LI_Karakalpak	= 1588,
	LI_KarachayBalkar	= 1589,
	LI_Kasub	= 1590,
	LI_Kawa	= 1591,
	LI_Khakas	= 1592,
	LI_Khanty	= 1593,
	LI_Kikuyu	= 1594,
	LI_Kirgiz	= 1595,
	LI_Kongo	= 1598,
	LI_Koryak	= 1599,
	LI_Kpelle	= 1600,
	LI_Kumyk	= 1601,
	LI_Kurdish	= 1602,
	LI_Lak	= 1604,
	LI_Lezgin	= 1605,
	LI_Luba	= 1606,
	LI_Malagasy	= 1607,
	LI_Malinke	= 1608,
	LI_Mansi	= 1609,
	LI_Mari	= 1610,
	LI_Maya	= 1611,
	LI_Miao	= 1612,
	LI_Minankabaw	= 1613,
	LI_Mohawk	= 1614,
	LI_Mordvin	= 1615,
	LI_Nahuatl	= 1616,
	LI_Nenets	= 1618,
	LI_Nivkh	= 1619,
	LI_Nogay	= 1620,
	LI_Nyanja	= 1621,
	LI_Occidental	= 1622,
	LI_Ojibway	= 1623,
	LI_Papiamento	= 1624,
	LI_PidginEnglish	= 1625,
	LI_Quechua	= 1626,
	LI_Romany	= 1627,
	LI_Ruanda	= 1628,
	LI_Rundi	= 1629,
	LI_Selkup	= 1630,
	LI_Shona	= 1631,
	LI_Sioux	= 1632,
	LI_Somali	= 1633,
	LI_Sotho	= 1634,
	LI_Sunda	= 1635,
	LI_Swazi	= 1636,
	LI_Tabassaran	= 1637,
	LI_Tajik	= 1638,
	LI_Tahitian	= 1639,
	LI_Tinpo	= 1640,
	LI_Tongan	= 1641,
	LI_Tun	= 1642,
	LI_Turkmen	= 1643,
	LI_Tuvin	= 1644,
	LI_Udmurt	= 1645,
	LI_UighurCyrillic	= 1646,
	LI_Visayan	= 1648,
	LI_Wolof	= 1649,
	LI_Yakut	= 1650,
	LI_Zapotec	= 1651,
	LI_Hausa	= 1652,
	LI_OldEnglish	= 32777,
	LI_OldGerman	= 33799,
	LI_OldFrench	= 32780,
	LI_OldItalian	= 32784,
	LI_OldSpanish	= 32778,
	LI_EnglishLaw	= 35849,
	LI_GermanLaw	= 34823,
	LI_GermanNewSpellingLaw	= 35847,
	LI_EnglishMedical	= 33801,
	LI_GermanMedical	= 36871,
	LI_GermanNewSpellingMedical	= 37895,
	LI_UighurLatin	= 1647,
	LI_LatvianGothic	= 1655
    } 	LanguageIdEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum CodePageEnum
    {	CP_Null	= 0,
	CP_Latin	= 1252,
	CP_Cyrillic	= 1251,
	CP_EasternEuropean	= 1250,
	CP_Baltic	= 1257,
	CP_Turkish	= 1254,
	CP_US_MSDOS	= 437,
	CP_LatinI_MSDOS	= 850,
	CP_Russian_MSDOS	= 866,
	CP_Baltic_MSDOS	= 775,
	CP_Turkish_IBM	= 857,
	CP_Slavic_MSDOS	= 852,
	CP_Greek	= 1253,
	CP_Greek_737	= 737,
	CP_Greek_869	= 869,
	CP_Latin_ISO	= 28591,
	CP_EasternEuropean_ISO	= 28592,
	CP_Turkish_ISO	= 28593,
	CP_Baltic_ISO	= 28594,
	CP_Cyrillic_ISO	= 28595,
	CP_Greek_ISO	= 28597,
	CP_KOI8	= 20866,
	CP_Tatar	= 5000,
	CP_Tatar_MSDOS	= 5001,
	CP_Roman_Macintosh	= 10000,
	CP_Greek_Macintosh	= 10006,
	CP_Cyrillic_Macintosh	= 10007,
	CP_Ukrainian_Macintosh	= 10017,
	CP_Latin2_Macintosh	= 10029,
	CP_Icelandic_Macintosh	= 10079,
	CP_Turkish_Macintosh	= 10081,
	CP_Croatian_Macintosh	= 10082,
	CP_Armenian	= 5002,
	CP_Armenian_MSDOS	= 5003,
	CP_Armenian_Macintosh	= 5004,
	CP_Hebrew	= 1255,
	CP_Hebrew_MSDOS	= 862,
	CP_Hebrew_Macintosh	= 10005,
	CP_Hebrew_ISO	= 28598,
	CP_Latin5_ISO	= 28599,
	CP_Cyrillic_MSDOS	= 855,
	CP_Bashkir	= 5006,
	CP_Chinese_Simpl_GB	= 936,
	CP_Chinese_Simpl_Mac	= 10008,
	CP_Chinese_Trad_Big	= 950,
	CP_Chinese_Trad_Mac	= 10002,
	CP_Japan_Mac	= 10001,
	CP_Japan_SJIS	= 932,
	CP_Korean	= 949,
	CP_Korean_Johab	= 1361,
	CP_Korean_Mac	= 10003,
	CP_Mathematical	= 5007,
	CP_Digits	= 5008,
	CP_Thai	= 874,
	CP_Thai_Macintosh	= 10021,
	CP_Vietnamese	= 1258
    } 	CodePageEnum;
























typedef /* [helpstring][helpcontext][v1_enum] */ 
enum FontTypeEnum
    {	FT_Serif	= 0,
	FT_SansSerif	= ( FT_Serif + 1 ) ,
	FT_MonoSpace	= ( FT_SansSerif + 1 ) ,
	FT_Decorative	= ( FT_MonoSpace + 1 ) ,
	FT_Unknown	= ( FT_Decorative + 1 ) 
    } 	FontTypeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum HyperlinkSchemeEnum
    {	HS_Unknown	= 0,
	HS_Local	= ( HS_Unknown + 1 ) ,
	HS_Ftp	= ( HS_Local + 1 ) ,
	HS_Gopher	= ( HS_Ftp + 1 ) ,
	HS_Http	= ( HS_Gopher + 1 ) ,
	HS_Https	= ( HS_Http + 1 ) ,
	HS_File	= ( HS_Https + 1 ) ,
	HS_News	= ( HS_File + 1 ) ,
	HS_Mailto	= ( HS_News + 1 ) 
    } 	HyperlinkSchemeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum TableCellVertAlignmentEnum
    {	TCVA_Top	= 0,
	TCVA_Center	= ( TCVA_Top + 1 ) ,
	TCVA_Bottom	= ( TCVA_Center + 1 ) 
    } 	TableCellVertAlignmentEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum TextTableSeparatorTypeEnum
    {	TTST_CellSeparator	= 0,
	TTST_TableInvisibleSeparator	= ( TTST_CellSeparator + 1 ) ,
	TTST_TableVisibleSeparator	= ( TTST_TableInvisibleSeparator + 1 ) 
    } 	TextTableSeparatorTypeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum CaptionPositionEnum
    {	CP_Top	= 0,
	CP_Bottom	= ( CP_Top + 1 ) ,
	CP_Left	= ( CP_Bottom + 1 ) ,
	CP_Right	= ( CP_Left + 1 ) ,
	CP_Inside	= ( CP_Right + 1 ) 
    } 	CaptionPositionEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum ParagraphTabAlignmentEnum
    {	PTA_Left	= 0,
	PTA_Right	= ( PTA_Left + 1 ) ,
	PTA_Center	= ( PTA_Right + 1 ) 
    } 	ParagraphTabAlignmentEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum TabLeaderTypeEnum
    {	TLT_None	= 0,
	TLT_Dots	= ( TLT_None + 1 ) ,
	TLT_MiddleDots	= ( TLT_Dots + 1 ) ,
	TLT_Hyphens	= ( TLT_MiddleDots + 1 ) ,
	TLT_Underline	= ( TLT_Hyphens + 1 ) 
    } 	TabLeaderTypeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum ParagraphAlignmentEnum
    {	PA_Left	= 0,
	PA_Center	= ( PA_Left + 1 ) ,
	PA_Right	= ( PA_Center + 1 ) ,
	PA_Justify	= ( PA_Right + 1 ) 
    } 	ParagraphAlignmentEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum WordModelTypeEnum
    {	WMT_MonolingualWord	= 0,
	WMT_RegExpWord	= ( WMT_MonolingualWord + 1 ) ,
	WMT_BilingualComposite	= ( WMT_RegExpWord + 1 ) ,
	WMT_Acronym	= ( WMT_BilingualComposite + 1 ) ,
	WMT_Number	= ( WMT_Acronym + 1 ) ,
	WMT_NumberWithQualifier	= ( WMT_Number + 1 ) ,
	WMT_WordNumberComposite	= ( WMT_NumberWithQualifier + 1 ) ,
	WMT_BilingualWordNumberComposite	= ( WMT_WordNumberComposite + 1 ) ,
	WMT_RomanNumber	= ( WMT_BilingualWordNumberComposite + 1 ) ,
	WMT_MonolingualWordWithExtras	= ( WMT_RomanNumber + 1 ) ,
	WMT_MixedFormDictionaryWord	= ( WMT_MonolingualWordWithExtras + 1 ) ,
	WMT_PhoneNumber	= ( WMT_MixedFormDictionaryWord + 1 ) ,
	WMT_Punctuation	= ( WMT_PhoneNumber + 1 ) ,
	WMT_FileName	= ( WMT_Punctuation + 1 ) ,
	WMT_UrlOrEmail	= ( WMT_FileName + 1 ) ,
	WMT_NoSuitableModel	= ( WMT_UrlOrEmail + 1 ) 
    } 	WordModelTypeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum TextRoleEnum
    {	TR_MainText	= 0,
	TR_Footnote	= ( TR_MainText + 1 ) ,
	TR_Incut	= ( TR_Footnote + 1 ) ,
	TR_RunningTitle	= ( TR_Incut + 1 ) ,
	TR_PictureCaption	= ( TR_RunningTitle + 1 ) ,
	TR_TableCaption	= ( TR_PictureCaption + 1 ) ,
	TR_Other	= ( TR_TableCaption + 1 ) ,
	TR_CompoundText	= ( TR_Other + 1 ) ,
	TR_AbstractText	= ( TR_CompoundText + 1 ) 
    } 	TextRoleEnum;




typedef /* [helpstring][helpcontext][v1_enum] */ 
enum ExportPictureFormatEnum
    {	EPF_DontSave	= 0,
	EPF_Automatic	= ( EPF_DontSave + 1 ) ,
	EPF_JpegColor	= ( EPF_Automatic + 1 ) ,
	EPF_JpegGray	= ( EPF_JpegColor + 1 ) ,
	EPF_PngColor	= ( EPF_JpegGray + 1 ) ,
	EPF_PngGray	= ( EPF_PngColor + 1 ) ,
	EPF_PngBlackWhite	= ( EPF_PngGray + 1 ) ,
	EPF_ZipColor	= ( EPF_PngBlackWhite + 1 ) ,
	EPF_ZipGray	= ( EPF_ZipColor + 1 ) ,
	EPF_LZWColor	= ( EPF_ZipGray + 1 ) ,
	EPF_LZWGray	= ( EPF_LZWColor + 1 ) ,
	EPF_CCITT4	= ( EPF_LZWGray + 1 ) ,
	EPF_BmpColor	= ( EPF_CCITT4 + 1 ) ,
	EPF_BmpGray	= ( EPF_BmpColor + 1 ) ,
	EPF_BmpBlackWhite	= ( EPF_BmpGray + 1 ) ,
	EPF_J2KColor	= ( EPF_BmpBlackWhite + 1 ) ,
	EPF_J2KGray	= ( EPF_J2KColor + 1 ) ,
	EPF_JBIG2	= ( EPF_J2KGray + 1 ) 
    } 	ExportPictureFormatEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum FileExportFormatEnum
    {	FEF_RTF	= 0,
	FEF_HTML	= ( FEF_RTF + 1 ) ,
	FEF_XLS	= ( FEF_HTML + 1 ) ,
	FEF_PDF	= ( FEF_XLS + 1 ) ,
	FEF_Text	= ( FEF_PDF + 1 ) ,
	FEF_XML	= ( FEF_Text + 1 ) ,
	FEF_PDFA	= ( FEF_XML + 1 ) ,
	FEF_DOCX	= ( FEF_PDFA + 1 ) ,
	FEF_XLSX	= ( FEF_DOCX + 1 ) ,
	FEF_PPTX	= ( FEF_XLSX + 1 ) ,
	FEF_ALTO	= ( FEF_PPTX + 1 ) ,
	FEF_EPUB	= ( FEF_ALTO + 1 ) ,
	FEF_FB2	= ( FEF_EPUB + 1 ) 
    } 	FileExportFormatEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum RTFPageSynthesisModeEnum
    {	PSM_Unknown	= 0,
	PSM_RTFPlainText	= ( PSM_Unknown + 1 ) ,
	PSM_RTFFormatParagraphs	= ( PSM_RTFPlainText + 1 ) ,
	PSM_RTFColumns	= ( PSM_RTFFormatParagraphs + 1 ) ,
	PSM_RTFExactCopy	= ( PSM_RTFColumns + 1 ) ,
	PSM_RTFEditableCopy	= ( PSM_RTFExactCopy + 1 ) 
    } 	RTFPageSynthesisModeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum RTFPageOrientationEnum
    {	POM_Portrait	= 0,
	POM_Landscape	= ( POM_Portrait + 1 ) ,
	POM_Auto	= ( POM_Landscape + 1 ) 
    } 	RTFPageOrientationEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum BackgroundColorModeEnum
    {	BCM_DontSave	= 0,
	BCM_BlackWhite	= ( BCM_DontSave + 1 ) ,
	BCM_ColorForInverted	= ( BCM_BlackWhite + 1 ) ,
	BCM_Color	= ( BCM_ColorForInverted + 1 ) 
    } 	BackgroundColorModeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum RunningTitleModeEnum
    {	RTM_WriteAsNative	= 0,
	RTM_WriteAsText	= ( RTM_WriteAsNative + 1 ) ,
	RTM_DontWrite	= ( RTM_WriteAsText + 1 ) 
    } 	RunningTitleModeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum TextEncodingTypeEnum
    {	TET_Simple	= 0,
	TET_UTF8	= ( TET_Simple + 1 ) ,
	TET_UTF16	= ( TET_UTF8 + 1 ) ,
	TET_Auto	= ( TET_UTF16 + 1 ) 
    } 	TextEncodingTypeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum TXTExportFormatEnum
    {	TEF_TXT	= 0,
	TEF_CSVFullLayout	= ( TEF_TXT + 1 ) ,
	TEF_CSVTablesOnly	= ( TEF_CSVFullLayout + 1 ) 
    } 	TXTExportFormatEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum XLFileFormatEnum
    {	XLFF_BIFF8	= 0,
	XLFF_BIFF5	= ( XLFF_BIFF8 + 1 ) ,
	XLFF_DoubleStream	= ( XLFF_BIFF5 + 1 ) 
    } 	XLFileFormatEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum XLSXPaperSizeEnum
    {	XLPS_NotSpecified	= 0,
	XLPS_Autodetect	= ( XLPS_NotSpecified + 1 ) ,
	XLPS_Letter	= ( XLPS_Autodetect + 1 ) ,
	XLPS_Legal	= ( XLPS_Letter + 1 ) ,
	XLPS_Statement	= ( XLPS_Legal + 1 ) ,
	XLPS_Executive	= ( XLPS_Statement + 1 ) ,
	XLPS_A2	= ( XLPS_Executive + 1 ) ,
	XLPS_A3	= ( XLPS_A2 + 1 ) ,
	XLPS_A4	= ( XLPS_A3 + 1 ) ,
	XLPS_A5	= ( XLPS_A4 + 1 ) ,
	XLPS_B4	= ( XLPS_A5 + 1 ) ,
	XLPS_B5	= ( XLPS_B4 + 1 ) ,
	XLPS_Folio	= ( XLPS_B5 + 1 ) ,
	XLPS_11x17	= ( XLPS_Folio + 1 ) ,
	XLPS_Envelope10	= ( XLPS_11x17 + 1 ) ,
	XLPS_EnvelopeDL	= ( XLPS_Envelope10 + 1 ) ,
	XLPS_EnvelopeC5	= ( XLPS_EnvelopeDL + 1 ) ,
	XLPS_EnvelopeB5	= ( XLPS_EnvelopeC5 + 1 ) ,
	XLPS_EnvelopeMonarch	= ( XLPS_EnvelopeB5 + 1 ) ,
	XLPS_JapanesePostcard	= ( XLPS_EnvelopeMonarch + 1 ) ,
	XLPS_Quarto	= ( XLPS_JapanesePostcard + 1 ) ,
	XLPS_10x14	= ( XLPS_Quarto + 1 ) ,
	XLPS_C	= ( XLPS_10x14 + 1 ) ,
	XLPS_D	= ( XLPS_C + 1 ) ,
	XLPS_E	= ( XLPS_D + 1 ) ,
	XLPS_9x11	= ( XLPS_E + 1 ) ,
	XLPS_10x11	= ( XLPS_9x11 + 1 ) ,
	XLPS_Letter_Extra	= ( XLPS_10x11 + 1 ) ,
	XLPS_Legal_Extra	= ( XLPS_Letter_Extra + 1 ) ,
	XLPS_Tabloid_Extra	= ( XLPS_Legal_Extra + 1 ) ,
	XLPS_A4_Extra	= ( XLPS_Tabloid_Extra + 1 ) ,
	XLPS_SuperA	= ( XLPS_A4_Extra + 1 ) ,
	XLPS_SuperB	= ( XLPS_SuperA + 1 ) ,
	XLPS_A4_Plus	= ( XLPS_SuperB + 1 ) ,
	XLPS_A3_Extra	= ( XLPS_A4_Plus + 1 ) ,
	XLPS_A5_Extra	= ( XLPS_A3_Extra + 1 ) ,
	XLPS_ISO_B5	= ( XLPS_A5_Extra + 1 ) 
    } 	XLSXPaperSizeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum HTMLSynthesisModeEnum
    {	HSM_PlainText	= 0,
	HSM_FormattedStream	= ( HSM_PlainText + 1 ) ,
	HSM_FlexibleLayout	= ( HSM_FormattedStream + 1 ) 
    } 	HTMLSynthesisModeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum HTMLFormatModeEnum
    {	HFM_Format32	= 0,
	HFM_Format40	= ( HFM_Format32 + 1 ) 
    } 	HTMLFormatModeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum HTMLDocumentSplittingModeEnum
    {	HDSM_None	= 0,
	HDSM_Heading_1	= ( HDSM_None + 1 ) ,
	HDSM_Heading_2	= ( HDSM_Heading_1 + 1 ) ,
	HDSM_Smart	= ( HDSM_Heading_2 + 1 ) 
    } 	HTMLDocumentSplittingModeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum PDFExportModeEnum
    {	PEM_TextWithPictures	= 0,
	PEM_TextOnImage	= ( PEM_TextWithPictures + 1 ) ,
	PEM_ImageOnText	= ( PEM_TextOnImage + 1 ) ,
	PEM_ImageOnly	= ( PEM_ImageOnText + 1 ) ,
	PEM_TextOnly	= ( PEM_ImageOnly + 1 ) 
    } 	PDFExportModeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum FontModeEnum
    {	FM_UseStandardFonts	= 0,
	FM_UseFontsFromIText	= ( FM_UseStandardFonts + 1 ) 
    } 	FontModeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum PDFKeyLengthEnum
    {	PDFKL_40Bit	= 5,
	PDFKL_48Bit	= 6,
	PDFKL_56Bit	= 7,
	PDFKL_64Bit	= 8,
	PDFKL_72Bit	= 9,
	PDFKL_80Bit	= 10,
	PDFKL_88Bit	= 11,
	PDFKL_96Bit	= 12,
	PDFKL_104Bit	= 13,
	PDFKL_112Bit	= 14,
	PDFKL_120Bit	= 15,
	PDFKL_128Bit	= 16
    } 	PDFKeyLengthEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum PDFVersionEnum
    {	PVN_Auto	= 1,
	PVN_Version13	= 3,
	PVN_Version14	= 4,
	PVN_Version15	= 5,
	PVN_Version16	= 6,
	PVN_Version17	= 7
    } 	PDFVersionEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum PDFMRCCompressionLevelEnum
    {	PMRC_LowCompression	= 0,
	PMRC_AvgCompression	= ( PMRC_LowCompression + 1 ) ,
	PMRC_MaxCompression	= ( PMRC_AvgCompression + 1 ) ,
	PMRC_Custom	= ( PMRC_MaxCompression + 1 ) 
    } 	PDFMRCCompressionLevelEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum PDFExportScenarioEnum
    {	PES_MaxQuality	= 0,
	PES_Balanced	= ( PES_MaxQuality + 1 ) ,
	PES_MinSize	= ( PES_Balanced + 1 ) ,
	PES_MaxSpeed	= ( PES_MinSize + 1 ) 
    } 	PDFExportScenarioEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum PDFColorityModeEnum
    {	PCM_KeepColority	= 0,
	PCM_ForceToGray	= ( PCM_KeepColority + 1 ) 
    } 	PDFColorityModeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum PDFMRCModeEnum
    {	MRC_Auto	= 0,
	MRC_Always	= ( MRC_Auto + 1 ) ,
	MRC_Disable	= ( MRC_Always + 1 ) 
    } 	PDFMRCModeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum PDFResolutionTypeEnum
    {	PRT_Desired	= 0,
	PRT_Exact	= ( PRT_Desired + 1 ) ,
	PRT_Source	= ( PRT_Exact + 1 ) 
    } 	PDFResolutionTypeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum PDFAComplianceModeEnum
    {	PCM_None	= 0,
	PCM_Pdfa_1b	= ( PCM_None + 1 ) ,
	PCM_Pdfa_1a	= ( PCM_Pdfa_1b + 1 ) 
    } 	PDFAComplianceModeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum XMLCharAttributesEnum
    {	XCA_None	= 0,
	XCA_Ascii	= ( XCA_None + 1 ) ,
	XCA_Basic	= ( XCA_Ascii + 1 ) ,
	XCA_Extended	= ( XCA_Basic + 1 ) 
    } 	XMLCharAttributesEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum FontAttributesModeEnum
    {	FAM_Plain	= 0,
	FAM_Restricted	= ( FAM_Plain + 1 ) ,
	FAM_Full	= ( FAM_Restricted + 1 ) 
    } 	FontAttributesModeEnum;




typedef /* [helpstring][helpcontext][v1_enum] */ 
enum ObjectsColorEnum
    {	OC_Red	= 0,
	OC_Green	= ( OC_Red + 1 ) ,
	OC_Blue	= ( OC_Green + 1 ) ,
	OC_Yellow	= ( OC_Blue + 1 ) 
    } 	ObjectsColorEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum ObjectsTypeEnum
    {	OT_Full	= 0,
	OT_Background	= ( OT_Full + 1 ) ,
	OT_Stamp	= ( OT_Background + 1 ) 
    } 	ObjectsTypeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum ImageColorTypeEnum
    {	ICT_BlackWhite	= 0,
	ICT_Gray	= ( ICT_BlackWhite + 1 ) ,
	ICT_Color	= ( ICT_Gray + 1 ) 
    } 	ImageColorTypeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum ImageFileFormatEnum
    {	IFF_UnknownFormat	= 0,
	IFF_BmpBwUncompressed	= ( IFF_UnknownFormat + 1 ) ,
	IFF_BmpGrayUncompressed	= ( IFF_BmpBwUncompressed + 1 ) ,
	IFF_BmpColorUncompressed	= ( IFF_BmpGrayUncompressed + 1 ) ,
	IFF_DcxBwPackbits	= ( IFF_BmpColorUncompressed + 1 ) ,
	IFF_DcxGrayPackbits	= ( IFF_DcxBwPackbits + 1 ) ,
	IFF_DcxColorPackbits	= ( IFF_DcxGrayPackbits + 1 ) ,
	IFF_JpegGrayJfif	= ( IFF_DcxColorPackbits + 1 ) ,
	IFF_JpegColorJfif	= ( IFF_JpegGrayJfif + 1 ) ,
	IFF_PcxBwPackbits	= ( IFF_JpegColorJfif + 1 ) ,
	IFF_PcxGrayPackbits	= ( IFF_PcxBwPackbits + 1 ) ,
	IFF_PcxColorPackbits	= ( IFF_PcxGrayPackbits + 1 ) ,
	IFF_PngBwPng	= ( IFF_PcxColorPackbits + 1 ) ,
	IFF_PngGrayPng	= ( IFF_PngBwPng + 1 ) ,
	IFF_PngColorPng	= ( IFF_PngGrayPng + 1 ) ,
	IFF_TiffBwUncompressed	= ( IFF_PngColorPng + 1 ) ,
	IFF_TiffBwCcittGroup3	= ( IFF_TiffBwUncompressed + 1 ) ,
	IFF_TiffBwCcittGroup3Fax	= ( IFF_TiffBwCcittGroup3 + 1 ) ,
	IFF_TiffBwCcittGroup4	= ( IFF_TiffBwCcittGroup3Fax + 1 ) ,
	IFF_TiffBwPackbits	= ( IFF_TiffBwCcittGroup4 + 1 ) ,
	IFF_TiffGrayUncompressed	= ( IFF_TiffBwPackbits + 1 ) ,
	IFF_TiffGrayPackbits	= ( IFF_TiffGrayUncompressed + 1 ) ,
	IFF_TiffGrayJpegJfif	= ( IFF_TiffGrayPackbits + 1 ) ,
	IFF_TiffColorUncompressed	= ( IFF_TiffGrayJpegJfif + 1 ) ,
	IFF_TiffColorPackbits	= ( IFF_TiffColorUncompressed + 1 ) ,
	IFF_TiffColorJpegJfif	= ( IFF_TiffColorPackbits + 1 ) ,
	IFF_TiffGrayABBYYLossless	= ( IFF_TiffColorJpegJfif + 1 ) ,
	IFF_TiffColorABBYYLossless	= ( IFF_TiffGrayABBYYLossless + 1 ) ,
	IFF_Jpeg2kGray	= ( IFF_TiffColorABBYYLossless + 1 ) ,
	IFF_Jpeg2kColor	= ( IFF_Jpeg2kGray + 1 ) ,
	IFF_PDF	= ( IFF_Jpeg2kColor + 1 ) ,
	IFF_TiffBwLZW	= ( IFF_PDF + 1 ) ,
	IFF_TiffGrayLZW	= ( IFF_TiffBwLZW + 1 ) ,
	IFF_TiffColorLZW	= ( IFF_TiffGrayLZW + 1 ) ,
	IFF_TiffBwZip	= ( IFF_TiffColorLZW + 1 ) ,
	IFF_TiffGrayZip	= ( IFF_TiffBwZip + 1 ) ,
	IFF_TiffColorZip	= ( IFF_TiffGrayZip + 1 ) ,
	IFF_GifBwLZW	= ( IFF_TiffColorZip + 1 ) ,
	IFF_GifGrayLZW	= ( IFF_GifBwLZW + 1 ) ,
	IFF_GifColorLZW	= ( IFF_GifGrayLZW + 1 ) ,
	IFF_DjVuBw	= ( IFF_GifColorLZW + 1 ) ,
	IFF_DjVuGray	= ( IFF_DjVuBw + 1 ) ,
	IFF_DjVuColor	= ( IFF_DjVuGray + 1 ) ,
	IFF_JBIG2	= ( IFF_DjVuColor + 1 ) ,
	IFF_WdpBw	= ( IFF_JBIG2 + 1 ) ,
	IFF_WdpGray	= ( IFF_WdpBw + 1 ) ,
	IFF_WdpColor	= ( IFF_WdpGray + 1 ) ,
	IFF_Wic	= ( IFF_WdpColor + 1 ) 
    } 	ImageFileFormatEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum RotationTypeEnum
    {	RT_UnknownRotation	= -1,
	RT_NoRotation	= ( RT_UnknownRotation + 1 ) ,
	RT_Clockwise	= ( RT_NoRotation + 1 ) ,
	RT_Counterclockwise	= ( RT_Clockwise + 1 ) ,
	RT_Upsidedown	= ( RT_Counterclockwise + 1 ) 
    } 	RotationTypeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum ImageCompressionEnum
    {	IC_NoCompression	= 0,
	IC_Compress	= ( IC_NoCompression + 1 ) ,
	IC_Auto	= ( IC_Compress + 1 ) 
    } 	ImageCompressionEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum ImageTypeEnum
    {	IT_Base	= 0,
	IT_Deskewed	= ( IT_Base + 1 ) ,
	IT_Preview	= ( IT_Deskewed + 1 ) 
    } 	ImageTypeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum CorrectSkewModeEnum
    {	CSM_CorrectSkewByBlackSquaresHorizontally	= 0x1,
	CSM_CorrectSkewByBlackSquaresVertically	= 0x2,
	CSM_CorrectSkewByHorizontalLines	= 0x4,
	CSM_CorrectSkewByVerticalLines	= 0x8,
	CSM_CorrectSkewByHorizontalText	= 0x10,
	CSM_CorrectSkewByVerticalText	= 0x20
    } 	CorrectSkewModeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum MemoryImageFormatEnum
    {	MIF_BlackAndWhite	= 0,
	MIF_Gray	= ( MIF_BlackAndWhite + 1 ) ,
	MIF_Color	= ( MIF_Gray + 1 ) 
    } 	MemoryImageFormatEnum;







typedef /* [helpstring][helpcontext][v1_enum] */ 
enum OrientationDetectionModeEnum
    {	ODM_Fast	= 0,
	ODM_Normal	= ( ODM_Fast + 1 ) ,
	ODM_Thorough	= ( ODM_Normal + 1 ) 
    } 	OrientationDetectionModeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum TextTypeEnum
    {	TT_Normal	= 0x1,
	TT_Typewriter	= 0x2,
	TT_Matrix	= 0x4,
	TT_Index	= 0x8,
	TT_Handprinted	= 0x10,
	TT_OCR_A	= 0x20,
	TT_OCR_B	= 0x40,
	TT_MICR_E13B	= 0x80,
	TT_MICR_CMC7	= 0x100,
	TT_Gothic	= 0x200,
	TT_ToBeDetected	= 0
    } 	TextTypeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum ParagraphExtractionModeEnum
    {	PEM_NormalExtraction	= 0,
	PEM_RoughExtraction	= ( PEM_NormalExtraction + 1 ) ,
	PEM_SingleLineParagraphsWithSpaceFormatting	= ( PEM_RoughExtraction + 1 ) ,
	PEM_SingleLineParagraphsWithWordSeparationOnly	= ( PEM_SingleLineParagraphsWithSpaceFormatting + 1 ) 
    } 	ParagraphExtractionModeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum MonospaceDetectionModeEnum
    {	MDM_Auto	= 0,
	MDM_NotMonospace	= ( MDM_Auto + 1 ) ,
	MDM_Monospace	= ( MDM_NotMonospace + 1 ) 
    } 	MonospaceDetectionModeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum CJKTextDirectionEnum
    {	CJKTD_Horizontal	= 0,
	CJKTD_Vertical	= ( CJKTD_Horizontal + 1 ) ,
	CJKTD_Autodetect	= ( CJKTD_Vertical + 1 ) 
    } 	CJKTextDirectionEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum CaseRecognitionModeEnum
    {	CRM_AutoCase	= 0,
	CRM_SmallCase	= ( CRM_AutoCase + 1 ) ,
	CRM_CapitalCase	= ( CRM_SmallCase + 1 ) 
    } 	CaseRecognitionModeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum FieldMarkingTypeEnum
    {	FMT_SimpleText	= 0,
	FMT_UnderlinedText	= ( FMT_SimpleText + 1 ) ,
	FMT_TextInFrame	= ( FMT_UnderlinedText + 1 ) ,
	FMT_GreyBoxes	= ( FMT_TextInFrame + 1 ) ,
	FMT_CharBoxSeries	= ( FMT_GreyBoxes + 1 ) ,
	FMT_SimpleComb	= ( FMT_CharBoxSeries + 1 ) ,
	FMT_CombInFrame	= ( FMT_SimpleComb + 1 ) ,
	FMT_PartitionedFrame	= ( FMT_CombInFrame + 1 ) 
    } 	FieldMarkingTypeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum ErrorHiliteLevelEnum
    {	EHL_None	= 0,
	EHL_Scanty	= ( EHL_None + 1 ) ,
	EHL_Standard	= ( EHL_Scanty + 1 ) ,
	EHL_Thorough	= ( EHL_Standard + 1 ) ,
	EHL_AllText	= ( EHL_Thorough + 1 ) 
    } 	ErrorHiliteLevelEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum WritingStyleEnum
    {	WS_Default	= 0,
	WS_American	= ( WS_Default + 1 ) ,
	WS_German	= ( WS_American + 1 ) ,
	WS_Russian	= ( WS_German + 1 ) ,
	WS_Polish	= ( WS_Russian + 1 ) ,
	WS_Thai	= ( WS_Polish + 1 ) ,
	WS_Japanese	= ( WS_Thai + 1 ) ,
	WS_Arabic	= ( WS_Japanese + 1 ) ,
	WS_Baltic	= ( WS_Arabic + 1 ) ,
	WS_British	= ( WS_Baltic + 1 ) ,
	WS_Bulgarian	= ( WS_British + 1 ) ,
	WS_Canadian	= ( WS_Bulgarian + 1 ) ,
	WS_Czech	= ( WS_Canadian + 1 ) ,
	WS_Croatian	= ( WS_Czech + 1 ) ,
	WS_French	= ( WS_Croatian + 1 ) ,
	WS_Greek	= ( WS_French + 1 ) ,
	WS_Hungarian	= ( WS_Greek + 1 ) ,
	WS_Italian	= ( WS_Hungarian + 1 ) ,
	WS_Romanian	= ( WS_Italian + 1 ) ,
	WS_Slovak	= ( WS_Romanian + 1 ) ,
	WS_Spanish	= ( WS_Slovak + 1 ) ,
	WS_Turkish	= ( WS_Spanish + 1 ) ,
	WS_Ukrainian	= ( WS_Turkish + 1 ) ,
	WS_Common	= ( WS_Ukrainian + 1 ) ,
	WS_Chinese	= ( WS_Common + 1 ) ,
	WS_Azerbaijan	= ( WS_Chinese + 1 ) ,
	WS_Kazakh	= ( WS_Azerbaijan + 1 ) ,
	WS_Kirgiz	= ( WS_Kazakh + 1 ) ,
	WS_Latvian	= ( WS_Kirgiz + 1 ) 
    } 	WritingStyleEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum SkewCorrectionModeEnum
    {	SCM_Unknown	= 0,
	SCM_AccordingToPage	= ( SCM_Unknown + 1 ) ,
	SCM_Always	= ( SCM_AccordingToPage + 1 ) ,
	SCM_Never	= ( SCM_Always + 1 ) 
    } 	SkewCorrectionModeEnum;






typedef /* [helpstring][helpcontext][v1_enum] */ 
enum BaseLanguageLetterSetEnum
    {	BLLS_Alphabet	= 0,
	BLLS_Prefixes	= ( BLLS_Alphabet + 1 ) ,
	BLLS_Suffixes	= ( BLLS_Prefixes + 1 ) ,
	BLLS_IgnorableLetters	= ( BLLS_Suffixes + 1 ) ,
	BLLS_SubscriptAlphabet	= ( BLLS_IgnorableLetters + 1 ) ,
	BLLS_SuperscriptAlphabet	= ( BLLS_SubscriptAlphabet + 1 ) 
    } 	BaseLanguageLetterSetEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum DictionaryTypeEnum
    {	DT_SystemDictionary	= 0,
	DT_UserDictionary	= ( DT_SystemDictionary + 1 ) ,
	DT_RegularExpression	= ( DT_UserDictionary + 1 ) ,
	DT_ExternalDictionary	= ( DT_RegularExpression + 1 ) 
    } 	DictionaryTypeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum TextLanguageLetterSetEnum
    {	TLLS_InterwordPunctuators	= 0,
	TLLS_ProhibitedLetters	= ( TLLS_InterwordPunctuators + 1 ) ,
	TLLS_Prefixes	= ( TLLS_ProhibitedLetters + 1 ) ,
	TLLS_Suffixes	= ( TLLS_Prefixes + 1 ) 
    } 	TextLanguageLetterSetEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum TextCategoryEnum
    {	TC_Unknown	= 0,
	TC_NaturalText	= ( TC_Unknown + 1 ) ,
	TC_TableCells	= ( TC_NaturalText + 1 ) ,
	TC_FormFields	= ( TC_TableCells + 1 ) ,
	TC_Listing	= ( TC_FormFields + 1 ) 
    } 	TextCategoryEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum LanguageCategoryEnum
    {	LC_CoreLanguage	= 0,
	LC_AdditionalLanguage	= ( LC_CoreLanguage + 1 ) ,
	LC_ConstructedLanguage	= ( LC_AdditionalLanguage + 1 ) ,
	LC_FormalLanguage	= ( LC_ConstructedLanguage + 1 ) ,
	LC_DataType	= ( LC_FormalLanguage + 1 ) 
    } 	LanguageCategoryEnum;


typedef /* [helpstring][helpcontext][v1_enum] */ 
enum BarcodeTypeEnum
    {	BT_Unknown	= 0,
	BT_Code39	= 0x1,
	BT_Interleaved25	= 0x2,
	BT_EAN13	= 0x4,
	BT_Code128	= 0x8,
	BT_EAN8	= 0x10,
	BT_PDF417	= 0x20,
	BT_Codabar	= 0x40,
	BT_UPCE	= 0x80,
	BT_Industrial25	= 0x100,
	BT_IATA25	= 0x200,
	BT_Matrix25	= 0x400,
	BT_Code93	= 0x800,
	BT_PostNet	= 0x1000,
	BT_UCC128	= 0x2000,
	BT_Patch	= 0x4000,
	BT_Aztec	= 0x8000,
	BT_DataMatrix	= 0x10000,
	BT_QRCode	= 0x20000,
	BT_UPCA	= 0x40000,
	BT_Autodetect	= ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( BT_Code39 | BT_Interleaved25 )  | BT_EAN13 )  | BT_Code128 )  | BT_EAN8 )  | BT_PDF417 )  | BT_Codabar )  | BT_UPCE )  | BT_Industrial25 )  | BT_IATA25 )  | BT_Matrix25 )  | BT_Code93 )  | BT_PostNet )  | BT_UCC128 )  | BT_Patch )  | BT_Aztec )  | BT_DataMatrix )  | BT_QRCode )  | BT_UPCA ) 
    } 	BarcodeTypeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum BarcodeSupplementTypeEnum
    {	BS_Unknown	= 0,
	BS_Void	= 0x1,
	BS_2Digits	= 0x2,
	BS_5Digits	= 0x4,
	BS_Autodetect	= ( ( BS_Void | BS_2Digits )  | BS_5Digits ) 
    } 	BarcodeSupplementTypeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum BarcodeOrientationEnum
    {	BO_Unknown	= 0,
	BO_Left_To_Right	= 0x1,
	BO_Down_To_Top	= 0x2,
	BO_Right_To_Left	= 0x4,
	BO_Top_To_Down	= 0x8,
	BO_Autodetect	= ( ( ( BO_Left_To_Right | BO_Down_To_Top )  | BO_Right_To_Left )  | BO_Top_To_Down ) 
    } 	BarcodeOrientationEnum;



















typedef /* [helpstring][helpcontext][v1_enum] */ 
enum BlockRecognitionStatusEnum
    {	BRS_NotRecognized	= 0,
	BRS_PartiallyRecognized	= ( BRS_NotRecognized + 1 ) ,
	BRS_Complete	= ( BRS_PartiallyRecognized + 1 ) 
    } 	BlockRecognitionStatusEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum BlockRoleEnum
    {	BR_Unknown	= 0,
	BR_RunningTitle	= ( BR_Unknown + 1 ) ,
	BR_MainText	= ( BR_RunningTitle + 1 ) ,
	BR_IncutText	= ( BR_MainText + 1 ) ,
	BR_Caption	= ( BR_IncutText + 1 ) ,
	BR_LineNumbers	= ( BR_Caption + 1 ) ,
	BR_Artefact	= ( BR_LineNumbers + 1 ) 
    } 	BlockRoleEnum;

typedef /* [v1_enum][helpstring][helpcontext] */ 
enum BlockTypeEnum
    {	BT_Text	= 0,
	BT_RasterPicture	= ( BT_Text + 1 ) ,
	BT_Table	= ( BT_RasterPicture + 1 ) ,
	BT_Barcode	= ( BT_Table + 1 ) ,
	BT_Checkmark	= ( BT_Barcode + 1 ) ,
	BT_CheckmarkGroup	= ( BT_Checkmark + 1 ) ,
	BT_VectorPicture	= ( BT_CheckmarkGroup + 1 ) ,
	BT_Separator	= ( BT_VectorPicture + 1 ) ,
	BT_SeparatorGroup	= ( BT_Separator + 1 ) 
    } 	BlockTypeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum BlockLayerTypeEnum
    {	BLT_Unknown	= 0,
	BLT_Background	= ( BLT_Unknown + 1 ) ,
	BLT_Foreground	= ( BLT_Background + 1 ) ,
	BLT_Hidden	= ( BLT_Foreground + 1 ) 
    } 	BlockLayerTypeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum ReadingTypeEnum
    {	TRT_Unknown	= 0,
	TRT_LinesBased	= ( TRT_Unknown + 1 ) ,
	TRT_ColumnsBased	= ( TRT_LinesBased + 1 ) 
    } 	ReadingTypeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum TableSeparatorTypeEnum
    {	TST_Absent	= 0,
	TST_Unknown	= ( TST_Absent + 1 ) ,
	TST_Invisible	= ( TST_Unknown + 1 ) ,
	TST_Explicit	= ( TST_Invisible + 1 ) ,
	TST_Multiple	= ( TST_Explicit + 1 ) 
    } 	TableSeparatorTypeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum CheckmarkTypeEnum
    {	CMT_Square	= 0,
	CMT_Empty	= ( CMT_Square + 1 ) ,
	CMT_Custom	= ( CMT_Empty + 1 ) 
    } 	CheckmarkTypeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum CheckmarkCheckStateEnum
    {	CMCS_NotChecked	= 0,
	CMCS_Checked	= ( CMCS_NotChecked + 1 ) ,
	CMCS_Corrected	= ( CMCS_Checked + 1 ) 
    } 	CheckmarkCheckStateEnum;


typedef /* [helpstring][helpcontext][v1_enum] */ 
enum SeparatorTypeEnum
    {	ST_Unknown	= 0,
	ST_Solid	= ( ST_Unknown + 1 ) ,
	ST_Dotted	= ( ST_Solid + 1 ) 
    } 	SeparatorTypeEnum;








typedef /* [helpstring][helpcontext][v1_enum] */ 
enum ScanPageRotationAngleEnum
    {	SPRA_Rotation0	= 0,
	SPRA_Rotation90	= ( SPRA_Rotation0 + 1 ) ,
	SPRA_Rotation180	= ( SPRA_Rotation90 + 1 ) ,
	SPRA_Rotation270	= ( SPRA_Rotation180 + 1 ) 
    } 	ScanPageRotationAngleEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum ScanPaperSizeEnum
    {	SPS_None	= 0,
	SPS_Tabloid	= ( SPS_None + 1 ) ,
	SPS_Fanfold	= ( SPS_Tabloid + 1 ) ,
	SPS_Legal	= ( SPS_Fanfold + 1 ) ,
	SPS_Folio	= ( SPS_Legal + 1 ) ,
	SPS_Letter	= ( SPS_Folio + 1 ) ,
	SPS_Slide	= ( SPS_Letter + 1 ) ,
	SPS_Executive	= ( SPS_Slide + 1 ) ,
	SPS_Statement	= ( SPS_Executive + 1 ) ,
	SPS_GermanLegalFanfold	= ( SPS_Statement + 1 ) ,
	SPS_GermanFanfold	= ( SPS_GermanLegalFanfold + 1 ) ,
	SPS_A0	= ( SPS_GermanFanfold + 1 ) ,
	SPS_A1	= ( SPS_A0 + 1 ) ,
	SPS_A2	= ( SPS_A1 + 1 ) ,
	SPS_A3	= ( SPS_A2 + 1 ) ,
	SPS_A4	= ( SPS_A3 + 1 ) ,
	SPS_A5	= ( SPS_A4 + 1 ) ,
	SPS_B1_ISO	= ( SPS_A5 + 1 ) ,
	SPS_B2_ISO	= ( SPS_B1_ISO + 1 ) ,
	SPS_B3_ISO	= ( SPS_B2_ISO + 1 ) ,
	SPS_B4_ISO	= ( SPS_B3_ISO + 1 ) ,
	SPS_B5_ISO	= ( SPS_B4_ISO + 1 ) ,
	SPS_B6_ISO	= ( SPS_B5_ISO + 1 ) ,
	SPS_B4_JIS	= ( SPS_B6_ISO + 1 ) ,
	SPS_B5_JIS	= ( SPS_B4_JIS + 1 ) ,
	SPS_B6_JIS	= ( SPS_B5_JIS + 1 ) ,
	SPS_C3	= ( SPS_B6_JIS + 1 ) ,
	SPS_C4	= ( SPS_C3 + 1 ) ,
	SPS_C5	= ( SPS_C4 + 1 ) ,
	SPS_C6	= ( SPS_C5 + 1 ) ,
	SPS_RA2	= ( SPS_C6 + 1 ) ,
	SPS_RA3	= ( SPS_RA2 + 1 ) ,
	SPS_RA4	= ( SPS_RA3 + 1 ) ,
	SPS_QUARTO	= ( SPS_RA4 + 1 ) ,
	SPS_DL	= ( SPS_QUARTO + 1 ) ,
	SPS_Envelope14	= ( SPS_DL + 1 ) ,
	SPS_Envelope12	= ( SPS_Envelope14 + 1 ) ,
	SPS_Envelope11	= ( SPS_Envelope12 + 1 ) ,
	SPS_Envelope10	= ( SPS_Envelope11 + 1 ) ,
	SPS_Envelope9	= ( SPS_Envelope10 + 1 ) ,
	SPS_EnvelopeCheck	= ( SPS_Envelope9 + 1 ) ,
	SPS_EnvelopeMonarch	= ( SPS_EnvelopeCheck + 1 ) ,
	SPS_Custom	= 0xffff
    } 	ScanPaperSizeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum ScanBrightnessControlEnum
    {	SBC_Fine	= 0,
	SBC_Scanner	= ( SBC_Fine + 1 ) ,
	SBC_Manual	= ( SBC_Scanner + 1 ) 
    } 	ScanBrightnessControlEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum ScanPictureModeEnum
    {	SPM_BlackAndWhite	= 0,
	SPM_Grayscale	= ( SPM_BlackAndWhite + 1 ) ,
	SPM_Color	= ( SPM_Grayscale + 1 ) 
    } 	ScanPictureModeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum ScanOptionsInterfaceTypeEnum
    {	SOIT_None	= 0,
	SOIT_Twain	= ( SOIT_None + 1 ) ,
	SOIT_Fine	= ( SOIT_Twain + 1 ) 
    } 	ScanOptionsInterfaceTypeEnum;

#define	dispid_ScanManager_NewImage	( 1 )

#define	dispid_ScanManager_ScanStopped	( 2 )


typedef /* [helpstring][helpcontext][v1_enum] */ 
enum PageSplitDirectionEnum
    {	PSD_HorizontalSplit	= 0,
	PSD_VerticalSplit	= ( PSD_HorizontalSplit + 1 ) ,
	PSD_NoSplit	= ( PSD_VerticalSplit + 1 ) 
    } 	PageSplitDirectionEnum;

#define	dispid_DocumentAnalyzer_OnProgress	( 1 )

#define	dispid_DocumentAnalyzer_OnRecognizerTip	( 2 )

#define	dispid_DocumentAnalyzer_OnRegionProcessed	( 3 )



























typedef /* [helpstring][helpcontext][v1_enum] */ 
enum PageElementTypeEnum
    {	PET_Text	= 0,
	PET_Table	= ( PET_Text + 1 ) ,
	PET_Picture	= ( PET_Table + 1 ) ,
	PET_Barcode	= ( PET_Picture + 1 ) 
    } 	PageElementTypeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum StreamTypeEnum
    {	ST_MainText	= 0,
	ST_Incut	= ( ST_MainText + 1 ) ,
	ST_Footnote	= ( ST_Incut + 1 ) ,
	ST_Artefact	= ( ST_Footnote + 1 ) 
    } 	StreamTypeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum FrameVerticalReferenceEnum
    {	FVR_Page	= 0,
	FVR_Margin	= ( FVR_Page + 1 ) ,
	FVR_Section	= ( FVR_Margin + 1 ) ,
	FVR_Paragraph	= ( FVR_Section + 1 ) 
    } 	FrameVerticalReferenceEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum FrameHorizontalReferenceEnum
    {	FHR_Margin	= 0,
	FHR_Page	= ( FHR_Margin + 1 ) 
    } 	FrameHorizontalReferenceEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum TextWrappingEnum
    {	TW_Undefined	= 0,
	TW_FromLeft	= ( TW_Undefined + 1 ) ,
	TW_FromRight	= ( TW_FromLeft + 1 ) ,
	TW_Around	= ( TW_FromRight + 1 ) ,
	TW_Gap	= ( TW_Around + 1 ) 
    } 	TextWrappingEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum FootnoteNumberingTypeEnum
    {	FNT_1	= 0,
	FNT_I_capital	= ( FNT_1 + 1 ) ,
	FNT_i_small	= ( FNT_I_capital + 1 ) ,
	FNT_A_capital	= ( FNT_i_small + 1 ) ,
	FNT_a_small	= ( FNT_A_capital + 1 ) ,
	FNT_Asterisk	= ( FNT_a_small + 1 ) ,
	FNT_AsteriskOnly	= ( FNT_Asterisk + 1 ) 
    } 	FootnoteNumberingTypeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum FootnotePositionInDocumentTypeEnum
    {	FPDT_TextEnd	= 0,
	FPDT_PageEnd	= ( FPDT_TextEnd + 1 ) ,
	FPDT_SectionEnd	= ( FPDT_PageEnd + 1 ) ,
	FPDT_DocumentEnd	= ( FPDT_SectionEnd + 1 ) 
    } 	FootnotePositionInDocumentTypeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum FootnotePositionOnPageTypeEnum
    {	FPPT_LastColumn	= 0,
	FPPT_CurrentColumn	= ( FPPT_LastColumn + 1 ) ,
	FPPT_SingleColumnSection	= ( FPPT_CurrentColumn + 1 ) 
    } 	FootnotePositionOnPageTypeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum PageBlackSeparatorTypeEnum
    {	PBST_Solid	= 0,
	PBST_Dotted	= ( PBST_Solid + 1 ) 
    } 	PageBlackSeparatorTypeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum PageBlackSeparatorRoleEnum
    {	PBSR_Unclassified	= 0,
	PBSR_TablePart	= ( PBSR_Unclassified + 1 ) ,
	PBSR_PicturePart	= ( PBSR_TablePart + 1 ) ,
	PBSR_TextPart	= ( PBSR_PicturePart + 1 ) ,
	PBSR_RunningTitle	= ( PBSR_TextPart + 1 ) ,
	PBSR_FootNote	= ( PBSR_RunningTitle + 1 ) ,
	PBSR_Incut	= ( PBSR_FootNote + 1 ) ,
	PBSR_InterColumn	= ( PBSR_Incut + 1 ) ,
	PBSR_InterSection	= ( PBSR_InterColumn + 1 ) ,
	PBSR_ParagraphBorderBox	= ( PBSR_InterSection + 1 ) ,
	PBSR_IncutBorderBox	= ( PBSR_ParagraphBorderBox + 1 ) 
    } 	PageBlackSeparatorRoleEnum;











typedef /* [helpstring][helpcontext][v1_enum] */ 
enum DocumentElementTypeEnum
    {	DET_Paragraph	= 0,
	DET_Table	= ( DET_Paragraph + 1 ) ,
	DET_Picture	= ( DET_Table + 1 ) ,
	DET_Barcode	= ( DET_Picture + 1 ) 
    } 	DocumentElementTypeEnum;

typedef /* [v1_enum][helpstring][helpcontext] */ 
enum ParagraphRoleEnum
    {	PR_Text	= 0,
	PR_TableText	= ( PR_Text + 1 ) ,
	PR_Heading	= ( PR_TableText + 1 ) ,
	PR_TableHeading	= ( PR_Heading + 1 ) ,
	PR_PictureCaption	= ( PR_TableHeading + 1 ) ,
	PR_TableCaption	= ( PR_PictureCaption + 1 ) ,
	PR_TableOfContents	= ( PR_TableCaption + 1 ) ,
	PR_Footnote	= ( PR_TableOfContents + 1 ) ,
	PR_Endnote	= ( PR_Footnote + 1 ) ,
	PR_RunningTitle	= ( PR_Endnote + 1 ) ,
	PR_Garbage	= ( PR_RunningTitle + 1 ) ,
	PR_Other	= ( PR_Garbage + 1 ) ,
	PR_Barcode	= ( PR_Other + 1 ) 
    } 	ParagraphRoleEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum StreamElementAlignmentEnum
    {	SEA_None	= 0,
	SEA_Left	= ( SEA_None + 1 ) ,
	SEA_Center	= ( SEA_Left + 1 ) ,
	SEA_Right	= ( SEA_Center + 1 ) ,
	SEA_Justify	= ( SEA_Right + 1 ) 
    } 	StreamElementAlignmentEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum NumberingStyleEnum
    {	NS_None	= 0,
	NS_Decimal	= ( NS_None + 1 ) ,
	NS_UpperRoman	= ( NS_Decimal + 1 ) ,
	NS_LowerRoman	= ( NS_UpperRoman + 1 ) ,
	NS_UpperLetter	= ( NS_LowerRoman + 1 ) ,
	NS_LowerLetter	= ( NS_UpperLetter + 1 ) ,
	NS_Ordinal	= ( NS_LowerLetter + 1 ) ,
	NS_CardinalText	= ( NS_Ordinal + 1 ) ,
	NS_OrdinalText	= ( NS_CardinalText + 1 ) ,
	NS_Hex	= ( NS_OrdinalText + 1 ) ,
	NS_Chicago	= ( NS_Hex + 1 ) ,
	NS_IdeographDigital	= ( NS_Chicago + 1 ) ,
	NS_JapaneseCounting	= ( NS_IdeographDigital + 1 ) ,
	NS_Aiueo	= ( NS_JapaneseCounting + 1 ) ,
	NS_Iroha	= ( NS_Aiueo + 1 ) ,
	NS_DecimalFullWidth	= ( NS_Iroha + 1 ) ,
	NS_DecimalHalfWidth	= ( NS_DecimalFullWidth + 1 ) ,
	NS_JapaneseLegal	= ( NS_DecimalHalfWidth + 1 ) ,
	NS_JapaneseDigitalTenThousand	= ( NS_JapaneseLegal + 1 ) ,
	NS_DecimalEnclosedCircle	= ( NS_JapaneseDigitalTenThousand + 1 ) ,
	NS_DecimalFullWidth2	= ( NS_DecimalEnclosedCircle + 1 ) ,
	NS_AiueoFullWidth	= ( NS_DecimalFullWidth2 + 1 ) ,
	NS_IrohaFullWidth	= ( NS_AiueoFullWidth + 1 ) ,
	NS_DecimalZero	= ( NS_IrohaFullWidth + 1 ) ,
	NS_Bullet	= ( NS_DecimalZero + 1 ) ,
	NS_Ganada	= ( NS_Bullet + 1 ) ,
	NS_Chosung	= ( NS_Ganada + 1 ) ,
	NS_DecimalEnclosedFullstop	= ( NS_Chosung + 1 ) ,
	NS_DecimalEnclosedParen	= ( NS_DecimalEnclosedFullstop + 1 ) ,
	NS_DecimalEnclosedCircleChinese	= ( NS_DecimalEnclosedParen + 1 ) ,
	NS_IdeographEnclosedCircle	= ( NS_DecimalEnclosedCircleChinese + 1 ) ,
	NS_IdeographTraditional	= ( NS_IdeographEnclosedCircle + 1 ) ,
	NS_IdeographZodiac	= ( NS_IdeographTraditional + 1 ) ,
	NS_IdeographZodiacTraditional	= ( NS_IdeographZodiac + 1 ) ,
	NS_TaiwaneseCounting	= ( NS_IdeographZodiacTraditional + 1 ) ,
	NS_IdeographLegalTraditional	= ( NS_TaiwaneseCounting + 1 ) ,
	NS_TaiwaneseCountingThousand	= ( NS_IdeographLegalTraditional + 1 ) ,
	NS_TaiwaneseDigital	= ( NS_TaiwaneseCountingThousand + 1 ) ,
	NS_ChineseCounting	= ( NS_TaiwaneseDigital + 1 ) ,
	NS_ChineseLegalSimplified	= ( NS_ChineseCounting + 1 ) ,
	NS_ChineseCountingThousand	= ( NS_ChineseLegalSimplified + 1 ) ,
	NS_ApplicationDefined	= ( NS_ChineseCountingThousand + 1 ) ,
	NS_KoreanDigital	= ( NS_ApplicationDefined + 1 ) ,
	NS_KoreanCounting	= ( NS_KoreanDigital + 1 ) ,
	NS_KoreanLegal	= ( NS_KoreanCounting + 1 ) ,
	NS_KoreanDigital2	= ( NS_KoreanLegal + 1 ) ,
	NS_Hebrew1	= ( NS_KoreanDigital2 + 1 ) ,
	NS_ArabicAlpha	= ( NS_Hebrew1 + 1 ) ,
	NS_Hebrew2	= ( NS_ArabicAlpha + 1 ) ,
	NS_ArabicAbjad	= ( NS_Hebrew2 + 1 ) ,
	NS_HindiVowels	= ( NS_ArabicAbjad + 1 ) ,
	NS_HindiConsonants	= ( NS_HindiVowels + 1 ) ,
	NS_HindiNumbers	= ( NS_HindiConsonants + 1 ) ,
	NS_HindiCounting	= ( NS_HindiNumbers + 1 ) ,
	NS_ThaiLetters	= ( NS_HindiCounting + 1 ) ,
	NS_ThaiNumbers	= ( NS_ThaiLetters + 1 ) ,
	NS_ThaiCounting	= ( NS_ThaiNumbers + 1 ) ,
	NS_VietnameseCounting	= ( NS_ThaiCounting + 1 ) ,
	NS_NumberInDash	= ( NS_VietnameseCounting + 1 ) ,
	NS_RussianLower	= ( NS_NumberInDash + 1 ) ,
	NS_RussianUpper	= ( NS_RussianLower + 1 ) 
    } 	NumberingStyleEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum StyleParamsEnum
    {	SF_Bold	= 1,
	SF_Italic	= 2,
	SF_Underlined	= 4,
	SF_Strikeout	= 8,
	SF_SmallCaps	= 16,
	SF_FontSize	= 0x10000,
	SF_FontName	= 0x20000,
	SF_Scaling	= 0x40000,
	SF_Spacing	= 0x80000,
	SF_Color	= 0x100000,
	SF_BackgroundColor	= 0x200000,
	SF_BaseLineRise	= 0x400000
    } 	StyleParamsEnum;






#define	dispid_Pages_PageRemoved	( 1 )

#define	dispid_Pages_PageAdded	( 2 )

#define	dispid_Pages_PagesRenumbered	( 3 )











typedef /* [helpstring][helpcontext][v1_enum] */ 
enum PageProcessingStageEnum
    {	PPS_Open	= 0,
	PPS_Analysis	= ( PPS_Open + 1 ) ,
	PPS_Recognition	= ( PPS_Analysis + 1 ) ,
	PPS_Synthesis	= ( PPS_Recognition + 1 ) ,
	PPS_Export	= ( PPS_Synthesis + 1 ) ,
	PPS_UserUpdate	= ( PPS_Export + 1 ) 
    } 	PageProcessingStageEnum;

#define	dispid_Page_OnProgress	( 1 )

#define	dispid_Page_OnRecognizerTip	( 2 )

#define	dispid_Page_OnRegionProcessed	( 3 )

#define	dispid_Page_OnPageProcessed	( 4 )










typedef /* [helpstring][helpcontext][v1_enum] */ 
enum PageFlushingPolicyEnum
    {	PFP_KeepInMemory	= 0,
	PFP_FlushToDisk	= ( PFP_KeepInMemory + 1 ) ,
	PFP_Auto	= ( PFP_FlushToDisk + 1 ) 
    } 	PageFlushingPolicyEnum;

#define	dispid_Document_OnProgress	( 1 )

#define	dispid_Document_OnRecognizerTip	( 2 )

#define	dispid_Document_OnPageProcessed	( 3 )



typedef /* [helpstring][helpcontext][v1_enum] */ 
enum LicenseCounterTypeEnum
    {	LCT_Pages	= 0,
	LCT_Characters	= ( LCT_Pages + 1 ) ,
	LCT_FineReaderXIXPages	= ( LCT_Characters + 1 ) ,
	LCT_FineReaderXIXCharacters	= ( LCT_FineReaderXIXPages + 1 ) 
    } 	LicenseCounterTypeEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum VolumeRefreshingPeriodEnum
    {	VRP_Day	= 0,
	VRP_Week	= ( VRP_Day + 1 ) ,
	VRP_Month	= ( VRP_Week + 1 ) ,
	VRP_Quarter	= ( VRP_Month + 1 ) ,
	VRP_HalfYear	= ( VRP_Quarter + 1 ) ,
	VRP_Year	= ( VRP_HalfYear + 1 ) ,
	VRP_Infinite	= ( VRP_Year + 1 ) 
    } 	VolumeRefreshingPeriodEnum;




typedef /* [helpstring][helpcontext][v1_enum] */ 
enum FREngineModuleEnum
    {	FREM_ImageSupport	= 0,
	FREM_Export	= ( FREM_ImageSupport + 1 ) ,
	FREM_DocumentAnalyzer	= ( FREM_Export + 1 ) ,
	FREM_Recognizer	= ( FREM_DocumentAnalyzer + 1 ) ,
	FREM_RecognizerHP	= ( FREM_Recognizer + 1 ) ,
	FREM_PDF	= ( FREM_RecognizerHP + 1 ) ,
	FREM_FREngineProcessor	= ( FREM_PDF + 1 ) ,
	FREM_ChineseTraditionalPatterns	= ( FREM_FREngineProcessor + 1 ) ,
	FREM_ChineseSimplifiedPatterns	= ( FREM_ChineseTraditionalPatterns + 1 ) ,
	FREM_JapanesePatterns	= ( FREM_ChineseSimplifiedPatterns + 1 ) ,
	FREM_KoreanPatterns	= ( FREM_JapanesePatterns + 1 ) ,
	FREM_EuropeanPatterns	= ( FREM_KoreanPatterns + 1 ) 
    } 	FREngineModuleEnum;

typedef /* [helpstring][helpcontext][v1_enum] */ 
enum MultiProcessingModeEnum
    {	MPM_Sequential	= 0,
	MPM_Auto	= ( MPM_Sequential + 1 ) ,
	MPM_Parallel	= ( MPM_Auto + 1 ) 
    } 	MultiProcessingModeEnum;



EXTERN_C const IID LIBID_FREngine;

#ifndef __IText_INTERFACE_DEFINED__
#define __IText_INTERFACE_DEFINED__

/* interface IText */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IText;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001012-0000-1056-976E-008048D53AE3")
    IText : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;

		 virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsMirrored( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsMirrored( 
            /* [in] */ VARIANT_BOOL Value) = 0;        
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsInverted( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsInverted( 
            /* [in] */ VARIANT_BOOL Value) = 0;

		virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsPlain( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsPlain( 
            /* [in] */ VARIANT_BOOL Value) = 0;  
		
		 virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Paragraphs( 
            /* [retval][out] */ IParagraphs **Result) = 0;

		 virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BackgroundColor(long *Result) = 0;

		virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE put_BackgroundColor(long Color) = 0;

        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TextOrientation( 
            /* [retval][out] */ ITextOrientation **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TextOrientation( 
            /* [in] */ ITextOrientation *Value) = 0;
        
        //virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TextRole( 
        //    /* [retval][out] */ TextRoleEnum *Result) = 0;
        //
        //virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TextRole( 
        //    /* [in] */ TextRoleEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AppendEmptyParagraph( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ long FromParagraph,
            /* [in] */ long FromPos,
            /* [in] */ long ToParagraph,
            /* [in] */ long ToPos) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveAll( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetRange( 
            /* [in] */ long FromParagraph,
            /* [in] */ long FromPos,
            /* [in] */ long ToParagraph,
            /* [in] */ long ToPos,
            /* [retval][out] */ IText **Result) = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DiscardRectangles_donotuse() = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DiscardExtendedRecAttributes_donotuse() = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IText *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IText * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IText * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IText * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IText * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IText * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IText * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IText * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IText * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Paragraphs )( 
            IText * This,
            /* [retval][out] */ IParagraphs **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsInverted )( 
            IText * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsInverted )( 
            IText * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TextOrientation )( 
            IText * This,
            /* [retval][out] */ ITextOrientation **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TextOrientation )( 
            IText * This,
            /* [in] */ ITextOrientation *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TextRole )( 
            IText * This,
            /* [retval][out] */ TextRoleEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TextRole )( 
            IText * This,
            /* [in] */ TextRoleEnum Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AppendEmptyParagraph )( 
            IText * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IText * This,
            /* [in] */ long FromParagraph,
            /* [in] */ long FromPos,
            /* [in] */ long ToParagraph,
            /* [in] */ long ToPos);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAll )( 
            IText * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetRange )( 
            IText * This,
            /* [in] */ long FromParagraph,
            /* [in] */ long FromPos,
            /* [in] */ long ToParagraph,
            /* [in] */ long ToPos,
            /* [retval][out] */ IText **Result);
        
        END_INTERFACE
    } ITextVtbl;

    interface IText
    {
        CONST_VTBL struct ITextVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IText_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IText_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IText_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IText_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IText_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IText_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IText_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IText_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IText_get_Paragraphs(This,Result)	\
    ( (This)->lpVtbl -> get_Paragraphs(This,Result) ) 

#define IText_get_IsInverted(This,Result)	\
    ( (This)->lpVtbl -> get_IsInverted(This,Result) ) 

#define IText_put_IsInverted(This,Value)	\
    ( (This)->lpVtbl -> put_IsInverted(This,Value) ) 

#define IText_get_TextOrientation(This,Result)	\
    ( (This)->lpVtbl -> get_TextOrientation(This,Result) ) 

#define IText_put_TextOrientation(This,Value)	\
    ( (This)->lpVtbl -> put_TextOrientation(This,Value) ) 

#define IText_get_TextRole(This,Result)	\
    ( (This)->lpVtbl -> get_TextRole(This,Result) ) 

#define IText_put_TextRole(This,Value)	\
    ( (This)->lpVtbl -> put_TextRole(This,Value) ) 

#define IText_AppendEmptyParagraph(This)	\
    ( (This)->lpVtbl -> AppendEmptyParagraph(This) ) 

#define IText_Remove(This,FromParagraph,FromPos,ToParagraph,ToPos)	\
    ( (This)->lpVtbl -> Remove(This,FromParagraph,FromPos,ToParagraph,ToPos) ) 

#define IText_RemoveAll(This)	\
    ( (This)->lpVtbl -> RemoveAll(This) ) 

#define IText_GetRange(This,FromParagraph,FromPos,ToParagraph,ToPos,Result)	\
    ( (This)->lpVtbl -> GetRange(This,FromParagraph,FromPos,ToParagraph,ToPos,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IText_INTERFACE_DEFINED__ */


#ifndef __IHyperlink_INTERFACE_DEFINED__
#define __IHyperlink_INTERFACE_DEFINED__

/* interface IHyperlink */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IHyperlink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001067-0000-1056-976E-008048D53AE3")
    IHyperlink : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Target( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Target( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Scheme( 
            /* [retval][out] */ HyperlinkSchemeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Scheme( 
            /* [in] */ HyperlinkSchemeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ParseTarget( 
            /* [retval][out] */ HyperlinkSchemeEnum *Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHyperlinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHyperlink * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHyperlink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHyperlink * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHyperlink * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHyperlink * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHyperlink * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHyperlink * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IHyperlink * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Target )( 
            IHyperlink * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Target )( 
            IHyperlink * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Scheme )( 
            IHyperlink * This,
            /* [retval][out] */ HyperlinkSchemeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Scheme )( 
            IHyperlink * This,
            /* [in] */ HyperlinkSchemeEnum Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ParseTarget )( 
            IHyperlink * This,
            /* [retval][out] */ HyperlinkSchemeEnum *Value);
        
        END_INTERFACE
    } IHyperlinkVtbl;

    interface IHyperlink
    {
        CONST_VTBL struct IHyperlinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHyperlink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHyperlink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHyperlink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHyperlink_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IHyperlink_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IHyperlink_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IHyperlink_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IHyperlink_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IHyperlink_get_Target(This,Result)	\
    ( (This)->lpVtbl -> get_Target(This,Result) ) 

#define IHyperlink_put_Target(This,Value)	\
    ( (This)->lpVtbl -> put_Target(This,Value) ) 

#define IHyperlink_get_Scheme(This,Result)	\
    ( (This)->lpVtbl -> get_Scheme(This,Result) ) 

#define IHyperlink_put_Scheme(This,Value)	\
    ( (This)->lpVtbl -> put_Scheme(This,Value) ) 

#define IHyperlink_ParseTarget(This,Value)	\
    ( (This)->lpVtbl -> ParseTarget(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHyperlink_INTERFACE_DEFINED__ */


#ifndef __IPageElement_INTERFACE_DEFINED__
#define __IPageElement_INTERFACE_DEFINED__

/* interface IPageElement */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IPageElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000109F-0000-1056-976E-008048D53AE3")
    IPageElement : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ PageElementTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetAsText( 
            /* [retval][out] */ IText **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetAsTable( 
            /* [retval][out] */ ITextTable **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetAsPicture( 
            /* [retval][out] */ ITextPicture **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetAsBarcode( 
            /* [retval][out] */ ITextBarcode **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Page( 
            /* [retval][out] */ IFRPage **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Region( 
            /* [retval][out] */ IRegion **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Block( 
            /* [retval][out] */ IBlock **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Id( 
            /* [retval][out] */ BSTR *Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPageElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPageElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPageElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPageElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPageElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPageElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPageElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPageElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPageElement * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IPageElement * This,
            /* [retval][out] */ PageElementTypeEnum *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsText )( 
            IPageElement * This,
            /* [retval][out] */ IText **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsTable )( 
            IPageElement * This,
            /* [retval][out] */ ITextTable **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsPicture )( 
            IPageElement * This,
            /* [retval][out] */ ITextPicture **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsBarcode )( 
            IPageElement * This,
            /* [retval][out] */ ITextBarcode **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Page )( 
            IPageElement * This,
            /* [retval][out] */ IFRPage **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Region )( 
            IPageElement * This,
            /* [retval][out] */ IRegion **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Block )( 
            IPageElement * This,
            /* [retval][out] */ IBlock **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            IPageElement * This,
            /* [retval][out] */ BSTR *Result);
        
        END_INTERFACE
    } IPageElementVtbl;

    interface IPageElement
    {
        CONST_VTBL struct IPageElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPageElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPageElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPageElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPageElement_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPageElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPageElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPageElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPageElement_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IPageElement_get_Type(This,Result)	\
    ( (This)->lpVtbl -> get_Type(This,Result) ) 

#define IPageElement_GetAsText(This,Result)	\
    ( (This)->lpVtbl -> GetAsText(This,Result) ) 

#define IPageElement_GetAsTable(This,Result)	\
    ( (This)->lpVtbl -> GetAsTable(This,Result) ) 

#define IPageElement_GetAsPicture(This,Result)	\
    ( (This)->lpVtbl -> GetAsPicture(This,Result) ) 

#define IPageElement_GetAsBarcode(This,Result)	\
    ( (This)->lpVtbl -> GetAsBarcode(This,Result) ) 

#define IPageElement_get_Page(This,Result)	\
    ( (This)->lpVtbl -> get_Page(This,Result) ) 

#define IPageElement_get_Region(This,Result)	\
    ( (This)->lpVtbl -> get_Region(This,Result) ) 

#define IPageElement_get_Block(This,Result)	\
    ( (This)->lpVtbl -> get_Block(This,Result) ) 

#define IPageElement_get_Id(This,Result)	\
    ( (This)->lpVtbl -> get_Id(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPageElement_INTERFACE_DEFINED__ */


#ifndef __ICharacterRecognitionVariants_INTERFACE_DEFINED__
#define __ICharacterRecognitionVariants_INTERFACE_DEFINED__

/* interface ICharacterRecognitionVariants */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ICharacterRecognitionVariants;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000106B-0000-1056-976E-008048D53AE3")
    ICharacterRecognitionVariants : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ ICharacterRecognitionVariant **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ ICharacterRecognitionVariant **Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICharacterRecognitionVariantsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICharacterRecognitionVariants * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICharacterRecognitionVariants * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICharacterRecognitionVariants * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ICharacterRecognitionVariants * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ICharacterRecognitionVariants * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ICharacterRecognitionVariants * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ICharacterRecognitionVariants * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            ICharacterRecognitionVariants * This,
            /* [in] */ long Index,
            /* [retval][out] */ ICharacterRecognitionVariant **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ICharacterRecognitionVariants * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ICharacterRecognitionVariants * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ICharacterRecognitionVariants * This,
            /* [in] */ long Index,
            /* [retval][out] */ ICharacterRecognitionVariant **Result);
        
        END_INTERFACE
    } ICharacterRecognitionVariantsVtbl;

    interface ICharacterRecognitionVariants
    {
        CONST_VTBL struct ICharacterRecognitionVariantsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICharacterRecognitionVariants_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICharacterRecognitionVariants_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICharacterRecognitionVariants_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICharacterRecognitionVariants_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ICharacterRecognitionVariants_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ICharacterRecognitionVariants_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ICharacterRecognitionVariants_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ICharacterRecognitionVariants_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define ICharacterRecognitionVariants_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ICharacterRecognitionVariants_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define ICharacterRecognitionVariants_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICharacterRecognitionVariants_INTERFACE_DEFINED__ */


#ifndef __ICharacterRecognitionVariant_INTERFACE_DEFINED__
#define __ICharacterRecognitionVariant_INTERFACE_DEFINED__

/* interface ICharacterRecognitionVariant */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ICharacterRecognitionVariant;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000106C-0000-1056-976E-008048D53AE3")
    ICharacterRecognitionVariant : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Character( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CharConfidence( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SerifProbability( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsSubscript( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsSuperscript( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_OldCharConfidence( 
            /* [retval][out] */ long *Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICharacterRecognitionVariantVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICharacterRecognitionVariant * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICharacterRecognitionVariant * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICharacterRecognitionVariant * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ICharacterRecognitionVariant * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ICharacterRecognitionVariant * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ICharacterRecognitionVariant * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ICharacterRecognitionVariant * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ICharacterRecognitionVariant * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Character )( 
            ICharacterRecognitionVariant * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CharConfidence )( 
            ICharacterRecognitionVariant * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SerifProbability )( 
            ICharacterRecognitionVariant * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsSubscript )( 
            ICharacterRecognitionVariant * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsSuperscript )( 
            ICharacterRecognitionVariant * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_OldCharConfidence )( 
            ICharacterRecognitionVariant * This,
            /* [retval][out] */ long *Result);
        
        END_INTERFACE
    } ICharacterRecognitionVariantVtbl;

    interface ICharacterRecognitionVariant
    {
        CONST_VTBL struct ICharacterRecognitionVariantVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICharacterRecognitionVariant_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICharacterRecognitionVariant_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICharacterRecognitionVariant_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICharacterRecognitionVariant_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ICharacterRecognitionVariant_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ICharacterRecognitionVariant_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ICharacterRecognitionVariant_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ICharacterRecognitionVariant_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ICharacterRecognitionVariant_get_Character(This,Result)	\
    ( (This)->lpVtbl -> get_Character(This,Result) ) 

#define ICharacterRecognitionVariant_get_CharConfidence(This,Result)	\
    ( (This)->lpVtbl -> get_CharConfidence(This,Result) ) 

#define ICharacterRecognitionVariant_get_SerifProbability(This,Result)	\
    ( (This)->lpVtbl -> get_SerifProbability(This,Result) ) 

#define ICharacterRecognitionVariant_get_IsSubscript(This,Result)	\
    ( (This)->lpVtbl -> get_IsSubscript(This,Result) ) 

#define ICharacterRecognitionVariant_get_IsSuperscript(This,Result)	\
    ( (This)->lpVtbl -> get_IsSuperscript(This,Result) ) 

#define ICharacterRecognitionVariant_get_OldCharConfidence(This,Result)	\
    ( (This)->lpVtbl -> get_OldCharConfidence(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICharacterRecognitionVariant_INTERFACE_DEFINED__ */


#ifndef __IWordRecognitionVariants_INTERFACE_DEFINED__
#define __IWordRecognitionVariants_INTERFACE_DEFINED__

/* interface IWordRecognitionVariants */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWordRecognitionVariants;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000106A-0000-1056-976E-008048D53AE3")
    IWordRecognitionVariants : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ IWordRecognitionVariant **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ IWordRecognitionVariant **Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWordRecognitionVariantsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWordRecognitionVariants * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWordRecognitionVariants * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWordRecognitionVariants * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWordRecognitionVariants * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWordRecognitionVariants * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWordRecognitionVariants * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWordRecognitionVariants * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            IWordRecognitionVariants * This,
            /* [in] */ long Index,
            /* [retval][out] */ IWordRecognitionVariant **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IWordRecognitionVariants * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IWordRecognitionVariants * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IWordRecognitionVariants * This,
            /* [in] */ long Index,
            /* [retval][out] */ IWordRecognitionVariant **Result);
        
        END_INTERFACE
    } IWordRecognitionVariantsVtbl;

    interface IWordRecognitionVariants
    {
        CONST_VTBL struct IWordRecognitionVariantsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWordRecognitionVariants_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWordRecognitionVariants_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWordRecognitionVariants_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWordRecognitionVariants_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWordRecognitionVariants_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWordRecognitionVariants_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWordRecognitionVariants_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWordRecognitionVariants_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define IWordRecognitionVariants_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IWordRecognitionVariants_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define IWordRecognitionVariants_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWordRecognitionVariants_INTERFACE_DEFINED__ */


#ifndef __IWord_INTERFACE_DEFINED__
#define __IWord_INTERFACE_DEFINED__

/* interface IWord */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWord;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000107C-0000-1056-976E-008048D53AE3")
    IWord : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetRecognitionVariants( 
            /* [retval][out] */ IWordRecognitionVariants **Result) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FirstSymbolPosition( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ModelType( 
            /* [retval][out] */ WordModelTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsWordFromDictionary( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWordVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWord * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWord * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWord * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWord * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWord * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWord * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWord * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IWord * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetRecognitionVariants )( 
            IWord * This,
            /* [retval][out] */ IWordRecognitionVariants **Result);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            IWord * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FirstSymbolPosition )( 
            IWord * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ModelType )( 
            IWord * This,
            /* [retval][out] */ WordModelTypeEnum *Result);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsWordFromDictionary )( 
            IWord * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        END_INTERFACE
    } IWordVtbl;

    interface IWord
    {
        CONST_VTBL struct IWordVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWord_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWord_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWord_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWord_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWord_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWord_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWord_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWord_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IWord_GetRecognitionVariants(This,Result)	\
    ( (This)->lpVtbl -> GetRecognitionVariants(This,Result) ) 

#define IWord_get_Text(This,Result)	\
    ( (This)->lpVtbl -> get_Text(This,Result) ) 

#define IWord_get_FirstSymbolPosition(This,Result)	\
    ( (This)->lpVtbl -> get_FirstSymbolPosition(This,Result) ) 

#define IWord_get_ModelType(This,Result)	\
    ( (This)->lpVtbl -> get_ModelType(This,Result) ) 

#define IWord_get_IsWordFromDictionary(This,Result)	\
    ( (This)->lpVtbl -> get_IsWordFromDictionary(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWord_INTERFACE_DEFINED__ */


#ifndef __IWords_INTERFACE_DEFINED__
#define __IWords_INTERFACE_DEFINED__

/* interface IWords */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWords;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000107D-0000-1056-976E-008048D53AE3")
    IWords : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ IWord **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ IWord **Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWordsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWords * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWords * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWords * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWords * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWords * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWords * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWords * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            IWords * This,
            /* [in] */ long Index,
            /* [retval][out] */ IWord **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IWords * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IWords * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IWords * This,
            /* [in] */ long Index,
            /* [retval][out] */ IWord **Result);
        
        END_INTERFACE
    } IWordsVtbl;

    interface IWords
    {
        CONST_VTBL struct IWordsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWords_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWords_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWords_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWords_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWords_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWords_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWords_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWords_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define IWords_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IWords_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define IWords_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWords_INTERFACE_DEFINED__ */


#ifndef __ITextOrientation_INTERFACE_DEFINED__
#define __ITextOrientation_INTERFACE_DEFINED__

/* interface ITextOrientation */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ITextOrientation;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010B6-0000-1056-976E-008048D53AE3")
    ITextOrientation : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RotationType( 
            /* [retval][out] */ RotationTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RotationType( 
            /* [in] */ RotationTypeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsVerticallyMirrored( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsVerticallyMirrored( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IsEqualTo( 
            /* [in] */ ITextOrientation *Orientation,
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadingType( 
            /* [retval][out] */ ReadingTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadingType( 
            /* [in] */ ReadingTypeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ ITextOrientation *From) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITextOrientationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITextOrientation * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITextOrientation * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITextOrientation * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITextOrientation * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITextOrientation * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITextOrientation * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITextOrientation * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ITextOrientation * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RotationType )( 
            ITextOrientation * This,
            /* [retval][out] */ RotationTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RotationType )( 
            ITextOrientation * This,
            /* [in] */ RotationTypeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsVerticallyMirrored )( 
            ITextOrientation * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsVerticallyMirrored )( 
            ITextOrientation * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqualTo )( 
            ITextOrientation * This,
            /* [in] */ ITextOrientation *Orientation,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadingType )( 
            ITextOrientation * This,
            /* [retval][out] */ ReadingTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadingType )( 
            ITextOrientation * This,
            /* [in] */ ReadingTypeEnum Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            ITextOrientation * This,
            /* [in] */ ITextOrientation *From);
        
        END_INTERFACE
    } ITextOrientationVtbl;

    interface ITextOrientation
    {
        CONST_VTBL struct ITextOrientationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITextOrientation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITextOrientation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITextOrientation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITextOrientation_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITextOrientation_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITextOrientation_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITextOrientation_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITextOrientation_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ITextOrientation_get_RotationType(This,Result)	\
    ( (This)->lpVtbl -> get_RotationType(This,Result) ) 

#define ITextOrientation_put_RotationType(This,Value)	\
    ( (This)->lpVtbl -> put_RotationType(This,Value) ) 

#define ITextOrientation_get_IsVerticallyMirrored(This,Result)	\
    ( (This)->lpVtbl -> get_IsVerticallyMirrored(This,Result) ) 

#define ITextOrientation_put_IsVerticallyMirrored(This,Value)	\
    ( (This)->lpVtbl -> put_IsVerticallyMirrored(This,Value) ) 

#define ITextOrientation_IsEqualTo(This,Orientation,Result)	\
    ( (This)->lpVtbl -> IsEqualTo(This,Orientation,Result) ) 

#define ITextOrientation_get_ReadingType(This,Result)	\
    ( (This)->lpVtbl -> get_ReadingType(This,Result) ) 

#define ITextOrientation_put_ReadingType(This,Value)	\
    ( (This)->lpVtbl -> put_ReadingType(This,Value) ) 

#define ITextOrientation_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITextOrientation_INTERFACE_DEFINED__ */


#ifndef __IFRPage_INTERFACE_DEFINED__
#define __IFRPage_INTERFACE_DEFINED__

/* interface IFRPage */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IFRPage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001081-0000-1056-976E-008048D53AE3")
    IFRPage : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Analyze( 
            /* [defaultvalue][in] */ IPageProcessingParams *PageProcessingParams = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Recognize( 
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParamsForPage = 0,
            /* [defaultvalue][in] */ IObjectsExtractionParams *ExtractionParams = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RecognizeBlocks( 
            /* [in] */ ILongsCollection *BlockIndices,
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParamsForPage = 0,
            /* [defaultvalue][in] */ IObjectsExtractionParams *ExtractionParams = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AnalyzeAndRecognize( 
            /* [defaultvalue][in] */ IPageProcessingParams *PageProcessingParams = 0,
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParamsForPage = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AnalyzeRegion( 
            /* [in] */ IRegion *Region,
            /* [defaultvalue][in] */ IPageProcessingParams *ProcessingParams = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Export( 
            /* [in] */ BSTR ExportFileName,
            /* [in] */ FileExportFormatEnum Format,
            /* [defaultvalue][in] */ IUnknown *ExportParams = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ImageDocument( 
            /* [retval][out] */ IImageDocument **ImageDocument) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Layout( 
            /* [retval][out] */ ILayout **Layout) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Layout( 
            /* [in] */ ILayout *Layout) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Document( 
            /* [retval][out] */ IFRDocument **Document) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Flush( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UndoSupport( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_UndoSupport( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Undo( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Redo( void) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CanUndo( 
            /* [retval][out] */ VARIANT_BOOL *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CanRedo( 
            /* [retval][out] */ VARIANT_BOOL *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Update( void) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PageStructure( 
            /* [retval][out] */ IPageStructure **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CleanRecognizerSession( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AnalyzeTable( 
            /* [in] */ long BlockIndex,
            /* [defaultvalue][in] */ IPageProcessingParams *ProcessingParams = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveGeometricalDistortions( 
            /* [defaultvalue][in] */ IObjectsExtractionParams *ExtractionParams = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ExtractBarcodes( 
            /* [defaultvalue][in] */ IBarcodeParams *BarcodeParams = 0,
            /* [defaultvalue][in] */ IObjectsExtractionParams *ExtractionParams = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DetectOrientation( 
            /* [defaultvalue][in] */ IOrientationDetectionParams *OrientationParams,
            /* [defaultvalue][in] */ IObjectsExtractionParams *ExtractionParams,
            /* [defaultvalue][in] */ IRecognizerParams *RecognizerParams,
            /* [retval][out] */ ITextOrientation **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindPageSplitPosition( 
            /* [in] */ IObjectsExtractionParams *ExtractionParams,
            /* [out] */ PageSplitDirectionEnum *SplitDirection,
            /* [out] */ long *startSplitPosition,
            /* [out] */ long *endSplitPosition) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PlainText( 
            /* [retval][out] */ IPlainText **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SourceImagePath( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Synthesize( 
            /* [defaultvalue][in] */ ISynthesisParamsForDocument *SynthesisParamsForDocument = 0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFRPageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IFRPage * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IFRPage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IFRPage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IFRPage * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IFRPage * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IFRPage * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IFRPage * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IFRPage * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Analyze )( 
            IFRPage * This,
            /* [defaultvalue][in] */ IPageProcessingParams *PageProcessingParams);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Recognize )( 
            IFRPage * This,
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParamsForPage,
            /* [defaultvalue][in] */ IObjectsExtractionParams *ExtractionParams);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RecognizeBlocks )( 
            IFRPage * This,
            /* [in] */ ILongsCollection *BlockIndices,
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParamsForPage,
            /* [defaultvalue][in] */ IObjectsExtractionParams *ExtractionParams);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AnalyzeAndRecognize )( 
            IFRPage * This,
            /* [defaultvalue][in] */ IPageProcessingParams *PageProcessingParams,
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParamsForPage);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AnalyzeRegion )( 
            IFRPage * This,
            /* [in] */ IRegion *Region,
            /* [defaultvalue][in] */ IPageProcessingParams *ProcessingParams);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Export )( 
            IFRPage * This,
            /* [in] */ BSTR ExportFileName,
            /* [in] */ FileExportFormatEnum Format,
            /* [defaultvalue][in] */ IUnknown *ExportParams);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ImageDocument )( 
            IFRPage * This,
            /* [retval][out] */ IImageDocument **ImageDocument);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Layout )( 
            IFRPage * This,
            /* [retval][out] */ ILayout **Layout);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Layout )( 
            IFRPage * This,
            /* [in] */ ILayout *Layout);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IFRPage * This,
            /* [retval][out] */ IFRDocument **Document);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Flush )( 
            IFRPage * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UndoSupport )( 
            IFRPage * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UndoSupport )( 
            IFRPage * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Undo )( 
            IFRPage * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Redo )( 
            IFRPage * This);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CanUndo )( 
            IFRPage * This,
            /* [retval][out] */ VARIANT_BOOL *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CanRedo )( 
            IFRPage * This,
            /* [retval][out] */ VARIANT_BOOL *Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            IFRPage * This);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PageStructure )( 
            IFRPage * This,
            /* [retval][out] */ IPageStructure **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CleanRecognizerSession )( 
            IFRPage * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AnalyzeTable )( 
            IFRPage * This,
            /* [in] */ long BlockIndex,
            /* [defaultvalue][in] */ IPageProcessingParams *ProcessingParams);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveGeometricalDistortions )( 
            IFRPage * This,
            /* [defaultvalue][in] */ IObjectsExtractionParams *ExtractionParams);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ExtractBarcodes )( 
            IFRPage * This,
            /* [defaultvalue][in] */ IBarcodeParams *BarcodeParams,
            /* [defaultvalue][in] */ IObjectsExtractionParams *ExtractionParams);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DetectOrientation )( 
            IFRPage * This,
            /* [defaultvalue][in] */ IOrientationDetectionParams *OrientationParams,
            /* [defaultvalue][in] */ IObjectsExtractionParams *ExtractionParams,
            /* [defaultvalue][in] */ IRecognizerParams *RecognizerParams,
            /* [retval][out] */ ITextOrientation **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindPageSplitPosition )( 
            IFRPage * This,
            /* [in] */ IObjectsExtractionParams *ExtractionParams,
            /* [out] */ PageSplitDirectionEnum *SplitDirection,
            /* [out] */ long *startSplitPosition,
            /* [out] */ long *endSplitPosition);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlainText )( 
            IFRPage * This,
            /* [retval][out] */ IPlainText **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceImagePath )( 
            IFRPage * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Synthesize )( 
            IFRPage * This,
            /* [defaultvalue][in] */ ISynthesisParamsForDocument *SynthesisParamsForDocument);
        
        END_INTERFACE
    } IFRPageVtbl;

    interface IFRPage
    {
        CONST_VTBL struct IFRPageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFRPage_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IFRPage_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IFRPage_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IFRPage_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IFRPage_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IFRPage_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IFRPage_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IFRPage_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IFRPage_Analyze(This,PageProcessingParams)	\
    ( (This)->lpVtbl -> Analyze(This,PageProcessingParams) ) 

#define IFRPage_Recognize(This,SynthesisParamsForPage,ExtractionParams)	\
    ( (This)->lpVtbl -> Recognize(This,SynthesisParamsForPage,ExtractionParams) ) 

#define IFRPage_RecognizeBlocks(This,BlockIndices,SynthesisParamsForPage,ExtractionParams)	\
    ( (This)->lpVtbl -> RecognizeBlocks(This,BlockIndices,SynthesisParamsForPage,ExtractionParams) ) 

#define IFRPage_AnalyzeAndRecognize(This,PageProcessingParams,SynthesisParamsForPage)	\
    ( (This)->lpVtbl -> AnalyzeAndRecognize(This,PageProcessingParams,SynthesisParamsForPage) ) 

#define IFRPage_AnalyzeRegion(This,Region,ProcessingParams)	\
    ( (This)->lpVtbl -> AnalyzeRegion(This,Region,ProcessingParams) ) 

#define IFRPage_Export(This,ExportFileName,Format,ExportParams)	\
    ( (This)->lpVtbl -> Export(This,ExportFileName,Format,ExportParams) ) 

#define IFRPage_get_ImageDocument(This,ImageDocument)	\
    ( (This)->lpVtbl -> get_ImageDocument(This,ImageDocument) ) 

#define IFRPage_get_Layout(This,Layout)	\
    ( (This)->lpVtbl -> get_Layout(This,Layout) ) 

#define IFRPage_put_Layout(This,Layout)	\
    ( (This)->lpVtbl -> put_Layout(This,Layout) ) 

#define IFRPage_get_Document(This,Document)	\
    ( (This)->lpVtbl -> get_Document(This,Document) ) 

#define IFRPage_Flush(This,Result)	\
    ( (This)->lpVtbl -> Flush(This,Result) ) 

#define IFRPage_get_UndoSupport(This,Result)	\
    ( (This)->lpVtbl -> get_UndoSupport(This,Result) ) 

#define IFRPage_put_UndoSupport(This,Value)	\
    ( (This)->lpVtbl -> put_UndoSupport(This,Value) ) 

#define IFRPage_Undo(This)	\
    ( (This)->lpVtbl -> Undo(This) ) 

#define IFRPage_Redo(This)	\
    ( (This)->lpVtbl -> Redo(This) ) 

#define IFRPage_get_CanUndo(This,Value)	\
    ( (This)->lpVtbl -> get_CanUndo(This,Value) ) 

#define IFRPage_get_CanRedo(This,Value)	\
    ( (This)->lpVtbl -> get_CanRedo(This,Value) ) 

#define IFRPage_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IFRPage_get_PageStructure(This,Result)	\
    ( (This)->lpVtbl -> get_PageStructure(This,Result) ) 

#define IFRPage_CleanRecognizerSession(This)	\
    ( (This)->lpVtbl -> CleanRecognizerSession(This) ) 

#define IFRPage_AnalyzeTable(This,BlockIndex,ProcessingParams)	\
    ( (This)->lpVtbl -> AnalyzeTable(This,BlockIndex,ProcessingParams) ) 

#define IFRPage_RemoveGeometricalDistortions(This,ExtractionParams)	\
    ( (This)->lpVtbl -> RemoveGeometricalDistortions(This,ExtractionParams) ) 

#define IFRPage_ExtractBarcodes(This,BarcodeParams,ExtractionParams)	\
    ( (This)->lpVtbl -> ExtractBarcodes(This,BarcodeParams,ExtractionParams) ) 

#define IFRPage_DetectOrientation(This,OrientationParams,ExtractionParams,RecognizerParams,Result)	\
    ( (This)->lpVtbl -> DetectOrientation(This,OrientationParams,ExtractionParams,RecognizerParams,Result) ) 

#define IFRPage_FindPageSplitPosition(This,ExtractionParams,SplitDirection,startSplitPosition,endSplitPosition)	\
    ( (This)->lpVtbl -> FindPageSplitPosition(This,ExtractionParams,SplitDirection,startSplitPosition,endSplitPosition) ) 

#define IFRPage_get_PlainText(This,Result)	\
    ( (This)->lpVtbl -> get_PlainText(This,Result) ) 

#define IFRPage_get_SourceImagePath(This,Result)	\
    ( (This)->lpVtbl -> get_SourceImagePath(This,Result) ) 

#define IFRPage_Synthesize(This,SynthesisParamsForDocument)	\
    ( (This)->lpVtbl -> Synthesize(This,SynthesisParamsForDocument) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IFRPage_INTERFACE_DEFINED__ */


#ifndef __ITextTableCell_INTERFACE_DEFINED__
#define __ITextTableCell_INTERFACE_DEFINED__

/* interface ITextTableCell */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ITextTableCell;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010CB-0000-1056-976E-008048D53AE3")
    ITextTableCell : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_StartColumnNumber( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_StartRowNumber( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EndColumnNumber( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EndRowNumber( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [retval][out] */ IPageElement **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Element( 
            /* [in] */ IPageElement *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_VertAlignment( 
            /* [retval][out] */ TableCellVertAlignmentEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_VertAlignment( 
            /* [in] */ TableCellVertAlignmentEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BackgroundColor( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BackgroundColor( 
            /* [in] */ long Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITextTableCellVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITextTableCell * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITextTableCell * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITextTableCell * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITextTableCell * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITextTableCell * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITextTableCell * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITextTableCell * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ITextTableCell * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StartColumnNumber )( 
            ITextTableCell * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StartRowNumber )( 
            ITextTableCell * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndColumnNumber )( 
            ITextTableCell * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndRowNumber )( 
            ITextTableCell * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            ITextTableCell * This,
            /* [retval][out] */ IPageElement **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Element )( 
            ITextTableCell * This,
            /* [in] */ IPageElement *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VertAlignment )( 
            ITextTableCell * This,
            /* [retval][out] */ TableCellVertAlignmentEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_VertAlignment )( 
            ITextTableCell * This,
            /* [in] */ TableCellVertAlignmentEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundColor )( 
            ITextTableCell * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundColor )( 
            ITextTableCell * This,
            /* [in] */ long Value);
        
        END_INTERFACE
    } ITextTableCellVtbl;

    interface ITextTableCell
    {
        CONST_VTBL struct ITextTableCellVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITextTableCell_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITextTableCell_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITextTableCell_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITextTableCell_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITextTableCell_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITextTableCell_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITextTableCell_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITextTableCell_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ITextTableCell_get_StartColumnNumber(This,Result)	\
    ( (This)->lpVtbl -> get_StartColumnNumber(This,Result) ) 

#define ITextTableCell_get_StartRowNumber(This,Result)	\
    ( (This)->lpVtbl -> get_StartRowNumber(This,Result) ) 

#define ITextTableCell_get_EndColumnNumber(This,Result)	\
    ( (This)->lpVtbl -> get_EndColumnNumber(This,Result) ) 

#define ITextTableCell_get_EndRowNumber(This,Result)	\
    ( (This)->lpVtbl -> get_EndRowNumber(This,Result) ) 

#define ITextTableCell_get_Element(This,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Result) ) 

#define ITextTableCell_put_Element(This,Value)	\
    ( (This)->lpVtbl -> put_Element(This,Value) ) 

#define ITextTableCell_get_VertAlignment(This,Result)	\
    ( (This)->lpVtbl -> get_VertAlignment(This,Result) ) 

#define ITextTableCell_put_VertAlignment(This,Value)	\
    ( (This)->lpVtbl -> put_VertAlignment(This,Value) ) 

#define ITextTableCell_get_BackgroundColor(This,Result)	\
    ( (This)->lpVtbl -> get_BackgroundColor(This,Result) ) 

#define ITextTableCell_put_BackgroundColor(This,Value)	\
    ( (This)->lpVtbl -> put_BackgroundColor(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITextTableCell_INTERFACE_DEFINED__ */


#ifndef __ICaptions_INTERFACE_DEFINED__
#define __ICaptions_INTERFACE_DEFINED__

/* interface ICaptions */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ICaptions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010CD-0000-1056-976E-008048D53AE3")
    ICaptions : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ ICaption **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ ICaption **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateCaption( 
            /* [in] */ CaptionPositionEnum Position,
            /* [in] */ IPageElement *Text,
            /* [retval][out] */ ICaption **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteAll( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICaptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICaptions * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICaptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICaptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ICaptions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ICaptions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ICaptions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ICaptions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            ICaptions * This,
            /* [in] */ long Index,
            /* [retval][out] */ ICaption **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ICaptions * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ICaptions * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ICaptions * This,
            /* [in] */ long Index,
            /* [retval][out] */ ICaption **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateCaption )( 
            ICaptions * This,
            /* [in] */ CaptionPositionEnum Position,
            /* [in] */ IPageElement *Text,
            /* [retval][out] */ ICaption **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteAll )( 
            ICaptions * This);
        
        END_INTERFACE
    } ICaptionsVtbl;

    interface ICaptions
    {
        CONST_VTBL struct ICaptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICaptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICaptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICaptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICaptions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ICaptions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ICaptions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ICaptions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ICaptions_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define ICaptions_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ICaptions_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define ICaptions_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#define ICaptions_CreateCaption(This,Position,Text,Result)	\
    ( (This)->lpVtbl -> CreateCaption(This,Position,Text,Result) ) 

#define ICaptions_DeleteAll(This)	\
    ( (This)->lpVtbl -> DeleteAll(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICaptions_INTERFACE_DEFINED__ */


#ifndef __IFRRectangle_INTERFACE_DEFINED__
#define __IFRRectangle_INTERFACE_DEFINED__

/* interface IFRRectangle */
/* [unique][helpstring][helpcontext][nonextensible][oleautomation][dual][uuid][object] */ 


EXTERN_C const IID IID_IFRRectangle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001085-0000-1056-976E-008048D53AE3")
    IFRRectangle : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetRectangle( 
            /* [in] */ long Left,
            /* [in] */ long Top,
            /* [in] */ long Width,
            /* [in] */ long Height) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IFRRectangle *From) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFRRectangleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IFRRectangle * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IFRRectangle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IFRRectangle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IFRRectangle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IFRRectangle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IFRRectangle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IFRRectangle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            IFRRectangle * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            IFRRectangle * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            IFRRectangle * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            IFRRectangle * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            IFRRectangle * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            IFRRectangle * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            IFRRectangle * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            IFRRectangle * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetRectangle )( 
            IFRRectangle * This,
            /* [in] */ long Left,
            /* [in] */ long Top,
            /* [in] */ long Width,
            /* [in] */ long Height);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IFRRectangle * This,
            /* [in] */ IFRRectangle *From);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IFRRectangle * This,
            /* [retval][out] */ IEngine **Result);
        
        END_INTERFACE
    } IFRRectangleVtbl;

    interface IFRRectangle
    {
        CONST_VTBL struct IFRRectangleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFRRectangle_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IFRRectangle_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IFRRectangle_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IFRRectangle_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IFRRectangle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IFRRectangle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IFRRectangle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IFRRectangle_get_Left(This,Result)	\
    ( (This)->lpVtbl -> get_Left(This,Result) ) 

#define IFRRectangle_put_Left(This,Value)	\
    ( (This)->lpVtbl -> put_Left(This,Value) ) 

#define IFRRectangle_get_Top(This,Result)	\
    ( (This)->lpVtbl -> get_Top(This,Result) ) 

#define IFRRectangle_put_Top(This,Value)	\
    ( (This)->lpVtbl -> put_Top(This,Value) ) 

#define IFRRectangle_get_Width(This,Result)	\
    ( (This)->lpVtbl -> get_Width(This,Result) ) 

#define IFRRectangle_put_Width(This,Value)	\
    ( (This)->lpVtbl -> put_Width(This,Value) ) 

#define IFRRectangle_get_Height(This,Result)	\
    ( (This)->lpVtbl -> get_Height(This,Result) ) 

#define IFRRectangle_put_Height(This,Value)	\
    ( (This)->lpVtbl -> put_Height(This,Value) ) 

#define IFRRectangle_SetRectangle(This,Left,Top,Width,Height)	\
    ( (This)->lpVtbl -> SetRectangle(This,Left,Top,Width,Height) ) 

#define IFRRectangle_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IFRRectangle_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IFRRectangle_INTERFACE_DEFINED__ */


#ifndef __IRunningTitleSeriesText_INTERFACE_DEFINED__
#define __IRunningTitleSeriesText_INTERFACE_DEFINED__

/* interface IRunningTitleSeriesText */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IRunningTitleSeriesText;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010AF-0000-1056-976E-008048D53AE3")
    IRunningTitleSeriesText : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ IText **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Rect( 
            /* [retval][out] */ IFRRectangle **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Rect( 
            /* [in] */ IFRRectangle *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HasSeparator( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_HasSeparator( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TextOrientation( 
            /* [retval][out] */ ITextOrientation **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsInverted( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsInverted( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRunningTitleSeriesTextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRunningTitleSeriesText * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRunningTitleSeriesText * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRunningTitleSeriesText * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRunningTitleSeriesText * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRunningTitleSeriesText * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRunningTitleSeriesText * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRunningTitleSeriesText * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IRunningTitleSeriesText * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            IRunningTitleSeriesText * This,
            /* [retval][out] */ IText **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Rect )( 
            IRunningTitleSeriesText * This,
            /* [retval][out] */ IFRRectangle **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Rect )( 
            IRunningTitleSeriesText * This,
            /* [in] */ IFRRectangle *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasSeparator )( 
            IRunningTitleSeriesText * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HasSeparator )( 
            IRunningTitleSeriesText * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TextOrientation )( 
            IRunningTitleSeriesText * This,
            /* [retval][out] */ ITextOrientation **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsInverted )( 
            IRunningTitleSeriesText * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsInverted )( 
            IRunningTitleSeriesText * This,
            /* [in] */ VARIANT_BOOL Value);
        
        END_INTERFACE
    } IRunningTitleSeriesTextVtbl;

    interface IRunningTitleSeriesText
    {
        CONST_VTBL struct IRunningTitleSeriesTextVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRunningTitleSeriesText_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRunningTitleSeriesText_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRunningTitleSeriesText_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRunningTitleSeriesText_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRunningTitleSeriesText_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRunningTitleSeriesText_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRunningTitleSeriesText_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRunningTitleSeriesText_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IRunningTitleSeriesText_get_Text(This,Result)	\
    ( (This)->lpVtbl -> get_Text(This,Result) ) 

#define IRunningTitleSeriesText_get_Rect(This,Result)	\
    ( (This)->lpVtbl -> get_Rect(This,Result) ) 

#define IRunningTitleSeriesText_put_Rect(This,Value)	\
    ( (This)->lpVtbl -> put_Rect(This,Value) ) 

#define IRunningTitleSeriesText_get_HasSeparator(This,Result)	\
    ( (This)->lpVtbl -> get_HasSeparator(This,Result) ) 

#define IRunningTitleSeriesText_put_HasSeparator(This,Value)	\
    ( (This)->lpVtbl -> put_HasSeparator(This,Value) ) 

#define IRunningTitleSeriesText_get_TextOrientation(This,Result)	\
    ( (This)->lpVtbl -> get_TextOrientation(This,Result) ) 

#define IRunningTitleSeriesText_get_IsInverted(This,Result)	\
    ( (This)->lpVtbl -> get_IsInverted(This,Result) ) 

#define IRunningTitleSeriesText_put_IsInverted(This,Value)	\
    ( (This)->lpVtbl -> put_IsInverted(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRunningTitleSeriesText_INTERFACE_DEFINED__ */


#ifndef __IEngine_INTERFACE_DEFINED__
#define __IEngine_INTERFACE_DEFINED__

/* interface IEngine */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IEngine;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
	MIDL_INTERFACE("10001000-0000-1056-976E-008048D53AE3")
    IEngine : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MessagesLanguage( 
            /* [retval][out] */ MessagesLanguageEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_MessagesLanguage( 
            /* [in] */ MessagesLanguageEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ParentWindow( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ParentWindow( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ApplicationTitle( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ApplicationTitle( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        //virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MultiProcessingParams( 
        //    /* [retval][out] */ IMultiProcessingParams **Result) = 0;
              
        
        //virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RecognitionSpeedLimit( 
        //    /* [retval][out] */ long *Result) = 0;
        
        //virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RecognitionSpeedLimit( 
        //    /* [in] */ long Value) = 0;
        
        //virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CreateImageDocumentsInMemory( 
        //    /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        //virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CreateImageDocumentsInMemory( 
        //    /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateBaseLanguage( 
            /* [retval][out] */ IBaseLanguage **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateTextLanguage( 
            /* [retval][out] */ ITextLanguage **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateLanguageDatabase( 
            /* [retval][out] */ ILanguageDatabase **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreatePageAnalysisParams( 
            /* [retval][out] */ IPageAnalysisParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateTableAnalysisParams( 
            /* [retval][out] */ ITableAnalysisParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateRecognizerParams( 
            /* [retval][out] */ IRecognizerParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateBarcodeParams( 
            /* [retval][out] */ IBarcodeParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateImageProcessingParams( 
            /* [retval][out] */ IImageProcessingParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreatePageProcessingParams( 
            /* [retval][out] */ IPageProcessingParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateSynthesisParamsForPage( 
            /* [retval][out] */ ISynthesisParamsForPage **Result) = 0;
        
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateSynthesisParamsForDocument( 
        //    /* [retval][out] */ ISynthesisParamsForDocument **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateRegion( 
            /* [retval][out] */ IRegion **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreatePrepareImageMode( 
            /* [retval][out] */ IPrepareImageMode **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateImageModification( 
            /* [retval][out] */ IImageModification **Result) = 0;
        
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateRectangle( 
        //    /* [retval][out] */ IFRRectangle **Result) = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateText( 
            /* [retval][out] */ IText **Result) = 0;
		        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateCharParams( 
            /* [retval][out] */ ICharParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateParagraphParams( 
            /* [retval][out] */ IParagraphParams **Result) = 0;
        
		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateParagraphTabInfo_donotuse( 
            /* [retval][out] */ void **Result) = 0;
        
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreatePDFEncryptionInfo( 
        //    /* [retval][out] */ IPDFEncryptionInfo **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateLayout( 
            /* [retval][out] */ ILayout **Result) = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateBlock(
								BlockTypeEnum blockType, 
            /* [retval][out] */ IBlock **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateStringsCollection( 
            /* [retval][out] */ IStringsCollection **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateLongsCollection( 
            /* [retval][out] */ ILongsCollection **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateImageDocumentsCollection( 
            /* [retval][out] */ IImageDocumentsCollection **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateLayoutsCollection( 
            /* [retval][out] */ ILayoutsCollection **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateBlocksCollection( 
                /* [retval][out] */ IBlocksCollection **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateRTFExportParams( 
            /* [retval][out] */ IRTFExportParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateTextExportParams( 
            /* [retval][out] */ ITextExportParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateXLExportParams( 
            /* [retval][out] */ IXLExportParams **Result) = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateDBFExportParams_donotuse( 
            /* [retval][out] */ void **Result) = 0;		
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateHTMLExportParams( 
            /* [retval][out] */ IHTMLExportParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreatePDFExportParamsOld( 
            /* [retval][out] */ IPDFExportParamsOld **Result) = 0;
        
		//  virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreatePDFExportParams( 
        //    /* [retval][out] */ IPDFExportParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateDocumentAnalyzer( 
            /* [retval][out] */ IDocumentAnalyzer **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateExporter( 
            /* [retval][out] */ IExporter **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateScanManager( 
            /* [retval][out] */ IScanManager **Result) = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateCheckmarkRecognizer_donotuse( 
            /* [retval][out] */ void **Result) = 0;
            
		 virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateCheckmarkBlock( 
            /* [retval][out] */ ICheckmarkBlock **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateCheckmarkGroup( 
            /* [retval][out] */ ICheckmarkGroup **Result) = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateCheckmarkGroupsCollection_donotuse( 
            /* [retval][out] */ void **Result) = 0;

        
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateFRDocument( 
        //    /* [retval][out] */ IFRDocument **Result) = 0;
        
       // virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateFRDocumentFromImage( 
       //    /* [in] */ BSTR imageFileName,
       //     /* [defaultvalue][in] */ IPrepareImageMode *prepareMode,
       //     /* [retval][out] */ IFRDocument **createdDocument) = 0;
        
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateDocumentInformationDictionary( 
        //    /* [retval][out] */ IDocumentInformationDictionary **Result) = 0;
        
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateDocumentInfo( 
        //    /* [retval][out] */ IDocumentInfo **Result) = 0;
        
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateTrainingImage( 
        //    /* [retval][out] */ ITrainingImage **Result) = 0;
        
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateTrainingImagesCollection( 
        //    /* [retval][out] */ ITrainingImagesCollection **Result) = 0;
        
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateObjectsExtractionParams( 
        //    /* [retval][out] */ IObjectsExtractionParams **Result) = 0;
        
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateOrientationDetectionParams( 
        //    /* [retval][out] */ IOrientationDetectionParams **Result) = 0;
        
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreatePdfExtendedParams( 
        //    /* [retval][out] */ IPdfExtendedParams **Result) = 0;
        
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateTextOrientation( 
        //    /* [retval][out] */ ITextOrientation **Result) = 0;

		 virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MaxMemoryImageByteSize( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_MaxMemoryImageByteSize( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OpenImage( 
            /* [in] */ BSTR FolderName,
			IDocumentInfo *DocumentInfo,
            /* [retval][out] */ IImageDocument **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PrepareImage( 
            /* [in] */ BSTR FileName,
            /* [in] */ BSTR DestinationFolder,
            /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode,
            /* [defaultvalue][in] */ long PageNumber,
            /* [defaultvalue][in] */ IImagePasswordCallback *PasswordCallback,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo,
            /* [retval][out] */ IStringsCollection **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PrepareAndOpenImage( 
            /* [in] */ BSTR FileName,
            /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode,
            /* [defaultvalue][in] */ IImagePasswordCallback *PasswordCallback,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo,
            /* [retval][out] */ IImageDocument **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OpenBitmapImage( 
            /* [in] */ long BitmapHandle,
            /* [in] */ long Resolution,
            /* [retval][out] */ IImageDocument **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PrepareBitmap( 
            /* [in] */ long BitmapHandle,
            /* [in] */ BSTR DestinationFileName,
            /* [in] */ long XResolution,
            /* [in] */ long YResolution,
            /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PrepareAndOpenBitmap( 
            /* [in] */ long BitmapHandle,
            /* [in] */ long XResolution,
            /* [in] */ long YResolution,
            /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode,
            /* [retval][out] */ IImageDocument **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OpenMemoryImage( 
            /* [in] */ MemoryImageFormatEnum Format,
            /* [in] */ long Width,
            /* [in] */ long Height,
            /* [in] */ long ByteWidth,
            /* [in] */ long Resolution,
            /* [in] */ long RawDataPtr,
            /* [retval][out] */ IImageDocument **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PrepareMemoryImage( 
            /* [in] */ MemoryImageFormatEnum Format,
            /* [in] */ long Width,
            /* [in] */ long Height,
            /* [in] */ long ByteWidth,
            /* [in] */ long XResolution,
            /* [in] */ long YResolution,
            /* [in] */ long RawDataPtr,
            /* [in] */ BSTR DestinationFileName,
            /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PrepareAndOpenMemoryImage( 
            /* [in] */ MemoryImageFormatEnum Format,
            /* [in] */ long Width,
            /* [in] */ long Height,
            /* [in] */ long ByteWidth,
            /* [in] */ long XResolution,
            /* [in] */ long YResolution,
            /* [in] */ long RawDataPtr,
            /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode,
            /* [retval][out] */ IImageDocument **Result) = 0;

		 
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AnalyzePage( 
            /* [in] */ IImageDocument *ImageDocument,
            /* [in] */ IPageProcessingParams *ProcessingParams,
            /* [in] */ ILayout *Layout,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo = 0) = 0;

		  
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AnalyzeRegion( 
            /* [in] */ IImageDocument *ImageDocument,
            /* [in] */ IRegion *Region,
            /* [in] */ IPageProcessingParams *ProcessingParams,
            /* [in] */ ILayout *Layout,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AnalyzeTable( 
            /* [in] */ IImageDocument *ImageDocument,
            /* [in] */ IPageProcessingParams *ProcessingParams,
            /* [in] */ ILayout *Layout,
            /* [in] */ long BlockIndex,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo = 0) = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RecognizePage( 
			/* [in] */ IImageDocument *ImageDocument,
			/* [in] */ ISynthesisParamsForPage *SynthesisParams,
			/* [in] */ IObjectsExtractionParams *ExtractionParams,
			/* [in] */ ILayout *Layout,
			/* [defaultvalue][in] */ IDocumentInfo *DocumentInfo = 0) = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RecognizeBlocks( 
			/* [in] */ IImageDocument *ImageDocument,
			/* [in] */ ISynthesisParamsForPage *SynthesisParams,			
			/* [in] */ ILayout *Layout,
			/* [in] */ IBlocksCollection *Blocks,
			/* [defaultvalue][in] */ IDocumentInfo *DocumentInfo = 0) = 0;
		
		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AnalyzeAndRecognizeBlocks_donotuse() = 0;
        
		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AnalyzeAndRecognizePage( 
            /* [in] */ IImageDocument *ImageDocument,
            /* [in] */ IPageProcessingParams *ProcessingParams,
            /* [in] */ ISynthesisParamsForPage *SynthesisParams,
            /* [in] */ ILayout *Layout,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo = 0) = 0;
				

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RecognizeImageFile( 
            /* [in] */ BSTR ImageFileName,
            /* [in] */ IPageProcessingParams *ProcessingParams,
            /* [in] */ ISynthesisParamsForPage *SynthesisParams,
            /* [in] */ ISynthesisParamsForDocument *DocumentSynthesisParams,
            /* [in] */ FileExportFormatEnum ExportFormat,
            /* [in] */ IUnknown *ExportParams,
            /* [in] */ IImagePasswordCallback *passwordCallback,
            /* [in] */ BSTR OutputFileName) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RecognizeImageAsPlainText( 
            /* [in] */ BSTR ImageFileName,
            /* [defaultvalue][in] */ IPageProcessingParams *ProcessingParams,
            /* [defaultvalue][in] */ IImagePasswordCallback *passwordCallback,
            /* [retval][out] */ IPlainText **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RecognizeImageDocumentAsPlainText( 
            /* [in] */ IImageDocument *Image,
            /* [defaultvalue][in] */ IPageProcessingParams *PageProcessingParams,           
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo,
            /* [retval][out] */ IPlainText **Results) = 0;

		  virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindPageSplitPosition( 
            /* [in] */ IObjectsExtractionParams *ExtractionParams,
            /* [out] */ PageSplitDirectionEnum *SplitDirection,
            /* [out] */ long *startSplitPosition,
            /* [out] */ long *endSplitPosition) = 0;
			  
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetNumberOfPagesInImageFile( 
            /* [in] */ BSTR ImageFilePath,
            /* [defaultvalue][in] */ IImagePasswordCallback *PasswordCallback,
            /* [retval][out] */ long *Result) = 0;

		 virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ExportPage( 
            /* [in] */ FileExportFormatEnum Format,
            /* [in] */ BSTR FileName,
            /* [in] */ IImageDocument *ImageDocument,
            /* [in] */ ILayout *Layout,
            /* [defaultvalue][in] */ IUnknown *ExportParams = 0,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ExportPages( 
            /* [in] */ FileExportFormatEnum Format,
            /* [in] */ BSTR FileName,
            /* [in] */ IImageDocumentsCollection *ImageDocuments,
            /* [in] */ ILayoutsCollection *Layouts,
            /* [in] */ IUnknown *ExportParams,
            /* [in] */ IDocumentInfo *DocumentInfo) = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertLanguageIdToLCID( 
            /* [in] */ LanguageIdEnum LanguageId,
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertLCIDToLanguageId( 
            /* [in] */ long Win32Locale,
            /* [retval][out] */ LanguageIdEnum *Result) = 0;
		
		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertCodePageToWin32CodePage( 
            /* [in] */ CodePageEnum codePageId,
            /* [retval][out] */ long *Win32CodePage) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertWin32CodePageToCodePage( 
            /* [in] */ long Win32CodePage,
            /* [retval][out] */ CodePageEnum *Result) = 0;

		virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PredefinedLanguages( 
            /* [retval][out] */ IPredefinedLanguages **Result) = 0;
		
		virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SupportedLetters_donotuse( 
            /* [retval][out] */ void **Result) = 0;
					   
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateNewDictionary( 
            /* [in] */ BSTR FileName,
            /* [in] */ LanguageIdEnum LanguageId,
            /* [retval][out] */ IDictionary **Result) = 0;        
		
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OpenExistingDictionary( 
            /* [in] */ BSTR FileName,
            /* [retval][out] */ IDictionary **Result) = 0; 
		
		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateEmptyUserPattern( 
            /* [in] */ BSTR FileName) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditUserPattern( 
            /* [in] */ BSTR FileName) = 0;

        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateMultipageImageWriter( 
            /* [in] */ BSTR fileName,
            /* [in] */ ImageFileFormatEnum fileFormat,
            /* [retval][out] */ IMultipageImageWriter **multipageWriter) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OpenDib( 
            /* [in] */ long DibHglobal,
            /* [in] */ long Resolution,
            /* [retval][out] */ IImageDocument **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PrepareDib( 
            /* [in] */ long DibHglobal,
            /* [in] */ BSTR DestinationFileName,
            /* [in] */ long XResolution,
            /* [in] */ long YResolution,
            /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PrepareAndOpenDib( 
            /* [in] */ long DibHglobal,
            /* [in] */ long XResolution,
            /* [in] */ long YResolution,
            /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode,
            /* [retval][out] */ IImageDocument **Result) = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateXMLExportParams( 
            /* [retval][out] */ IXMLExportParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreatePPTExportParams( 
            /* [retval][out] */ IPPTExportParams **Result) = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateJpegExtendedParams( 
            /* [retval][out] */ IJpegExtendedParams **Result) = 0;
       
        
		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateBarcodeAnalysisParams_donotuse( 
            /* [retval][out] */ void **Result) = 0;
                
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateLicense( 
            /* [retval][out] */ ILicense **Result) = 0;
                  
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ExtractBarcodes( 
            /* [in] */ IImageDocument *ImageDocument,
            /* [in] */ IBarcodeParams *BarcodeParams,
            /* [in] */ IObjectsExtractionParams *ExtractionParams,
            /* [in] */ ILayout *Layout,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo = 0) = 0; 
       
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OpenFormTemplatesSet_donotuse()  = 0;     

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateFormTemplatesMatchingParam_donotuse() = 0; 
     
		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateFormAnalyzer_donotuse() = 0; 

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE MatchFormTemplate_donotuse() = 0; 

        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateStandardDictionaryDesc( 
            /* [retval][out] */ IStandardDictionaryDescription **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateUserDictionaryDesc( 
            /* [retval][out] */ IUserDictionaryDescription **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateRegExpDictionaryDesc( 
            /* [retval][out] */ IRegExpDictionaryDescription **Result) = 0;
        
              
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StraightenLines_donotuse() = 0; 

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EnhanceImageBlocks_donotuse() = 0; 

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PerformEnhancement_donotuse() = 0; 

		
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateHyperlink( 
            /* [retval][out] */ IHyperlink **Result) = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateStraightenLinesParams_donotuse() = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CleanDocumentAnalyzer_donotuse() = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StartLogging( 
            /* [in] */ BSTR LogFileName,
            /* [defaultvalue][in] */ VARIANT_BOOL WriteMethodCalls = ( VARIANT_BOOL  )-1) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StopLogging( void) = 0;


		  virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadModule( 
            /* [in] */ FREngineModuleEnum LoadFlags) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Licenses( 
            /* [retval][out] */ ILicenseCollection **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CurrentLicense( 
            /* [retval][out] */ ILicense **Result) = 0;

        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetCurrentLicense( 
            /* [in] */ ILicense *TargetLicense,
            /* [in] */ BSTR ProjectId) = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadProfile( 
            /* [in] */ BSTR FileName) = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE MatchFlexibleDescriptions_donotuse() = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OpenFlexibleDescription_donotuse() = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OpenFlexibleDescriptionFromMemory_donotuse() = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateFlexibleDescriptionsCollection_donotuse() = 0;
		
		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeskewImage_donotuse() = 0;
		
		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProcessIntersectedBlocks_donotuse() = 0;
		
		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateExternalDictionaryDesc( 
            /* [retval][out] */ IExternalDictionaryDescription **Result) = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreatePDFAExportParamsOld( 
            /* [retval][out] */ IPDFAExportParamsOld **Result) = 0;

        //virtual /* [helpstring][id][helpcontext] */ HRESULT STDMETHODCALLTYPE TrainUserPattern( 
        //    /* [in] */ BSTR FileName,
        //   /* [in] */ ITrainingImagesCollection *TrainingImages,
        //    /* [in] */ BSTR CharacterOrLigature,
        //    /* [in] */ long Flags,
        //    /* [in] */ TextTypeEnum TextType) = 0;
        
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE MergePatterns( 
        //    /* [in] */ IStringsCollection *SourceFilesNames,
        //    /* [in] */ BSTR DestinationFileName) = 0;  
        
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadPredefinedProfile( 
        //    /* [in] */ BSTR ProfileName) = 0;
        
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AnalyzePages( 
        //    /* [in] */ IImageDocumentsCollection *ImageDocuments,
        //    /* [in] */ ILayoutsCollection *Layouts,
        //    /* [defaultvalue][in] */ IPageProcessingParams *ProcessingParams = 0,
        //    /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo = 0) = 0;
        
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RecognizePages( 
        //    /* [in] */ IImageDocumentsCollection *ImageDocuments,
        //    /* [in] */ ILayoutsCollection *Layouts,
        //    /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParams = 0,
        //    /* [defaultvalue][in] */ IObjectsExtractionParams *ExtractionParams = 0,
        //    /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo = 0) = 0;
        
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AnalyzeAndRecognizePages( 
        //    /* [in] */ IImageDocumentsCollection *ImageDocument,
        //    /* [in] */ ILayoutsCollection *Layout,
        //    /* [defaultvalue][in] */ IPageProcessingParams *ProcessingParams = 0,
        //    /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParams = 0,
        //    /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo = 0) = 0;
        //
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SynthesizePages( 
        //    /* [in] */ IImageDocumentsCollection *ImageDocuments,
        //    /* [in] */ ILayoutsCollection *Layouts,
        //    /* [in] */ ISynthesisParamsForDocument *SynthesisParamsForDocument,
        //    /* [in] */ IDocumentInfo *DocumentInfo) = 0;
        //
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SynthesizePagesEx( 
        //    /* [in] */ IRecognizedPages *RecognizedPages,
        //    /* [in] */ ISynthesisParamsForDocument *SynthesisParamsForDocument,
        //    /* [in] */ IDocumentInfo *DocumentInfo) = 0;
        //

        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadImageDocFromMemory( 
            /* [in] */ long HGlobal,
            /* [retval][out] */ IImageDocument **Result) = 0;
        
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadImageDocFromFile( 
        //    /* [in] */ BSTR FileName,
        //    /* [retval][out] */ IImageDocument **Result) = 0;
        //
      
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateBatchProcessor( 
        //    /* [retval][out] */ IBatchProcessor **Result) = 0;
        
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OpenImageFileFromMemory( 
        //    /* [in] */ long HGlobal,
        //    /* [defaultvalue][in] */ BSTR FileName,
        //    /* [defaultvalue][in] */ ImageFileFormatEnum FileFormat,
        //    /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode,
        //    /* [retval][out] */ IImageDocument **Result) = 0;
        
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateAltoExportParams( 
        //    /* [retval][out] */ IAltoExportParams **Result) = 0;

		
        
    };
   
#else 	/* C style interface */

    typedef struct IEngineVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEngine * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEngine * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEngine * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IEngine * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IEngine * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IEngine * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IEngine * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MessagesLanguage )( 
            IEngine * This,
            /* [retval][out] */ MessagesLanguageEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MessagesLanguage )( 
            IEngine * This,
            /* [in] */ MessagesLanguageEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ParentWindow )( 
            IEngine * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ParentWindow )( 
            IEngine * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ApplicationTitle )( 
            IEngine * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ApplicationTitle )( 
            IEngine * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IEngine * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MultiProcessingParams )( 
            IEngine * This,
            /* [retval][out] */ IMultiProcessingParams **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PredefinedLanguages )( 
            IEngine * This,
            /* [retval][out] */ IPredefinedLanguages **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RecognitionSpeedLimit )( 
            IEngine * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RecognitionSpeedLimit )( 
            IEngine * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CreateImageDocumentsInMemory )( 
            IEngine * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CreateImageDocumentsInMemory )( 
            IEngine * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateBaseLanguage )( 
            IEngine * This,
            /* [retval][out] */ IBaseLanguage **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateTextLanguage )( 
            IEngine * This,
            /* [retval][out] */ ITextLanguage **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateLanguageDatabase )( 
            IEngine * This,
            /* [retval][out] */ ILanguageDatabase **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreatePageAnalysisParams )( 
            IEngine * This,
            /* [retval][out] */ IPageAnalysisParams **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateTableAnalysisParams )( 
            IEngine * This,
            /* [retval][out] */ ITableAnalysisParams **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateRecognizerParams )( 
            IEngine * This,
            /* [retval][out] */ IRecognizerParams **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateBarcodeParams )( 
            IEngine * This,
            /* [retval][out] */ IBarcodeParams **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateImageProcessingParams )( 
            IEngine * This,
            /* [retval][out] */ IImageProcessingParams **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreatePageProcessingParams )( 
            IEngine * This,
            /* [retval][out] */ IPageProcessingParams **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateSynthesisParamsForPage )( 
            IEngine * This,
            /* [retval][out] */ ISynthesisParamsForPage **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateSynthesisParamsForDocument )( 
            IEngine * This,
            /* [retval][out] */ ISynthesisParamsForDocument **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateRegion )( 
            IEngine * This,
            /* [retval][out] */ IRegion **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreatePrepareImageMode )( 
            IEngine * This,
            /* [retval][out] */ IPrepareImageMode **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateImageModification )( 
            IEngine * This,
            /* [retval][out] */ IImageModification **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateRectangle )( 
            IEngine * This,
            /* [retval][out] */ IFRRectangle **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateCharParams )( 
            IEngine * This,
            /* [retval][out] */ ICharParams **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateParagraphParams )( 
            IEngine * This,
            /* [retval][out] */ IParagraphParams **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreatePDFEncryptionInfo )( 
            IEngine * This,
            /* [retval][out] */ IPDFEncryptionInfo **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateLayout )( 
            IEngine * This,
            /* [retval][out] */ ILayout **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateStringsCollection )( 
            IEngine * This,
            /* [retval][out] */ IStringsCollection **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateLongsCollection )( 
            IEngine * This,
            /* [retval][out] */ ILongsCollection **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateImageDocumentsCollection )( 
            IEngine * This,
            /* [retval][out] */ IImageDocumentsCollection **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateLayoutsCollection )( 
            IEngine * This,
            /* [retval][out] */ ILayoutsCollection **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateLayoutBlocks )( 
            IEngine * This,
            /* [in] */ ILayout *ParentLayout,
            /* [retval][out] */ ILayoutBlocks **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateRTFExportParams )( 
            IEngine * This,
            /* [retval][out] */ IRTFExportParams **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateTextExportParams )( 
            IEngine * This,
            /* [retval][out] */ ITextExportParams **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateXLExportParams )( 
            IEngine * This,
            /* [retval][out] */ IXLExportParams **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateHTMLExportParams )( 
            IEngine * This,
            /* [retval][out] */ IHTMLExportParams **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreatePDFExportParamsOld )( 
            IEngine * This,
            /* [retval][out] */ IPDFExportParamsOld **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreatePDFAExportParamsOld )( 
            IEngine * This,
            /* [retval][out] */ IPDFAExportParamsOld **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateXMLExportParams )( 
            IEngine * This,
            /* [retval][out] */ IXMLExportParams **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreatePPTExportParams )( 
            IEngine * This,
            /* [retval][out] */ IPPTExportParams **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateDocumentAnalyzer )( 
            IEngine * This,
            /* [retval][out] */ IDocumentAnalyzer **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateExporter )( 
            IEngine * This,
            /* [retval][out] */ IExporter **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateScanManager )( 
            IEngine * This,
            /* [retval][out] */ IScanManager **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateJpegExtendedParams )( 
            IEngine * This,
            /* [retval][out] */ IJpegExtendedParams **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateHyperlink )( 
            IEngine * This,
            /* [retval][out] */ IHyperlink **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateFRDocument )( 
            IEngine * This,
            /* [retval][out] */ IFRDocument **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateFRDocumentFromImage )( 
            IEngine * This,
            /* [in] */ BSTR imageFileName,
            /* [defaultvalue][in] */ IPrepareImageMode *prepareMode,
            /* [retval][out] */ IFRDocument **createdDocument);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateDocumentInformationDictionary )( 
            IEngine * This,
            /* [retval][out] */ IDocumentInformationDictionary **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateDocumentInfo )( 
            IEngine * This,
            /* [retval][out] */ IDocumentInfo **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateTrainingImage )( 
            IEngine * This,
            /* [retval][out] */ ITrainingImage **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateTrainingImagesCollection )( 
            IEngine * This,
            /* [retval][out] */ ITrainingImagesCollection **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateObjectsExtractionParams )( 
            IEngine * This,
            /* [retval][out] */ IObjectsExtractionParams **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateOrientationDetectionParams )( 
            IEngine * This,
            /* [retval][out] */ IOrientationDetectionParams **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreatePdfExtendedParams )( 
            IEngine * This,
            /* [retval][out] */ IPdfExtendedParams **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateTextOrientation )( 
            IEngine * This,
            /* [retval][out] */ ITextOrientation **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OpenImage )( 
            IEngine * This,
            /* [in] */ BSTR FolderName,
            /* [retval][out] */ IImageDocument **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PrepareImage )( 
            IEngine * This,
            /* [in] */ BSTR FileName,
            /* [in] */ BSTR DestinationFolder,
            /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode,
            /* [defaultvalue][in] */ long PageNumber,
            /* [defaultvalue][in] */ IImagePasswordCallback *PasswordCallback,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo,
            /* [retval][out] */ IStringsCollection **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PrepareAndOpenImage )( 
            IEngine * This,
            /* [in] */ BSTR FileName,
            /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode,
            /* [defaultvalue][in] */ IImagePasswordCallback *PasswordCallback,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo,
            /* [retval][out] */ IImageDocument **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OpenBitmapImage )( 
            IEngine * This,
            /* [in] */ long BitmapHandle,
            /* [in] */ long Resolution,
            /* [retval][out] */ IImageDocument **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PrepareBitmap )( 
            IEngine * This,
            /* [in] */ long BitmapHandle,
            /* [in] */ BSTR DestinationFileName,
            /* [in] */ long XResolution,
            /* [in] */ long YResolution,
            /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PrepareAndOpenBitmap )( 
            IEngine * This,
            /* [in] */ long BitmapHandle,
            /* [in] */ long XResolution,
            /* [in] */ long YResolution,
            /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode,
            /* [retval][out] */ IImageDocument **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OpenMemoryImage )( 
            IEngine * This,
            /* [in] */ MemoryImageFormatEnum Format,
            /* [in] */ long Width,
            /* [in] */ long Height,
            /* [in] */ long ByteWidth,
            /* [in] */ long Resolution,
            /* [in] */ long RawDataPtr,
            /* [retval][out] */ IImageDocument **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PrepareMemoryImage )( 
            IEngine * This,
            /* [in] */ MemoryImageFormatEnum Format,
            /* [in] */ long Width,
            /* [in] */ long Height,
            /* [in] */ long ByteWidth,
            /* [in] */ long XResolution,
            /* [in] */ long YResolution,
            /* [in] */ long RawDataPtr,
            /* [in] */ BSTR DestinationFileName,
            /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PrepareAndOpenMemoryImage )( 
            IEngine * This,
            /* [in] */ MemoryImageFormatEnum Format,
            /* [in] */ long Width,
            /* [in] */ long Height,
            /* [in] */ long ByteWidth,
            /* [in] */ long XResolution,
            /* [in] */ long YResolution,
            /* [in] */ long RawDataPtr,
            /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode,
            /* [retval][out] */ IImageDocument **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateMultipageImageWriter )( 
            IEngine * This,
            /* [in] */ BSTR fileName,
            /* [in] */ ImageFileFormatEnum fileFormat,
            /* [retval][out] */ IMultipageImageWriter **multipageWriter);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OpenDib )( 
            IEngine * This,
            /* [in] */ long DibHglobal,
            /* [in] */ long Resolution,
            /* [retval][out] */ IImageDocument **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PrepareDib )( 
            IEngine * This,
            /* [in] */ long DibHglobal,
            /* [in] */ BSTR DestinationFileName,
            /* [in] */ long XResolution,
            /* [in] */ long YResolution,
            /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PrepareAndOpenDib )( 
            IEngine * This,
            /* [in] */ long DibHglobal,
            /* [in] */ long XResolution,
            /* [in] */ long YResolution,
            /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode,
            /* [retval][out] */ IImageDocument **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AnalyzePage )( 
            IEngine * This,
            /* [in] */ IImageDocument *ImageDocument,
            /* [in] */ IPageProcessingParams *ProcessingParams,
            /* [in] */ ILayout *Layout,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RecognizePage )( 
            IEngine * This,
            /* [in] */ IImageDocument *ImageDocument,
            /* [in] */ ISynthesisParamsForPage *SynthesisParams,
            /* [in] */ IObjectsExtractionParams *ExtractionParams,
            /* [in] */ ILayout *Layout,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AnalyzeAndRecognizePage )( 
            IEngine * This,
            /* [in] */ IImageDocument *ImageDocument,
            /* [in] */ IPageProcessingParams *ProcessingParams,
            /* [in] */ ISynthesisParamsForPage *SynthesisParams,
            /* [in] */ ILayout *Layout,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RecognizeImageFile )( 
            IEngine * This,
            /* [in] */ BSTR ImageFileName,
            /* [in] */ IPageProcessingParams *ProcessingParams,
            /* [in] */ ISynthesisParamsForPage *SynthesisParams,
            /* [in] */ ISynthesisParamsForDocument *DocumentSynthesisParams,
            /* [in] */ FileExportFormatEnum ExportFormat,
            /* [in] */ IUnknown *ExportParams,
            /* [in] */ IImagePasswordCallback *passwordCallback,
            /* [in] */ BSTR OutputFileName);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RecognizeImageAsPlainText )( 
            IEngine * This,
            /* [in] */ BSTR ImageFileName,
            /* [defaultvalue][in] */ IPageProcessingParams *ProcessingParams,
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParams,
            /* [defaultvalue][in] */ IImagePasswordCallback *passwordCallback,
            /* [retval][out] */ IPlainText **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RecognizeImageDocumentAsPlainText )( 
            IEngine * This,
            /* [in] */ IImageDocument *Image,
            /* [defaultvalue][in] */ IPageProcessingParams *PageProcessingParams,
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParams,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo,
            /* [retval][out] */ IPlainText **Results);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetNumberOfPagesInImageFile )( 
            IEngine * This,
            /* [in] */ BSTR ImageFilePath,
            /* [defaultvalue][in] */ IImagePasswordCallback *PasswordCallback,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ExportPage )( 
            IEngine * This,
            /* [in] */ FileExportFormatEnum Format,
            /* [in] */ BSTR FileName,
            /* [in] */ IImageDocument *ImageDocument,
            /* [in] */ ILayout *Layout,
            /* [defaultvalue][in] */ IUnknown *ExportParams,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ExportPages )( 
            IEngine * This,
            /* [in] */ FileExportFormatEnum Format,
            /* [in] */ BSTR FileName,
            /* [in] */ IImageDocumentsCollection *ImageDocuments,
            /* [in] */ ILayoutsCollection *Layouts,
            /* [in] */ IUnknown *ExportParams,
            /* [in] */ IDocumentInfo *DocumentInfo);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertLanguageIdToLCID )( 
            IEngine * This,
            /* [in] */ LanguageIdEnum LanguageId,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertLCIDToLanguageId )( 
            IEngine * This,
            /* [in] */ long Win32Locale,
            /* [retval][out] */ LanguageIdEnum *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateNewDictionary )( 
            IEngine * This,
            /* [in] */ BSTR FileName,
            /* [in] */ LanguageIdEnum LanguageId,
            /* [retval][out] */ IDictionary **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateStandardDictionaryDesc )( 
            IEngine * This,
            /* [retval][out] */ IStandardDictionaryDescription **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateUserDictionaryDesc )( 
            IEngine * This,
            /* [retval][out] */ IUserDictionaryDescription **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateRegExpDictionaryDesc )( 
            IEngine * This,
            /* [retval][out] */ IRegExpDictionaryDescription **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateExternalDictionaryDesc )( 
            IEngine * This,
            /* [retval][out] */ IExternalDictionaryDescription **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OpenExistingDictionary )( 
            IEngine * This,
            /* [in] */ BSTR FileName,
            /* [retval][out] */ IDictionary **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateEmptyUserPattern )( 
            IEngine * This,
            /* [in] */ BSTR FileName);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EditUserPattern )( 
            IEngine * This,
            /* [in] */ BSTR FileName);
        
        /* [helpstring][id][helpcontext] */ HRESULT ( STDMETHODCALLTYPE *TrainUserPattern )( 
            IEngine * This,
            /* [in] */ BSTR FileName,
            /* [in] */ ITrainingImagesCollection *TrainingImages,
            /* [in] */ BSTR CharacterOrLigature,
            /* [in] */ long Flags,
            /* [in] */ TextTypeEnum TextType);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MergePatterns )( 
            IEngine * This,
            /* [in] */ IStringsCollection *SourceFilesNames,
            /* [in] */ BSTR DestinationFileName);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *StartLogging )( 
            IEngine * This,
            /* [in] */ BSTR LogFileName,
            /* [defaultvalue][in] */ VARIANT_BOOL WriteMethodCalls);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *StopLogging )( 
            IEngine * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadModule )( 
            IEngine * This,
            /* [in] */ FREngineModuleEnum LoadFlags);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Licenses )( 
            IEngine * This,
            /* [retval][out] */ ILicenseCollection **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentLicense )( 
            IEngine * This,
            /* [retval][out] */ ILicense **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetCurrentLicense )( 
            IEngine * This,
            /* [in] */ ILicense *TargetLicense,
            /* [in] */ BSTR ProjectId);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadProfile )( 
            IEngine * This,
            /* [in] */ BSTR FileName);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadPredefinedProfile )( 
            IEngine * This,
            /* [in] */ BSTR ProfileName);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AnalyzePages )( 
            IEngine * This,
            /* [in] */ IImageDocumentsCollection *ImageDocuments,
            /* [in] */ ILayoutsCollection *Layouts,
            /* [defaultvalue][in] */ IPageProcessingParams *ProcessingParams,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RecognizePages )( 
            IEngine * This,
            /* [in] */ IImageDocumentsCollection *ImageDocuments,
            /* [in] */ ILayoutsCollection *Layouts,
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParams,
            /* [defaultvalue][in] */ IObjectsExtractionParams *ExtractionParams,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AnalyzeAndRecognizePages )( 
            IEngine * This,
            /* [in] */ IImageDocumentsCollection *ImageDocument,
            /* [in] */ ILayoutsCollection *Layout,
            /* [defaultvalue][in] */ IPageProcessingParams *ProcessingParams,
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParams,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SynthesizePages )( 
            IEngine * This,
            /* [in] */ IImageDocumentsCollection *ImageDocuments,
            /* [in] */ ILayoutsCollection *Layouts,
            /* [in] */ ISynthesisParamsForDocument *SynthesisParamsForDocument,
            /* [in] */ IDocumentInfo *DocumentInfo);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SynthesizePagesEx )( 
            IEngine * This,
            /* [in] */ IRecognizedPages *RecognizedPages,
            /* [in] */ ISynthesisParamsForDocument *SynthesisParamsForDocument,
            /* [in] */ IDocumentInfo *DocumentInfo);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadImageDocFromMemory )( 
            IEngine * This,
            /* [in] */ long HGlobal,
            /* [retval][out] */ IImageDocument **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadImageDocFromFile )( 
            IEngine * This,
            /* [in] */ BSTR FileName,
            /* [retval][out] */ IImageDocument **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreatePDFExportParams )( 
            IEngine * This,
            /* [retval][out] */ IPDFExportParams **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateBatchProcessor )( 
            IEngine * This,
            /* [retval][out] */ IBatchProcessor **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OpenImageFileFromMemory )( 
            IEngine * This,
            /* [in] */ long HGlobal,
            /* [defaultvalue][in] */ BSTR FileName,
            /* [defaultvalue][in] */ ImageFileFormatEnum FileFormat,
            /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode,
            /* [retval][out] */ IImageDocument **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateAltoExportParams )( 
            IEngine * This,
            /* [retval][out] */ IAltoExportParams **Result);
        
        END_INTERFACE
    } IEngineVtbl;

    interface IEngine
    {
        CONST_VTBL struct IEngineVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEngine_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IEngine_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IEngine_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IEngine_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IEngine_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IEngine_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IEngine_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IEngine_get_MessagesLanguage(This,Result)	\
    ( (This)->lpVtbl -> get_MessagesLanguage(This,Result) ) 

#define IEngine_put_MessagesLanguage(This,Value)	\
    ( (This)->lpVtbl -> put_MessagesLanguage(This,Value) ) 

#define IEngine_get_ParentWindow(This,Result)	\
    ( (This)->lpVtbl -> get_ParentWindow(This,Result) ) 

#define IEngine_put_ParentWindow(This,Value)	\
    ( (This)->lpVtbl -> put_ParentWindow(This,Value) ) 

#define IEngine_get_ApplicationTitle(This,Result)	\
    ( (This)->lpVtbl -> get_ApplicationTitle(This,Result) ) 

#define IEngine_put_ApplicationTitle(This,Value)	\
    ( (This)->lpVtbl -> put_ApplicationTitle(This,Value) ) 

#define IEngine_get_Path(This,Result)	\
    ( (This)->lpVtbl -> get_Path(This,Result) ) 

#define IEngine_get_MultiProcessingParams(This,Result)	\
    ( (This)->lpVtbl -> get_MultiProcessingParams(This,Result) ) 

#define IEngine_get_PredefinedLanguages(This,Result)	\
    ( (This)->lpVtbl -> get_PredefinedLanguages(This,Result) ) 

#define IEngine_get_RecognitionSpeedLimit(This,Result)	\
    ( (This)->lpVtbl -> get_RecognitionSpeedLimit(This,Result) ) 

#define IEngine_put_RecognitionSpeedLimit(This,Value)	\
    ( (This)->lpVtbl -> put_RecognitionSpeedLimit(This,Value) ) 

#define IEngine_get_CreateImageDocumentsInMemory(This,Result)	\
    ( (This)->lpVtbl -> get_CreateImageDocumentsInMemory(This,Result) ) 

#define IEngine_put_CreateImageDocumentsInMemory(This,Value)	\
    ( (This)->lpVtbl -> put_CreateImageDocumentsInMemory(This,Value) ) 

#define IEngine_CreateBaseLanguage(This,Result)	\
    ( (This)->lpVtbl -> CreateBaseLanguage(This,Result) ) 

#define IEngine_CreateTextLanguage(This,Result)	\
    ( (This)->lpVtbl -> CreateTextLanguage(This,Result) ) 

#define IEngine_CreateLanguageDatabase(This,Result)	\
    ( (This)->lpVtbl -> CreateLanguageDatabase(This,Result) ) 

#define IEngine_CreatePageAnalysisParams(This,Result)	\
    ( (This)->lpVtbl -> CreatePageAnalysisParams(This,Result) ) 

#define IEngine_CreateTableAnalysisParams(This,Result)	\
    ( (This)->lpVtbl -> CreateTableAnalysisParams(This,Result) ) 

#define IEngine_CreateRecognizerParams(This,Result)	\
    ( (This)->lpVtbl -> CreateRecognizerParams(This,Result) ) 

#define IEngine_CreateBarcodeParams(This,Result)	\
    ( (This)->lpVtbl -> CreateBarcodeParams(This,Result) ) 

#define IEngine_CreateImageProcessingParams(This,Result)	\
    ( (This)->lpVtbl -> CreateImageProcessingParams(This,Result) ) 

#define IEngine_CreatePageProcessingParams(This,Result)	\
    ( (This)->lpVtbl -> CreatePageProcessingParams(This,Result) ) 

#define IEngine_CreateSynthesisParamsForPage(This,Result)	\
    ( (This)->lpVtbl -> CreateSynthesisParamsForPage(This,Result) ) 

#define IEngine_CreateSynthesisParamsForDocument(This,Result)	\
    ( (This)->lpVtbl -> CreateSynthesisParamsForDocument(This,Result) ) 

#define IEngine_CreateRegion(This,Result)	\
    ( (This)->lpVtbl -> CreateRegion(This,Result) ) 

#define IEngine_CreatePrepareImageMode(This,Result)	\
    ( (This)->lpVtbl -> CreatePrepareImageMode(This,Result) ) 

#define IEngine_CreateImageModification(This,Result)	\
    ( (This)->lpVtbl -> CreateImageModification(This,Result) ) 

#define IEngine_CreateRectangle(This,Result)	\
    ( (This)->lpVtbl -> CreateRectangle(This,Result) ) 

#define IEngine_CreateCharParams(This,Result)	\
    ( (This)->lpVtbl -> CreateCharParams(This,Result) ) 

#define IEngine_CreateParagraphParams(This,Result)	\
    ( (This)->lpVtbl -> CreateParagraphParams(This,Result) ) 

#define IEngine_CreatePDFEncryptionInfo(This,Result)	\
    ( (This)->lpVtbl -> CreatePDFEncryptionInfo(This,Result) ) 

#define IEngine_CreateLayout(This,Result)	\
    ( (This)->lpVtbl -> CreateLayout(This,Result) ) 

#define IEngine_CreateStringsCollection(This,Result)	\
    ( (This)->lpVtbl -> CreateStringsCollection(This,Result) ) 

#define IEngine_CreateLongsCollection(This,Result)	\
    ( (This)->lpVtbl -> CreateLongsCollection(This,Result) ) 

#define IEngine_CreateImageDocumentsCollection(This,Result)	\
    ( (This)->lpVtbl -> CreateImageDocumentsCollection(This,Result) ) 

#define IEngine_CreateLayoutsCollection(This,Result)	\
    ( (This)->lpVtbl -> CreateLayoutsCollection(This,Result) ) 

#define IEngine_CreateLayoutBlocks(This,ParentLayout,Result)	\
    ( (This)->lpVtbl -> CreateLayoutBlocks(This,ParentLayout,Result) ) 

#define IEngine_CreateRTFExportParams(This,Result)	\
    ( (This)->lpVtbl -> CreateRTFExportParams(This,Result) ) 

#define IEngine_CreateTextExportParams(This,Result)	\
    ( (This)->lpVtbl -> CreateTextExportParams(This,Result) ) 

#define IEngine_CreateXLExportParams(This,Result)	\
    ( (This)->lpVtbl -> CreateXLExportParams(This,Result) ) 

#define IEngine_CreateHTMLExportParams(This,Result)	\
    ( (This)->lpVtbl -> CreateHTMLExportParams(This,Result) ) 

#define IEngine_CreatePDFExportParamsOld(This,Result)	\
    ( (This)->lpVtbl -> CreatePDFExportParamsOld(This,Result) ) 

#define IEngine_CreatePDFAExportParamsOld(This,Result)	\
    ( (This)->lpVtbl -> CreatePDFAExportParamsOld(This,Result) ) 

#define IEngine_CreateXMLExportParams(This,Result)	\
    ( (This)->lpVtbl -> CreateXMLExportParams(This,Result) ) 

#define IEngine_CreatePPTExportParams(This,Result)	\
    ( (This)->lpVtbl -> CreatePPTExportParams(This,Result) ) 

#define IEngine_CreateDocumentAnalyzer(This,Result)	\
    ( (This)->lpVtbl -> CreateDocumentAnalyzer(This,Result) ) 

#define IEngine_CreateExporter(This,Result)	\
    ( (This)->lpVtbl -> CreateExporter(This,Result) ) 

#define IEngine_CreateScanManager(This,Result)	\
    ( (This)->lpVtbl -> CreateScanManager(This,Result) ) 

#define IEngine_CreateJpegExtendedParams(This,Result)	\
    ( (This)->lpVtbl -> CreateJpegExtendedParams(This,Result) ) 

#define IEngine_CreateHyperlink(This,Result)	\
    ( (This)->lpVtbl -> CreateHyperlink(This,Result) ) 

#define IEngine_CreateFRDocument(This,Result)	\
    ( (This)->lpVtbl -> CreateFRDocument(This,Result) ) 

#define IEngine_CreateFRDocumentFromImage(This,imageFileName,prepareMode,createdDocument)	\
    ( (This)->lpVtbl -> CreateFRDocumentFromImage(This,imageFileName,prepareMode,createdDocument) ) 

#define IEngine_CreateDocumentInformationDictionary(This,Result)	\
    ( (This)->lpVtbl -> CreateDocumentInformationDictionary(This,Result) ) 

#define IEngine_CreateDocumentInfo(This,Result)	\
    ( (This)->lpVtbl -> CreateDocumentInfo(This,Result) ) 

#define IEngine_CreateTrainingImage(This,Result)	\
    ( (This)->lpVtbl -> CreateTrainingImage(This,Result) ) 

#define IEngine_CreateTrainingImagesCollection(This,Result)	\
    ( (This)->lpVtbl -> CreateTrainingImagesCollection(This,Result) ) 

#define IEngine_CreateObjectsExtractionParams(This,Result)	\
    ( (This)->lpVtbl -> CreateObjectsExtractionParams(This,Result) ) 

#define IEngine_CreateOrientationDetectionParams(This,Result)	\
    ( (This)->lpVtbl -> CreateOrientationDetectionParams(This,Result) ) 

#define IEngine_CreatePdfExtendedParams(This,Result)	\
    ( (This)->lpVtbl -> CreatePdfExtendedParams(This,Result) ) 

#define IEngine_CreateTextOrientation(This,Result)	\
    ( (This)->lpVtbl -> CreateTextOrientation(This,Result) ) 

#define IEngine_OpenImage(This,FolderName,Result)	\
    ( (This)->lpVtbl -> OpenImage(This,FolderName,Result) ) 

#define IEngine_PrepareImage(This,FileName,DestinationFolder,PrepareMode,PageNumber,PasswordCallback,DocumentInfo,Result)	\
    ( (This)->lpVtbl -> PrepareImage(This,FileName,DestinationFolder,PrepareMode,PageNumber,PasswordCallback,DocumentInfo,Result) ) 

#define IEngine_PrepareAndOpenImage(This,FileName,PrepareMode,PasswordCallback,DocumentInfo,Result)	\
    ( (This)->lpVtbl -> PrepareAndOpenImage(This,FileName,PrepareMode,PasswordCallback,DocumentInfo,Result) ) 

#define IEngine_OpenBitmapImage(This,BitmapHandle,Resolution,Result)	\
    ( (This)->lpVtbl -> OpenBitmapImage(This,BitmapHandle,Resolution,Result) ) 

#define IEngine_PrepareBitmap(This,BitmapHandle,DestinationFileName,XResolution,YResolution,PrepareMode)	\
    ( (This)->lpVtbl -> PrepareBitmap(This,BitmapHandle,DestinationFileName,XResolution,YResolution,PrepareMode) ) 

#define IEngine_PrepareAndOpenBitmap(This,BitmapHandle,XResolution,YResolution,PrepareMode,Result)	\
    ( (This)->lpVtbl -> PrepareAndOpenBitmap(This,BitmapHandle,XResolution,YResolution,PrepareMode,Result) ) 

#define IEngine_OpenMemoryImage(This,Format,Width,Height,ByteWidth,Resolution,RawDataPtr,Result)	\
    ( (This)->lpVtbl -> OpenMemoryImage(This,Format,Width,Height,ByteWidth,Resolution,RawDataPtr,Result) ) 

#define IEngine_PrepareMemoryImage(This,Format,Width,Height,ByteWidth,XResolution,YResolution,RawDataPtr,DestinationFileName,PrepareMode)	\
    ( (This)->lpVtbl -> PrepareMemoryImage(This,Format,Width,Height,ByteWidth,XResolution,YResolution,RawDataPtr,DestinationFileName,PrepareMode) ) 

#define IEngine_PrepareAndOpenMemoryImage(This,Format,Width,Height,ByteWidth,XResolution,YResolution,RawDataPtr,PrepareMode,Result)	\
    ( (This)->lpVtbl -> PrepareAndOpenMemoryImage(This,Format,Width,Height,ByteWidth,XResolution,YResolution,RawDataPtr,PrepareMode,Result) ) 

#define IEngine_CreateMultipageImageWriter(This,fileName,fileFormat,multipageWriter)	\
    ( (This)->lpVtbl -> CreateMultipageImageWriter(This,fileName,fileFormat,multipageWriter) ) 

#define IEngine_OpenDib(This,DibHglobal,Resolution,Result)	\
    ( (This)->lpVtbl -> OpenDib(This,DibHglobal,Resolution,Result) ) 

#define IEngine_PrepareDib(This,DibHglobal,DestinationFileName,XResolution,YResolution,PrepareMode)	\
    ( (This)->lpVtbl -> PrepareDib(This,DibHglobal,DestinationFileName,XResolution,YResolution,PrepareMode) ) 

#define IEngine_PrepareAndOpenDib(This,DibHglobal,XResolution,YResolution,PrepareMode,Result)	\
    ( (This)->lpVtbl -> PrepareAndOpenDib(This,DibHglobal,XResolution,YResolution,PrepareMode,Result) ) 

#define IEngine_AnalyzePage(This,ImageDocument,ProcessingParams,Layout,DocumentInfo)	\
    ( (This)->lpVtbl -> AnalyzePage(This,ImageDocument,ProcessingParams,Layout,DocumentInfo) ) 

#define IEngine_RecognizePage(This,ImageDocument,SynthesisParams,ExtractionParams,Layout,DocumentInfo)	\
    ( (This)->lpVtbl -> RecognizePage(This,ImageDocument,SynthesisParams,ExtractionParams,Layout,DocumentInfo) ) 

#define IEngine_AnalyzeAndRecognizePage(This,ImageDocument,ProcessingParams,SynthesisParams,Layout,DocumentInfo)	\
    ( (This)->lpVtbl -> AnalyzeAndRecognizePage(This,ImageDocument,ProcessingParams,SynthesisParams,Layout,DocumentInfo) ) 

#define IEngine_RecognizeImageFile(This,ImageFileName,ProcessingParams,SynthesisParams,DocumentSynthesisParams,ExportFormat,ExportParams,passwordCallback,OutputFileName)	\
    ( (This)->lpVtbl -> RecognizeImageFile(This,ImageFileName,ProcessingParams,SynthesisParams,DocumentSynthesisParams,ExportFormat,ExportParams,passwordCallback,OutputFileName) ) 

#define IEngine_RecognizeImageAsPlainText(This,ImageFileName,ProcessingParams,SynthesisParams,passwordCallback,Result)	\
    ( (This)->lpVtbl -> RecognizeImageAsPlainText(This,ImageFileName,ProcessingParams,SynthesisParams,passwordCallback,Result) ) 

#define IEngine_RecognizeImageDocumentAsPlainText(This,Image,PageProcessingParams,SynthesisParams,DocumentInfo,Results)	\
    ( (This)->lpVtbl -> RecognizeImageDocumentAsPlainText(This,Image,PageProcessingParams,SynthesisParams,DocumentInfo,Results) ) 

#define IEngine_GetNumberOfPagesInImageFile(This,ImageFilePath,PasswordCallback,Result)	\
    ( (This)->lpVtbl -> GetNumberOfPagesInImageFile(This,ImageFilePath,PasswordCallback,Result) ) 

#define IEngine_ExportPage(This,Format,FileName,ImageDocument,Layout,ExportParams,DocumentInfo)	\
    ( (This)->lpVtbl -> ExportPage(This,Format,FileName,ImageDocument,Layout,ExportParams,DocumentInfo) ) 

#define IEngine_ExportPages(This,Format,FileName,ImageDocuments,Layouts,ExportParams,DocumentInfo)	\
    ( (This)->lpVtbl -> ExportPages(This,Format,FileName,ImageDocuments,Layouts,ExportParams,DocumentInfo) ) 

#define IEngine_ConvertLanguageIdToLCID(This,LanguageId,Result)	\
    ( (This)->lpVtbl -> ConvertLanguageIdToLCID(This,LanguageId,Result) ) 

#define IEngine_ConvertLCIDToLanguageId(This,Win32Locale,Result)	\
    ( (This)->lpVtbl -> ConvertLCIDToLanguageId(This,Win32Locale,Result) ) 

#define IEngine_CreateNewDictionary(This,FileName,LanguageId,Result)	\
    ( (This)->lpVtbl -> CreateNewDictionary(This,FileName,LanguageId,Result) ) 

#define IEngine_CreateStandardDictionaryDesc(This,Result)	\
    ( (This)->lpVtbl -> CreateStandardDictionaryDesc(This,Result) ) 

#define IEngine_CreateUserDictionaryDesc(This,Result)	\
    ( (This)->lpVtbl -> CreateUserDictionaryDesc(This,Result) ) 

#define IEngine_CreateRegExpDictionaryDesc(This,Result)	\
    ( (This)->lpVtbl -> CreateRegExpDictionaryDesc(This,Result) ) 

#define IEngine_CreateExternalDictionaryDesc(This,Result)	\
    ( (This)->lpVtbl -> CreateExternalDictionaryDesc(This,Result) ) 

#define IEngine_OpenExistingDictionary(This,FileName,Result)	\
    ( (This)->lpVtbl -> OpenExistingDictionary(This,FileName,Result) ) 

#define IEngine_CreateEmptyUserPattern(This,FileName)	\
    ( (This)->lpVtbl -> CreateEmptyUserPattern(This,FileName) ) 

#define IEngine_EditUserPattern(This,FileName)	\
    ( (This)->lpVtbl -> EditUserPattern(This,FileName) ) 

#define IEngine_TrainUserPattern(This,FileName,TrainingImages,CharacterOrLigature,Flags,TextType)	\
    ( (This)->lpVtbl -> TrainUserPattern(This,FileName,TrainingImages,CharacterOrLigature,Flags,TextType) ) 

#define IEngine_MergePatterns(This,SourceFilesNames,DestinationFileName)	\
    ( (This)->lpVtbl -> MergePatterns(This,SourceFilesNames,DestinationFileName) ) 

#define IEngine_StartLogging(This,LogFileName,WriteMethodCalls)	\
    ( (This)->lpVtbl -> StartLogging(This,LogFileName,WriteMethodCalls) ) 

#define IEngine_StopLogging(This)	\
    ( (This)->lpVtbl -> StopLogging(This) ) 

#define IEngine_LoadModule(This,LoadFlags)	\
    ( (This)->lpVtbl -> LoadModule(This,LoadFlags) ) 

#define IEngine_get_Licenses(This,Result)	\
    ( (This)->lpVtbl -> get_Licenses(This,Result) ) 

#define IEngine_get_CurrentLicense(This,Result)	\
    ( (This)->lpVtbl -> get_CurrentLicense(This,Result) ) 

#define IEngine_SetCurrentLicense(This,TargetLicense,ProjectId)	\
    ( (This)->lpVtbl -> SetCurrentLicense(This,TargetLicense,ProjectId) ) 

#define IEngine_LoadProfile(This,FileName)	\
    ( (This)->lpVtbl -> LoadProfile(This,FileName) ) 

#define IEngine_LoadPredefinedProfile(This,ProfileName)	\
    ( (This)->lpVtbl -> LoadPredefinedProfile(This,ProfileName) ) 

#define IEngine_AnalyzePages(This,ImageDocuments,Layouts,ProcessingParams,DocumentInfo)	\
    ( (This)->lpVtbl -> AnalyzePages(This,ImageDocuments,Layouts,ProcessingParams,DocumentInfo) ) 

#define IEngine_RecognizePages(This,ImageDocuments,Layouts,SynthesisParams,ExtractionParams,DocumentInfo)	\
    ( (This)->lpVtbl -> RecognizePages(This,ImageDocuments,Layouts,SynthesisParams,ExtractionParams,DocumentInfo) ) 

#define IEngine_AnalyzeAndRecognizePages(This,ImageDocument,Layout,ProcessingParams,SynthesisParams,DocumentInfo)	\
    ( (This)->lpVtbl -> AnalyzeAndRecognizePages(This,ImageDocument,Layout,ProcessingParams,SynthesisParams,DocumentInfo) ) 

#define IEngine_SynthesizePages(This,ImageDocuments,Layouts,SynthesisParamsForDocument,DocumentInfo)	\
    ( (This)->lpVtbl -> SynthesizePages(This,ImageDocuments,Layouts,SynthesisParamsForDocument,DocumentInfo) ) 

#define IEngine_SynthesizePagesEx(This,RecognizedPages,SynthesisParamsForDocument,DocumentInfo)	\
    ( (This)->lpVtbl -> SynthesizePagesEx(This,RecognizedPages,SynthesisParamsForDocument,DocumentInfo) ) 

#define IEngine_LoadImageDocFromMemory(This,HGlobal,Result)	\
    ( (This)->lpVtbl -> LoadImageDocFromMemory(This,HGlobal,Result) ) 

#define IEngine_LoadImageDocFromFile(This,FileName,Result)	\
    ( (This)->lpVtbl -> LoadImageDocFromFile(This,FileName,Result) ) 

#define IEngine_CreatePDFExportParams(This,Result)	\
    ( (This)->lpVtbl -> CreatePDFExportParams(This,Result) ) 

#define IEngine_CreateBatchProcessor(This,Result)	\
    ( (This)->lpVtbl -> CreateBatchProcessor(This,Result) ) 

#define IEngine_OpenImageFileFromMemory(This,HGlobal,FileName,FileFormat,PrepareMode,Result)	\
    ( (This)->lpVtbl -> OpenImageFileFromMemory(This,HGlobal,FileName,FileFormat,PrepareMode,Result) ) 

#define IEngine_CreateAltoExportParams(This,Result)	\
    ( (This)->lpVtbl -> CreateAltoExportParams(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IEngine_INTERFACE_DEFINED__ */


#ifndef __IRegion_INTERFACE_DEFINED__
#define __IRegion_INTERFACE_DEFINED__

/* interface IRegion */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IRegion;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001022-0000-1056-976E-008048D53AE3")
    IRegion : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddRect( 
            /* [in] */ long Left,
            /* [in] */ long Top,
            /* [in] */ long Right,
            /* [in] */ long Bottom) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE MakeEmpty( void) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [in] */ long Index,
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [in] */ long Index,
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Right( 
            /* [in] */ long Index,
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Bottom( 
            /* [in] */ long Index,
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IRegion *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRegionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRegion * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRegion * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRegion * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRegion * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRegion * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRegion * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRegion * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IRegion * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddRect )( 
            IRegion * This,
            /* [in] */ long Left,
            /* [in] */ long Top,
            /* [in] */ long Right,
            /* [in] */ long Bottom);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MakeEmpty )( 
            IRegion * This);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IRegion * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            IRegion * This,
            /* [in] */ long Index,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            IRegion * This,
            /* [in] */ long Index,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Right )( 
            IRegion * This,
            /* [in] */ long Index,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Bottom )( 
            IRegion * This,
            /* [in] */ long Index,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IRegion * This,
            /* [in] */ IRegion *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IRegion * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            IRegion * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IRegion * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            IRegion * This,
            /* [in] */ long HGlobal);
        
        END_INTERFACE
    } IRegionVtbl;

    interface IRegion
    {
        CONST_VTBL struct IRegionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRegion_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRegion_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRegion_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRegion_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRegion_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRegion_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRegion_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRegion_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IRegion_AddRect(This,Left,Top,Right,Bottom)	\
    ( (This)->lpVtbl -> AddRect(This,Left,Top,Right,Bottom) ) 

#define IRegion_MakeEmpty(This)	\
    ( (This)->lpVtbl -> MakeEmpty(This) ) 

#define IRegion_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define IRegion_get_Left(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Left(This,Index,Result) ) 

#define IRegion_get_Top(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Top(This,Index,Result) ) 

#define IRegion_get_Right(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Right(This,Index,Result) ) 

#define IRegion_get_Bottom(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Bottom(This,Index,Result) ) 

#define IRegion_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IRegion_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define IRegion_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define IRegion_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IRegion_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRegion_INTERFACE_DEFINED__ */


#ifndef __IParagraphStyle_INTERFACE_DEFINED__
#define __IParagraphStyle_INTERFACE_DEFINED__

/* interface IParagraphStyle */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IParagraphStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010BE-0000-1056-976E-008048D53AE3")
    IParagraphStyle : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ParagraphParams( 
            /* [retval][out] */ IParagraphParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BaseFont( 
            /* [retval][out] */ IFontStyle **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ParagraphRole( 
            /* [retval][out] */ ParagraphRoleEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ParagraphRole( 
            /* [in] */ ParagraphRoleEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HeadingLevel( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_HeadingLevel( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IParagraphStyle *From) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IParagraphStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IParagraphStyle * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IParagraphStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IParagraphStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IParagraphStyle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IParagraphStyle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IParagraphStyle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IParagraphStyle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IParagraphStyle * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ParagraphParams )( 
            IParagraphStyle * This,
            /* [retval][out] */ IParagraphParams **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BaseFont )( 
            IParagraphStyle * This,
            /* [retval][out] */ IFontStyle **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ParagraphRole )( 
            IParagraphStyle * This,
            /* [retval][out] */ ParagraphRoleEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ParagraphRole )( 
            IParagraphStyle * This,
            /* [in] */ ParagraphRoleEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeadingLevel )( 
            IParagraphStyle * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeadingLevel )( 
            IParagraphStyle * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IParagraphStyle * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IParagraphStyle * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IParagraphStyle * This,
            /* [in] */ IParagraphStyle *From);
        
        END_INTERFACE
    } IParagraphStyleVtbl;

    interface IParagraphStyle
    {
        CONST_VTBL struct IParagraphStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IParagraphStyle_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IParagraphStyle_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IParagraphStyle_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IParagraphStyle_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IParagraphStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IParagraphStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IParagraphStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IParagraphStyle_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IParagraphStyle_get_ParagraphParams(This,Result)	\
    ( (This)->lpVtbl -> get_ParagraphParams(This,Result) ) 

#define IParagraphStyle_get_BaseFont(This,Result)	\
    ( (This)->lpVtbl -> get_BaseFont(This,Result) ) 

#define IParagraphStyle_get_ParagraphRole(This,Result)	\
    ( (This)->lpVtbl -> get_ParagraphRole(This,Result) ) 

#define IParagraphStyle_put_ParagraphRole(This,Value)	\
    ( (This)->lpVtbl -> put_ParagraphRole(This,Value) ) 

#define IParagraphStyle_get_HeadingLevel(This,Result)	\
    ( (This)->lpVtbl -> get_HeadingLevel(This,Result) ) 

#define IParagraphStyle_put_HeadingLevel(This,Value)	\
    ( (This)->lpVtbl -> put_HeadingLevel(This,Value) ) 

#define IParagraphStyle_get_Name(This,Result)	\
    ( (This)->lpVtbl -> get_Name(This,Result) ) 

#define IParagraphStyle_put_Name(This,Value)	\
    ( (This)->lpVtbl -> put_Name(This,Value) ) 

#define IParagraphStyle_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IParagraphStyle_INTERFACE_DEFINED__ */


#ifndef __IFontStyle_INTERFACE_DEFINED__
#define __IFontStyle_INTERFACE_DEFINED__

/* interface IFontStyle */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IFontStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010BF-0000-1056-976E-008048D53AE3")
    IFontStyle : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ParagraphStyle( 
            /* [retval][out] */ IParagraphStyle **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsBaseFont( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_OverriddenStyleParams( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsBold( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsBold( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsItalic( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsItalic( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsUnderlined( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsUnderlined( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsStrikeout( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsStrikeout( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsSmallCaps( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsSmallCaps( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HorizontalScale( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_HorizontalScale( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Spacing( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Spacing( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FontSize( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FontSize( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FontName( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FontType( 
            /* [retval][out] */ FontTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetFont( 
            /* [in] */ BSTR FontName,
            /* [in] */ FontTypeEnum FontType) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BaseLine( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BaseLine( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Color( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Color( 
            /* [in] */ long Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFontStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IFontStyle * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IFontStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IFontStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IFontStyle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IFontStyle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IFontStyle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IFontStyle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IFontStyle * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ParagraphStyle )( 
            IFontStyle * This,
            /* [retval][out] */ IParagraphStyle **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsBaseFont )( 
            IFontStyle * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OverriddenStyleParams )( 
            IFontStyle * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsBold )( 
            IFontStyle * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsBold )( 
            IFontStyle * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsItalic )( 
            IFontStyle * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsItalic )( 
            IFontStyle * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsUnderlined )( 
            IFontStyle * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsUnderlined )( 
            IFontStyle * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsStrikeout )( 
            IFontStyle * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsStrikeout )( 
            IFontStyle * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsSmallCaps )( 
            IFontStyle * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsSmallCaps )( 
            IFontStyle * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalScale )( 
            IFontStyle * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalScale )( 
            IFontStyle * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Spacing )( 
            IFontStyle * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Spacing )( 
            IFontStyle * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FontSize )( 
            IFontStyle * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FontSize )( 
            IFontStyle * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FontName )( 
            IFontStyle * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FontType )( 
            IFontStyle * This,
            /* [retval][out] */ FontTypeEnum *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetFont )( 
            IFontStyle * This,
            /* [in] */ BSTR FontName,
            /* [in] */ FontTypeEnum FontType);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BaseLine )( 
            IFontStyle * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BaseLine )( 
            IFontStyle * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Color )( 
            IFontStyle * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Color )( 
            IFontStyle * This,
            /* [in] */ long Value);
        
        END_INTERFACE
    } IFontStyleVtbl;

    interface IFontStyle
    {
        CONST_VTBL struct IFontStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFontStyle_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IFontStyle_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IFontStyle_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IFontStyle_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IFontStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IFontStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IFontStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IFontStyle_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IFontStyle_get_ParagraphStyle(This,Result)	\
    ( (This)->lpVtbl -> get_ParagraphStyle(This,Result) ) 

#define IFontStyle_get_IsBaseFont(This,Result)	\
    ( (This)->lpVtbl -> get_IsBaseFont(This,Result) ) 

#define IFontStyle_get_OverriddenStyleParams(This,Result)	\
    ( (This)->lpVtbl -> get_OverriddenStyleParams(This,Result) ) 

#define IFontStyle_get_IsBold(This,Result)	\
    ( (This)->lpVtbl -> get_IsBold(This,Result) ) 

#define IFontStyle_put_IsBold(This,Value)	\
    ( (This)->lpVtbl -> put_IsBold(This,Value) ) 

#define IFontStyle_get_IsItalic(This,Result)	\
    ( (This)->lpVtbl -> get_IsItalic(This,Result) ) 

#define IFontStyle_put_IsItalic(This,Value)	\
    ( (This)->lpVtbl -> put_IsItalic(This,Value) ) 

#define IFontStyle_get_IsUnderlined(This,Result)	\
    ( (This)->lpVtbl -> get_IsUnderlined(This,Result) ) 

#define IFontStyle_put_IsUnderlined(This,Value)	\
    ( (This)->lpVtbl -> put_IsUnderlined(This,Value) ) 

#define IFontStyle_get_IsStrikeout(This,Result)	\
    ( (This)->lpVtbl -> get_IsStrikeout(This,Result) ) 

#define IFontStyle_put_IsStrikeout(This,Value)	\
    ( (This)->lpVtbl -> put_IsStrikeout(This,Value) ) 

#define IFontStyle_get_IsSmallCaps(This,Result)	\
    ( (This)->lpVtbl -> get_IsSmallCaps(This,Result) ) 

#define IFontStyle_put_IsSmallCaps(This,Value)	\
    ( (This)->lpVtbl -> put_IsSmallCaps(This,Value) ) 

#define IFontStyle_get_HorizontalScale(This,Result)	\
    ( (This)->lpVtbl -> get_HorizontalScale(This,Result) ) 

#define IFontStyle_put_HorizontalScale(This,Value)	\
    ( (This)->lpVtbl -> put_HorizontalScale(This,Value) ) 

#define IFontStyle_get_Spacing(This,Result)	\
    ( (This)->lpVtbl -> get_Spacing(This,Result) ) 

#define IFontStyle_put_Spacing(This,Value)	\
    ( (This)->lpVtbl -> put_Spacing(This,Value) ) 

#define IFontStyle_get_FontSize(This,Result)	\
    ( (This)->lpVtbl -> get_FontSize(This,Result) ) 

#define IFontStyle_put_FontSize(This,Value)	\
    ( (This)->lpVtbl -> put_FontSize(This,Value) ) 

#define IFontStyle_get_FontName(This,Result)	\
    ( (This)->lpVtbl -> get_FontName(This,Result) ) 

#define IFontStyle_get_FontType(This,Result)	\
    ( (This)->lpVtbl -> get_FontType(This,Result) ) 

#define IFontStyle_SetFont(This,FontName,FontType)	\
    ( (This)->lpVtbl -> SetFont(This,FontName,FontType) ) 

#define IFontStyle_get_BaseLine(This,Result)	\
    ( (This)->lpVtbl -> get_BaseLine(This,Result) ) 

#define IFontStyle_put_BaseLine(This,Value)	\
    ( (This)->lpVtbl -> put_BaseLine(This,Value) ) 

#define IFontStyle_get_Color(This,Result)	\
    ( (This)->lpVtbl -> get_Color(This,Result) ) 

#define IFontStyle_put_Color(This,Value)	\
    ( (This)->lpVtbl -> put_Color(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IFontStyle_INTERFACE_DEFINED__ */


#ifndef __IListParams_INTERFACE_DEFINED__
#define __IListParams_INTERFACE_DEFINED__

/* interface IListParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IListParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010CF-0000-1056-976E-008048D53AE3")
    IListParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddToList( 
            /* [in] */ IListParams *listParams) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveFromList( void) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_List( 
            /* [retval][out] */ IList **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ListLevel( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ListLevel( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_OrdinalNumber( 
            /* [retval][out] */ long *Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IListParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IListParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IListParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IListParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IListParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IListParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IListParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IListParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IListParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddToList )( 
            IListParams * This,
            /* [in] */ IListParams *listParams);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveFromList )( 
            IListParams * This);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_List )( 
            IListParams * This,
            /* [retval][out] */ IList **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ListLevel )( 
            IListParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ListLevel )( 
            IListParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OrdinalNumber )( 
            IListParams * This,
            /* [retval][out] */ long *Result);
        
        END_INTERFACE
    } IListParamsVtbl;

    interface IListParams
    {
        CONST_VTBL struct IListParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IListParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IListParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IListParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IListParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IListParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IListParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IListParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IListParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IListParams_AddToList(This,listParams)	\
    ( (This)->lpVtbl -> AddToList(This,listParams) ) 

#define IListParams_RemoveFromList(This)	\
    ( (This)->lpVtbl -> RemoveFromList(This) ) 

#define IListParams_get_List(This,Result)	\
    ( (This)->lpVtbl -> get_List(This,Result) ) 

#define IListParams_get_ListLevel(This,Result)	\
    ( (This)->lpVtbl -> get_ListLevel(This,Result) ) 

#define IListParams_put_ListLevel(This,Value)	\
    ( (This)->lpVtbl -> put_ListLevel(This,Value) ) 

#define IListParams_get_OrdinalNumber(This,Result)	\
    ( (This)->lpVtbl -> get_OrdinalNumber(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IListParams_INTERFACE_DEFINED__ */


#ifndef __IStreamElementLocationParams_INTERFACE_DEFINED__
#define __IStreamElementLocationParams_INTERFACE_DEFINED__

/* interface IStreamElementLocationParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IStreamElementLocationParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010C4-0000-1056-976E-008048D53AE3")
    IStreamElementLocationParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Alignment( 
            /* [retval][out] */ StreamElementAlignmentEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Alignment( 
            /* [in] */ StreamElementAlignmentEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LeftIndent( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_LeftIndent( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RightIndent( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RightIndent( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpaceBefore( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SpaceBefore( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpaceAfter( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SpaceAfter( 
            /* [in] */ long Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IStreamElementLocationParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IStreamElementLocationParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IStreamElementLocationParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IStreamElementLocationParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IStreamElementLocationParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IStreamElementLocationParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IStreamElementLocationParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IStreamElementLocationParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IStreamElementLocationParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Alignment )( 
            IStreamElementLocationParams * This,
            /* [retval][out] */ StreamElementAlignmentEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Alignment )( 
            IStreamElementLocationParams * This,
            /* [in] */ StreamElementAlignmentEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftIndent )( 
            IStreamElementLocationParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LeftIndent )( 
            IStreamElementLocationParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightIndent )( 
            IStreamElementLocationParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RightIndent )( 
            IStreamElementLocationParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpaceBefore )( 
            IStreamElementLocationParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpaceBefore )( 
            IStreamElementLocationParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpaceAfter )( 
            IStreamElementLocationParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpaceAfter )( 
            IStreamElementLocationParams * This,
            /* [in] */ long Value);
        
        END_INTERFACE
    } IStreamElementLocationParamsVtbl;

    interface IStreamElementLocationParams
    {
        CONST_VTBL struct IStreamElementLocationParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IStreamElementLocationParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IStreamElementLocationParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IStreamElementLocationParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IStreamElementLocationParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IStreamElementLocationParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IStreamElementLocationParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IStreamElementLocationParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IStreamElementLocationParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IStreamElementLocationParams_get_Alignment(This,Result)	\
    ( (This)->lpVtbl -> get_Alignment(This,Result) ) 

#define IStreamElementLocationParams_put_Alignment(This,Value)	\
    ( (This)->lpVtbl -> put_Alignment(This,Value) ) 

#define IStreamElementLocationParams_get_LeftIndent(This,Result)	\
    ( (This)->lpVtbl -> get_LeftIndent(This,Result) ) 

#define IStreamElementLocationParams_put_LeftIndent(This,Value)	\
    ( (This)->lpVtbl -> put_LeftIndent(This,Value) ) 

#define IStreamElementLocationParams_get_RightIndent(This,Result)	\
    ( (This)->lpVtbl -> get_RightIndent(This,Result) ) 

#define IStreamElementLocationParams_put_RightIndent(This,Value)	\
    ( (This)->lpVtbl -> put_RightIndent(This,Value) ) 

#define IStreamElementLocationParams_get_SpaceBefore(This,Result)	\
    ( (This)->lpVtbl -> get_SpaceBefore(This,Result) ) 

#define IStreamElementLocationParams_put_SpaceBefore(This,Value)	\
    ( (This)->lpVtbl -> put_SpaceBefore(This,Value) ) 

#define IStreamElementLocationParams_get_SpaceAfter(This,Result)	\
    ( (This)->lpVtbl -> get_SpaceAfter(This,Result) ) 

#define IStreamElementLocationParams_put_SpaceAfter(This,Value)	\
    ( (This)->lpVtbl -> put_SpaceAfter(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IStreamElementLocationParams_INTERFACE_DEFINED__ */


#ifndef __ICharParams_INTERFACE_DEFINED__
#define __ICharParams_INTERFACE_DEFINED__

/* interface ICharParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ICharParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001016-0000-1056-976E-008048D53AE3")
    ICharParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsBold( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsBold( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsItalic( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsItalic( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsUnderlined( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsUnderlined( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsStrikeout( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsStrikeout( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsSubscript( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsSubscript( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsSuperscript( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsSuperscript( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsSmallCaps( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsSmallCaps( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsSuspicious( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsSuspicious( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsProofed( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsProofed( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ ICharParams *From) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LanguageId( 
            /* [retval][out] */ LanguageIdEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_LanguageId( 
            /* [in] */ LanguageIdEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LanguageName( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_LanguageName( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FontSize( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FontSize( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FontName( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FontType( 
            /* [retval][out] */ FontTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetFont( 
            /* [in] */ BSTR FontName,
            /* [in] */ FontTypeEnum FontType) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HorizontalScale( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_HorizontalScale( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Spacing( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Spacing( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BaseLine( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BaseLine( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Color( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Color( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Right( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Bottom( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetRect( 
            /* [in] */ long Left,
            /* [in] */ long Top,
            /* [in] */ long Right,
            /* [in] */ long Bottom) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CharacterRecognitionVariants( 
            /* [retval][out] */ ICharacterRecognitionVariants **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WordRecognitionVariants( 
            /* [retval][out] */ IWordRecognitionVariants **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CharacterRecognitionVariantIndex( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SelectedCharacterRecognitionVariant( 
            /* [retval][out] */ ICharacterRecognitionVariant **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CharacterRegion( 
            /* [retval][out] */ IRegion **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CharacterRegion( 
            /* [in] */ IRegion *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsWordStart( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsWordStart( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FontStyle( 
            /* [retval][out] */ IFontStyle **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FontStyle( 
            /* [in] */ IFontStyle *Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICharParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICharParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICharParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICharParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ICharParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ICharParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ICharParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ICharParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ICharParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsBold )( 
            ICharParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsBold )( 
            ICharParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsItalic )( 
            ICharParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsItalic )( 
            ICharParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsUnderlined )( 
            ICharParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsUnderlined )( 
            ICharParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsStrikeout )( 
            ICharParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsStrikeout )( 
            ICharParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsSubscript )( 
            ICharParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsSubscript )( 
            ICharParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsSuperscript )( 
            ICharParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsSuperscript )( 
            ICharParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsSmallCaps )( 
            ICharParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsSmallCaps )( 
            ICharParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsSuspicious )( 
            ICharParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsSuspicious )( 
            ICharParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsProofed )( 
            ICharParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsProofed )( 
            ICharParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            ICharParams * This,
            /* [in] */ ICharParams *From);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageId )( 
            ICharParams * This,
            /* [retval][out] */ LanguageIdEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LanguageId )( 
            ICharParams * This,
            /* [in] */ LanguageIdEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageName )( 
            ICharParams * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LanguageName )( 
            ICharParams * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FontSize )( 
            ICharParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FontSize )( 
            ICharParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FontName )( 
            ICharParams * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FontType )( 
            ICharParams * This,
            /* [retval][out] */ FontTypeEnum *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetFont )( 
            ICharParams * This,
            /* [in] */ BSTR FontName,
            /* [in] */ FontTypeEnum FontType);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalScale )( 
            ICharParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalScale )( 
            ICharParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Spacing )( 
            ICharParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Spacing )( 
            ICharParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BaseLine )( 
            ICharParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BaseLine )( 
            ICharParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Color )( 
            ICharParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Color )( 
            ICharParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            ICharParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            ICharParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Right )( 
            ICharParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Bottom )( 
            ICharParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetRect )( 
            ICharParams * This,
            /* [in] */ long Left,
            /* [in] */ long Top,
            /* [in] */ long Right,
            /* [in] */ long Bottom);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CharacterRecognitionVariants )( 
            ICharParams * This,
            /* [retval][out] */ ICharacterRecognitionVariants **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WordRecognitionVariants )( 
            ICharParams * This,
            /* [retval][out] */ IWordRecognitionVariants **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CharacterRecognitionVariantIndex )( 
            ICharParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SelectedCharacterRecognitionVariant )( 
            ICharParams * This,
            /* [retval][out] */ ICharacterRecognitionVariant **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CharacterRegion )( 
            ICharParams * This,
            /* [retval][out] */ IRegion **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CharacterRegion )( 
            ICharParams * This,
            /* [in] */ IRegion *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsWordStart )( 
            ICharParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsWordStart )( 
            ICharParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FontStyle )( 
            ICharParams * This,
            /* [retval][out] */ IFontStyle **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FontStyle )( 
            ICharParams * This,
            /* [in] */ IFontStyle *Value);
        
        END_INTERFACE
    } ICharParamsVtbl;

    interface ICharParams
    {
        CONST_VTBL struct ICharParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICharParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICharParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICharParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICharParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ICharParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ICharParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ICharParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ICharParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ICharParams_get_IsBold(This,Result)	\
    ( (This)->lpVtbl -> get_IsBold(This,Result) ) 

#define ICharParams_put_IsBold(This,Value)	\
    ( (This)->lpVtbl -> put_IsBold(This,Value) ) 

#define ICharParams_get_IsItalic(This,Result)	\
    ( (This)->lpVtbl -> get_IsItalic(This,Result) ) 

#define ICharParams_put_IsItalic(This,Value)	\
    ( (This)->lpVtbl -> put_IsItalic(This,Value) ) 

#define ICharParams_get_IsUnderlined(This,Result)	\
    ( (This)->lpVtbl -> get_IsUnderlined(This,Result) ) 

#define ICharParams_put_IsUnderlined(This,Value)	\
    ( (This)->lpVtbl -> put_IsUnderlined(This,Value) ) 

#define ICharParams_get_IsStrikeout(This,Result)	\
    ( (This)->lpVtbl -> get_IsStrikeout(This,Result) ) 

#define ICharParams_put_IsStrikeout(This,Value)	\
    ( (This)->lpVtbl -> put_IsStrikeout(This,Value) ) 

#define ICharParams_get_IsSubscript(This,Result)	\
    ( (This)->lpVtbl -> get_IsSubscript(This,Result) ) 

#define ICharParams_put_IsSubscript(This,Value)	\
    ( (This)->lpVtbl -> put_IsSubscript(This,Value) ) 

#define ICharParams_get_IsSuperscript(This,Result)	\
    ( (This)->lpVtbl -> get_IsSuperscript(This,Result) ) 

#define ICharParams_put_IsSuperscript(This,Value)	\
    ( (This)->lpVtbl -> put_IsSuperscript(This,Value) ) 

#define ICharParams_get_IsSmallCaps(This,Result)	\
    ( (This)->lpVtbl -> get_IsSmallCaps(This,Result) ) 

#define ICharParams_put_IsSmallCaps(This,Value)	\
    ( (This)->lpVtbl -> put_IsSmallCaps(This,Value) ) 

#define ICharParams_get_IsSuspicious(This,Result)	\
    ( (This)->lpVtbl -> get_IsSuspicious(This,Result) ) 

#define ICharParams_put_IsSuspicious(This,Value)	\
    ( (This)->lpVtbl -> put_IsSuspicious(This,Value) ) 

#define ICharParams_get_IsProofed(This,Result)	\
    ( (This)->lpVtbl -> get_IsProofed(This,Result) ) 

#define ICharParams_put_IsProofed(This,Value)	\
    ( (This)->lpVtbl -> put_IsProofed(This,Value) ) 

#define ICharParams_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define ICharParams_get_LanguageId(This,Result)	\
    ( (This)->lpVtbl -> get_LanguageId(This,Result) ) 

#define ICharParams_put_LanguageId(This,Value)	\
    ( (This)->lpVtbl -> put_LanguageId(This,Value) ) 

#define ICharParams_get_LanguageName(This,Result)	\
    ( (This)->lpVtbl -> get_LanguageName(This,Result) ) 

#define ICharParams_put_LanguageName(This,Value)	\
    ( (This)->lpVtbl -> put_LanguageName(This,Value) ) 

#define ICharParams_get_FontSize(This,Result)	\
    ( (This)->lpVtbl -> get_FontSize(This,Result) ) 

#define ICharParams_put_FontSize(This,Value)	\
    ( (This)->lpVtbl -> put_FontSize(This,Value) ) 

#define ICharParams_get_FontName(This,Result)	\
    ( (This)->lpVtbl -> get_FontName(This,Result) ) 

#define ICharParams_get_FontType(This,Result)	\
    ( (This)->lpVtbl -> get_FontType(This,Result) ) 

#define ICharParams_SetFont(This,FontName,FontType)	\
    ( (This)->lpVtbl -> SetFont(This,FontName,FontType) ) 

#define ICharParams_get_HorizontalScale(This,Result)	\
    ( (This)->lpVtbl -> get_HorizontalScale(This,Result) ) 

#define ICharParams_put_HorizontalScale(This,Value)	\
    ( (This)->lpVtbl -> put_HorizontalScale(This,Value) ) 

#define ICharParams_get_Spacing(This,Result)	\
    ( (This)->lpVtbl -> get_Spacing(This,Result) ) 

#define ICharParams_put_Spacing(This,Value)	\
    ( (This)->lpVtbl -> put_Spacing(This,Value) ) 

#define ICharParams_get_BaseLine(This,Result)	\
    ( (This)->lpVtbl -> get_BaseLine(This,Result) ) 

#define ICharParams_put_BaseLine(This,Value)	\
    ( (This)->lpVtbl -> put_BaseLine(This,Value) ) 

#define ICharParams_get_Color(This,Result)	\
    ( (This)->lpVtbl -> get_Color(This,Result) ) 

#define ICharParams_put_Color(This,Value)	\
    ( (This)->lpVtbl -> put_Color(This,Value) ) 

#define ICharParams_get_Left(This,Result)	\
    ( (This)->lpVtbl -> get_Left(This,Result) ) 

#define ICharParams_get_Top(This,Result)	\
    ( (This)->lpVtbl -> get_Top(This,Result) ) 

#define ICharParams_get_Right(This,Result)	\
    ( (This)->lpVtbl -> get_Right(This,Result) ) 

#define ICharParams_get_Bottom(This,Result)	\
    ( (This)->lpVtbl -> get_Bottom(This,Result) ) 

#define ICharParams_SetRect(This,Left,Top,Right,Bottom)	\
    ( (This)->lpVtbl -> SetRect(This,Left,Top,Right,Bottom) ) 

#define ICharParams_get_CharacterRecognitionVariants(This,Result)	\
    ( (This)->lpVtbl -> get_CharacterRecognitionVariants(This,Result) ) 

#define ICharParams_get_WordRecognitionVariants(This,Result)	\
    ( (This)->lpVtbl -> get_WordRecognitionVariants(This,Result) ) 

#define ICharParams_get_CharacterRecognitionVariantIndex(This,Result)	\
    ( (This)->lpVtbl -> get_CharacterRecognitionVariantIndex(This,Result) ) 

#define ICharParams_get_SelectedCharacterRecognitionVariant(This,Result)	\
    ( (This)->lpVtbl -> get_SelectedCharacterRecognitionVariant(This,Result) ) 

#define ICharParams_get_CharacterRegion(This,Result)	\
    ( (This)->lpVtbl -> get_CharacterRegion(This,Result) ) 

#define ICharParams_put_CharacterRegion(This,Result)	\
    ( (This)->lpVtbl -> put_CharacterRegion(This,Result) ) 

#define ICharParams_get_IsWordStart(This,Result)	\
    ( (This)->lpVtbl -> get_IsWordStart(This,Result) ) 

#define ICharParams_put_IsWordStart(This,Value)	\
    ( (This)->lpVtbl -> put_IsWordStart(This,Value) ) 

#define ICharParams_get_FontStyle(This,Result)	\
    ( (This)->lpVtbl -> get_FontStyle(This,Result) ) 

#define ICharParams_put_FontStyle(This,Value)	\
    ( (This)->lpVtbl -> put_FontStyle(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICharParams_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_CharParams;

#ifdef __cplusplus

class DECLSPEC_UUID("10002016-0000-1056-976E-008048D53AE3")
CharParams;
#endif

#ifndef __ITabPosition_INTERFACE_DEFINED__
#define __ITabPosition_INTERFACE_DEFINED__

/* interface ITabPosition */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ITabPosition;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001035-0000-1056-976E-008048D53AE3")
    ITabPosition : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Alignment( 
            /* [retval][out] */ ParagraphTabAlignmentEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Alignment( 
            /* [in] */ ParagraphTabAlignmentEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TabLeaderType( 
            /* [retval][out] */ TabLeaderTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TabLeaderType( 
            /* [in] */ TabLeaderTypeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ ITabPosition *From) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITabPositionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITabPosition * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITabPosition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITabPosition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITabPosition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITabPosition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITabPosition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITabPosition * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ITabPosition * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            ITabPosition * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            ITabPosition * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Alignment )( 
            ITabPosition * This,
            /* [retval][out] */ ParagraphTabAlignmentEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Alignment )( 
            ITabPosition * This,
            /* [in] */ ParagraphTabAlignmentEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabLeaderType )( 
            ITabPosition * This,
            /* [retval][out] */ TabLeaderTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabLeaderType )( 
            ITabPosition * This,
            /* [in] */ TabLeaderTypeEnum Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            ITabPosition * This,
            /* [in] */ ITabPosition *From);
        
        END_INTERFACE
    } ITabPositionVtbl;

    interface ITabPosition
    {
        CONST_VTBL struct ITabPositionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITabPosition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITabPosition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITabPosition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITabPosition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITabPosition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITabPosition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITabPosition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITabPosition_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ITabPosition_get_Position(This,Result)	\
    ( (This)->lpVtbl -> get_Position(This,Result) ) 

#define ITabPosition_put_Position(This,Value)	\
    ( (This)->lpVtbl -> put_Position(This,Value) ) 

#define ITabPosition_get_Alignment(This,Result)	\
    ( (This)->lpVtbl -> get_Alignment(This,Result) ) 

#define ITabPosition_put_Alignment(This,Value)	\
    ( (This)->lpVtbl -> put_Alignment(This,Value) ) 

#define ITabPosition_get_TabLeaderType(This,Result)	\
    ( (This)->lpVtbl -> get_TabLeaderType(This,Result) ) 

#define ITabPosition_put_TabLeaderType(This,Value)	\
    ( (This)->lpVtbl -> put_TabLeaderType(This,Value) ) 

#define ITabPosition_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITabPosition_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_TabPosition;

#ifdef __cplusplus

class DECLSPEC_UUID("10002034-0000-1056-976E-008048D53AE3")
TabPosition;
#endif

#ifndef __ITabPositions_INTERFACE_DEFINED__
#define __ITabPositions_INTERFACE_DEFINED__

/* interface ITabPositions */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ITabPositions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001062-0000-1056-976E-008048D53AE3")
    ITabPositions : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ ITabPosition **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ ITabPosition **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ ITabPosition *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ long Index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveAll( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ ITabPositions *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateTabPosition( 
            /* [retval][out] */ ITabPosition **Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITabPositionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITabPositions * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITabPositions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITabPositions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITabPositions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITabPositions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITabPositions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITabPositions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            ITabPositions * This,
            /* [in] */ long Index,
            /* [retval][out] */ ITabPosition **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ITabPositions * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ITabPositions * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ITabPositions * This,
            /* [in] */ long Index,
            /* [retval][out] */ ITabPosition **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            ITabPositions * This,
            /* [in] */ ITabPosition *Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            ITabPositions * This,
            /* [in] */ long Index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAll )( 
            ITabPositions * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            ITabPositions * This,
            /* [in] */ ITabPositions *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateTabPosition )( 
            ITabPositions * This,
            /* [retval][out] */ ITabPosition **Result);
        
        END_INTERFACE
    } ITabPositionsVtbl;

    interface ITabPositions
    {
        CONST_VTBL struct ITabPositionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITabPositions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITabPositions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITabPositions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITabPositions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITabPositions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITabPositions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITabPositions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITabPositions_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define ITabPositions_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ITabPositions_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define ITabPositions_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#define ITabPositions_Add(This,Value)	\
    ( (This)->lpVtbl -> Add(This,Value) ) 

#define ITabPositions_Remove(This,Index)	\
    ( (This)->lpVtbl -> Remove(This,Index) ) 

#define ITabPositions_RemoveAll(This)	\
    ( (This)->lpVtbl -> RemoveAll(This) ) 

#define ITabPositions_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define ITabPositions_CreateTabPosition(This,Result)	\
    ( (This)->lpVtbl -> CreateTabPosition(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITabPositions_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_TabPositions;

#ifdef __cplusplus

class DECLSPEC_UUID("10002054-0000-1056-976E-008048D53AE3")
TabPositions;
#endif

#ifndef __IParagraphParams_INTERFACE_DEFINED__
#define __IParagraphParams_INTERFACE_DEFINED__

/* interface IParagraphParams */
/* [helpstring][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IParagraphParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001015-0000-1056-976E-008048D53AE3")
    IParagraphParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsRightToLeft( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsRightToLeft( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ParagraphAlignment( 
            /* [retval][out] */ ParagraphAlignmentEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ParagraphAlignment( 
            /* [in] */ ParagraphAlignmentEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LeftIndent( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_LeftIndent( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RightIndent( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RightIndent( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpaceBefore( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SpaceBefore( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpaceAfter( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SpaceAfter( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FirstLineIndent( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FirstLineIndent( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LineSpacing( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_LineSpacing( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BackgroundColor( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BackgroundColor( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IParagraphParams *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IParagraphParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IParagraphParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IParagraphParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IParagraphParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IParagraphParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IParagraphParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IParagraphParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IParagraphParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IParagraphParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsRightToLeft )( 
            IParagraphParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsRightToLeft )( 
            IParagraphParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ParagraphAlignment )( 
            IParagraphParams * This,
            /* [retval][out] */ ParagraphAlignmentEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ParagraphAlignment )( 
            IParagraphParams * This,
            /* [in] */ ParagraphAlignmentEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftIndent )( 
            IParagraphParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LeftIndent )( 
            IParagraphParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightIndent )( 
            IParagraphParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RightIndent )( 
            IParagraphParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpaceBefore )( 
            IParagraphParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpaceBefore )( 
            IParagraphParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpaceAfter )( 
            IParagraphParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpaceAfter )( 
            IParagraphParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FirstLineIndent )( 
            IParagraphParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FirstLineIndent )( 
            IParagraphParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineSpacing )( 
            IParagraphParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LineSpacing )( 
            IParagraphParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundColor )( 
            IParagraphParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundColor )( 
            IParagraphParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IParagraphParams * This,
            /* [in] */ IParagraphParams *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IParagraphParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            IParagraphParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IParagraphParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            IParagraphParams * This,
            /* [in] */ long HGlobal);
        
        END_INTERFACE
    } IParagraphParamsVtbl;

    interface IParagraphParams
    {
        CONST_VTBL struct IParagraphParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IParagraphParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IParagraphParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IParagraphParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IParagraphParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IParagraphParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IParagraphParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IParagraphParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IParagraphParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IParagraphParams_get_IsRightToLeft(This,Result)	\
    ( (This)->lpVtbl -> get_IsRightToLeft(This,Result) ) 

#define IParagraphParams_put_IsRightToLeft(This,Value)	\
    ( (This)->lpVtbl -> put_IsRightToLeft(This,Value) ) 

#define IParagraphParams_get_ParagraphAlignment(This,Result)	\
    ( (This)->lpVtbl -> get_ParagraphAlignment(This,Result) ) 

#define IParagraphParams_put_ParagraphAlignment(This,Value)	\
    ( (This)->lpVtbl -> put_ParagraphAlignment(This,Value) ) 

#define IParagraphParams_get_LeftIndent(This,Result)	\
    ( (This)->lpVtbl -> get_LeftIndent(This,Result) ) 

#define IParagraphParams_put_LeftIndent(This,Value)	\
    ( (This)->lpVtbl -> put_LeftIndent(This,Value) ) 

#define IParagraphParams_get_RightIndent(This,Result)	\
    ( (This)->lpVtbl -> get_RightIndent(This,Result) ) 

#define IParagraphParams_put_RightIndent(This,Value)	\
    ( (This)->lpVtbl -> put_RightIndent(This,Value) ) 

#define IParagraphParams_get_SpaceBefore(This,Result)	\
    ( (This)->lpVtbl -> get_SpaceBefore(This,Result) ) 

#define IParagraphParams_put_SpaceBefore(This,Value)	\
    ( (This)->lpVtbl -> put_SpaceBefore(This,Value) ) 

#define IParagraphParams_get_SpaceAfter(This,Result)	\
    ( (This)->lpVtbl -> get_SpaceAfter(This,Result) ) 

#define IParagraphParams_put_SpaceAfter(This,Value)	\
    ( (This)->lpVtbl -> put_SpaceAfter(This,Value) ) 

#define IParagraphParams_get_FirstLineIndent(This,Result)	\
    ( (This)->lpVtbl -> get_FirstLineIndent(This,Result) ) 

#define IParagraphParams_put_FirstLineIndent(This,Value)	\
    ( (This)->lpVtbl -> put_FirstLineIndent(This,Value) ) 

#define IParagraphParams_get_LineSpacing(This,Result)	\
    ( (This)->lpVtbl -> get_LineSpacing(This,Result) ) 

#define IParagraphParams_put_LineSpacing(This,Value)	\
    ( (This)->lpVtbl -> put_LineSpacing(This,Value) ) 

#define IParagraphParams_get_BackgroundColor(This,Result)	\
    ( (This)->lpVtbl -> get_BackgroundColor(This,Result) ) 

#define IParagraphParams_put_BackgroundColor(This,Value)	\
    ( (This)->lpVtbl -> put_BackgroundColor(This,Value) ) 

#define IParagraphParams_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IParagraphParams_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define IParagraphParams_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define IParagraphParams_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IParagraphParams_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IParagraphParams_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_ParagraphParams;

#ifdef __cplusplus

class DECLSPEC_UUID("10002015-0000-1056-976E-008048D53AE3")
ParagraphParams;
#endif

#ifndef __IParagraphLine_INTERFACE_DEFINED__
#define __IParagraphLine_INTERFACE_DEFINED__

/* interface IParagraphLine */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IParagraphLine;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001019-0000-1056-976E-008048D53AE3")
    IParagraphLine : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Right( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Bottom( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BaseLine( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FirstCharIndex( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CharactersCount( 
            /* [retval][out] */ long *Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IParagraphLineVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IParagraphLine * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IParagraphLine * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IParagraphLine * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IParagraphLine * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IParagraphLine * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IParagraphLine * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IParagraphLine * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IParagraphLine * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            IParagraphLine * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            IParagraphLine * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Right )( 
            IParagraphLine * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Bottom )( 
            IParagraphLine * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BaseLine )( 
            IParagraphLine * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FirstCharIndex )( 
            IParagraphLine * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CharactersCount )( 
            IParagraphLine * This,
            /* [retval][out] */ long *Result);
        
        END_INTERFACE
    } IParagraphLineVtbl;

    interface IParagraphLine
    {
        CONST_VTBL struct IParagraphLineVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IParagraphLine_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IParagraphLine_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IParagraphLine_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IParagraphLine_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IParagraphLine_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IParagraphLine_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IParagraphLine_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IParagraphLine_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IParagraphLine_get_Left(This,Result)	\
    ( (This)->lpVtbl -> get_Left(This,Result) ) 

#define IParagraphLine_get_Top(This,Result)	\
    ( (This)->lpVtbl -> get_Top(This,Result) ) 

#define IParagraphLine_get_Right(This,Result)	\
    ( (This)->lpVtbl -> get_Right(This,Result) ) 

#define IParagraphLine_get_Bottom(This,Result)	\
    ( (This)->lpVtbl -> get_Bottom(This,Result) ) 

#define IParagraphLine_get_BaseLine(This,Result)	\
    ( (This)->lpVtbl -> get_BaseLine(This,Result) ) 

#define IParagraphLine_get_FirstCharIndex(This,Result)	\
    ( (This)->lpVtbl -> get_FirstCharIndex(This,Result) ) 

#define IParagraphLine_get_CharactersCount(This,Result)	\
    ( (This)->lpVtbl -> get_CharactersCount(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IParagraphLine_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_ParagraphLine;

#ifdef __cplusplus

class DECLSPEC_UUID("10002019-0000-1056-976E-008048D53AE3")
ParagraphLine;
#endif

#ifndef __IParagraphLines_INTERFACE_DEFINED__
#define __IParagraphLines_INTERFACE_DEFINED__

/* interface IParagraphLines */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IParagraphLines;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001018-0000-1056-976E-008048D53AE3")
    IParagraphLines : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ IParagraphLine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ IParagraphLine **Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IParagraphLinesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IParagraphLines * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IParagraphLines * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IParagraphLines * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IParagraphLines * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IParagraphLines * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IParagraphLines * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IParagraphLines * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            IParagraphLines * This,
            /* [in] */ long Index,
            /* [retval][out] */ IParagraphLine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IParagraphLines * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IParagraphLines * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IParagraphLines * This,
            /* [in] */ long Index,
            /* [retval][out] */ IParagraphLine **Result);
        
        END_INTERFACE
    } IParagraphLinesVtbl;

    interface IParagraphLines
    {
        CONST_VTBL struct IParagraphLinesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IParagraphLines_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IParagraphLines_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IParagraphLines_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IParagraphLines_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IParagraphLines_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IParagraphLines_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IParagraphLines_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IParagraphLines_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define IParagraphLines_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IParagraphLines_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define IParagraphLines_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IParagraphLines_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_ParagraphLines;

#ifdef __cplusplus

class DECLSPEC_UUID("10002018-0000-1056-976E-008048D53AE3")
ParagraphLines;
#endif


#ifndef __CharacterFlags_MODULE_DEFINED__
#define __CharacterFlags_MODULE_DEFINED__


/* module CharacterFlags */
/* [helpstring][helpcontext] */ 

/* [helpstring][helpcontext] */ const long CFL_Subscript	=	0x1;

/* [helpstring][helpcontext] */ const long CFL_Superscript	=	0x2;

/* [helpstring][helpcontext] */ const long CFL_Suspicious	=	0x100;

/* [helpstring][helpcontext] */ const long CFL_Proofed	=	0x800;

/* [helpstring][helpcontext] */ const long CFL_LanguageID	=	0x10000;

/* [helpstring][helpcontext] */ const long CFL_LanguageName	=	0x20000;

/* [helpstring][helpcontext] */ const long CFL_Picture	=	0x40000;

#endif /* __CharacterFlags_MODULE_DEFINED__ */

#ifndef __IParagraph_INTERFACE_DEFINED__
#define __IParagraph_INTERFACE_DEFINED__

/* interface IParagraph */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IParagraph;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001014-0000-1056-976E-008048D53AE3")
    IParagraph : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
		virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ParentText(IText** Result) = 0;

        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ExtendedParams( 
            /* [retval][out] */ IParagraphParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ExtendedParams( 
            /* [in] */ IParagraphParams *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Lines( 
            /* [retval][out] */ IParagraphLines **Result) = 0;      
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Right( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Bottom( 
            /* [retval][out] */ long *Result) = 0;   

		 virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE SetRect(
			 /* [in] */ long Left,
            /* [in] */ long Top,
            /* [in] */ long Right,
            /* [in] */ long Bottom) = 0;

		      virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *Result) = 0;
		         
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Length( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetCharParams( 
            /* [in] */ long Position,
            /* [in] */ ICharParams *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetCharParams( 
            /* [in] */ long Position,
            /* [in] */ long Count,
            /* [in] */ ICharParams *Params,
            /* [in] */ long CharFlagMask,
            /* [in] */ long StyleFlagMask) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NextGroup( 
            /* [in] */ long Position,
            /* [in] */ long CharFlagMask,
            /* [in] */ long StyleFlagMask,
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ long Position,
            /* [in] */ BSTR String,
            /* [in] */ ICharParams *Params) = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE get_ImageEnhancerValues_donotuse() = 0;
        
        //virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_InlinePictureId( 
        //    /* [in] */ long Position,
        //    /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetDropCapCharParams( 
            /* [in] */ long Pos,
            /* [retval][out] */ ICharParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DropCapCharsCount( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DropCapCharsCount( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ long FromPos,
            /* [defaultvalue][in] */ long ToPos = -1) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range( 
            /* [in] */ long FromPos,
            /* [in] */ long ToPos,
            /* [retval][out] */ BSTR *String) = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE get_TabLeaderInfo_donotuse() = 0;
        
        //virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TabPositions( 
        //    /* [retval][out] */ ITabPositions **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Hyperlink( 
            /* [in] */ long Position,
            /* [retval][out] */ IHyperlink **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetHyperlink( 
            /* [in] */ long Position,
            /* [in] */ long Count,
            /* [in] */ IHyperlink *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetHyperlinkRange( 
            /* [in] */ long Position,
            /* [out] */ long *StartPos,
            /* [out] */ long *Count) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Bookmark( 
            /* [in] */ long Position,
            /* [retval][out] */ BSTR *Bookmark) = 0;
        
        //virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BookmarkCount( 
        //    /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetBookmark( 
            /* [in] */ long Position,
            /* [in] */ long Count,
            /* [in] */ BSTR Bookmark) = 0;      
       
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetBookmarkRange( 
            /* [in] */ BSTR Bookmark,
            /* [out] */ long *StartPos,
            /* [out] */ long *Count) = 0;

		 //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteBookmark( 
   //         /* [in] */ BSTR Bookmark) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetWordRecognitionVariants( 
            /* [in] */ long Position,
            /* [retval][out] */ IWordRecognitionVariants **Result) = 0;
        
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertParagraphBreak( 
        //    /* [in] */ long Position,
        //    /* [in] */ ICharParams *CharParams) = 0;
        //
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertText( 
        //    /* [in] */ long Pos,
        //    /* [in] */ IText *Text) = 0;
        //
        //virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ParagraphStyle( 
        //    /* [retval][out] */ IParagraphStyle **Result) = 0;
        //
        //virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ParagraphStyle( 
        //    /* [in] */ IParagraphStyle *Value) = 0;
        //
        //virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ListParams( 
        //    /* [retval][out] */ IListParams **Result) = 0;
        //
        //virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HasOverflowedHead( 
        //    /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        //
        //virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HasOverflowedTail( 
        //    /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        //
        //virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ColumnNumber( 
        //    /* [in] */ long Position,
        //    /* [retval][out] */ long *Result) = 0;

		 virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Words( 
            /* [retval][out] */ IWords **Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IParagraphVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IParagraph * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IParagraph * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IParagraph * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IParagraph * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IParagraph * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IParagraph * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IParagraph * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IParagraph * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExtendedParams )( 
            IParagraph * This,
            /* [retval][out] */ IParagraphParams **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ExtendedParams )( 
            IParagraph * This,
            /* [in] */ IParagraphParams *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Lines )( 
            IParagraph * This,
            /* [retval][out] */ IParagraphLines **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Words )( 
            IParagraph * This,
            /* [retval][out] */ IWords **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            IParagraph * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            IParagraph * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Right )( 
            IParagraph * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Bottom )( 
            IParagraph * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            IParagraph * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            IParagraph * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetCharParams )( 
            IParagraph * This,
            /* [in] */ long Position,
            /* [in] */ ICharParams *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetCharParams )( 
            IParagraph * This,
            /* [in] */ long Position,
            /* [in] */ long Count,
            /* [in] */ ICharParams *Params,
            /* [in] */ long CharFlagMask,
            /* [in] */ long StyleFlagMask);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NextGroup )( 
            IParagraph * This,
            /* [in] */ long Position,
            /* [in] */ long CharFlagMask,
            /* [in] */ long StyleFlagMask,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            IParagraph * This,
            /* [in] */ long Position,
            /* [in] */ BSTR String,
            /* [in] */ ICharParams *Params);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_InlinePictureId )( 
            IParagraph * This,
            /* [in] */ long Position,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetDropCapCharParams )( 
            IParagraph * This,
            /* [in] */ long Pos,
            /* [retval][out] */ ICharParams **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DropCapCharsCount )( 
            IParagraph * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DropCapCharsCount )( 
            IParagraph * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IParagraph * This,
            /* [in] */ long FromPos,
            /* [defaultvalue][in] */ long ToPos);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Range )( 
            IParagraph * This,
            /* [in] */ long FromPos,
            /* [in] */ long ToPos,
            /* [retval][out] */ BSTR *String);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabPositions )( 
            IParagraph * This,
            /* [retval][out] */ ITabPositions **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlink )( 
            IParagraph * This,
            /* [in] */ long Position,
            /* [retval][out] */ IHyperlink **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetHyperlink )( 
            IParagraph * This,
            /* [in] */ long Position,
            /* [in] */ long Count,
            /* [in] */ IHyperlink *Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetHyperlinkRange )( 
            IParagraph * This,
            /* [in] */ long Position,
            /* [out] */ long *StartPos,
            /* [out] */ long *Count);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Bookmark )( 
            IParagraph * This,
            /* [in] */ long Index,
            /* [retval][out] */ BSTR *Bookmark);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BookmarkCount )( 
            IParagraph * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetBookmark )( 
            IParagraph * This,
            /* [in] */ long Position,
            /* [in] */ long Count,
            /* [in] */ BSTR Bookmark);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteBookmark )( 
            IParagraph * This,
            /* [in] */ BSTR Bookmark);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetBookmarkRange )( 
            IParagraph * This,
            /* [in] */ BSTR Bookmark,
            /* [out] */ long *StartPos,
            /* [out] */ long *Count);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetWordRecognitionVariants )( 
            IParagraph * This,
            /* [in] */ long Position,
            /* [retval][out] */ IWordRecognitionVariants **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertParagraphBreak )( 
            IParagraph * This,
            /* [in] */ long Position,
            /* [in] */ ICharParams *CharParams);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertText )( 
            IParagraph * This,
            /* [in] */ long Pos,
            /* [in] */ IText *Text);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ParagraphStyle )( 
            IParagraph * This,
            /* [retval][out] */ IParagraphStyle **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ParagraphStyle )( 
            IParagraph * This,
            /* [in] */ IParagraphStyle *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ListParams )( 
            IParagraph * This,
            /* [retval][out] */ IListParams **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasOverflowedHead )( 
            IParagraph * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasOverflowedTail )( 
            IParagraph * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColumnNumber )( 
            IParagraph * This,
            /* [in] */ long Position,
            /* [retval][out] */ long *Result);
        
        END_INTERFACE
    } IParagraphVtbl;

    interface IParagraph
    {
        CONST_VTBL struct IParagraphVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IParagraph_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IParagraph_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IParagraph_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IParagraph_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IParagraph_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IParagraph_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IParagraph_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IParagraph_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IParagraph_get_ExtendedParams(This,Result)	\
    ( (This)->lpVtbl -> get_ExtendedParams(This,Result) ) 

#define IParagraph_put_ExtendedParams(This,Value)	\
    ( (This)->lpVtbl -> put_ExtendedParams(This,Value) ) 

#define IParagraph_get_Lines(This,Result)	\
    ( (This)->lpVtbl -> get_Lines(This,Result) ) 

#define IParagraph_get_Words(This,Result)	\
    ( (This)->lpVtbl -> get_Words(This,Result) ) 

#define IParagraph_get_Left(This,Result)	\
    ( (This)->lpVtbl -> get_Left(This,Result) ) 

#define IParagraph_get_Top(This,Result)	\
    ( (This)->lpVtbl -> get_Top(This,Result) ) 

#define IParagraph_get_Right(This,Result)	\
    ( (This)->lpVtbl -> get_Right(This,Result) ) 

#define IParagraph_get_Bottom(This,Result)	\
    ( (This)->lpVtbl -> get_Bottom(This,Result) ) 

#define IParagraph_get_Text(This,Result)	\
    ( (This)->lpVtbl -> get_Text(This,Result) ) 

#define IParagraph_get_Length(This,Result)	\
    ( (This)->lpVtbl -> get_Length(This,Result) ) 

#define IParagraph_GetCharParams(This,Position,Result)	\
    ( (This)->lpVtbl -> GetCharParams(This,Position,Result) ) 

#define IParagraph_SetCharParams(This,Position,Count,Params,CharFlagMask,StyleFlagMask)	\
    ( (This)->lpVtbl -> SetCharParams(This,Position,Count,Params,CharFlagMask,StyleFlagMask) ) 

#define IParagraph_NextGroup(This,Position,CharFlagMask,StyleFlagMask,Result)	\
    ( (This)->lpVtbl -> NextGroup(This,Position,CharFlagMask,StyleFlagMask,Result) ) 

#define IParagraph_Insert(This,Position,String,Params)	\
    ( (This)->lpVtbl -> Insert(This,Position,String,Params) ) 

#define IParagraph_get_InlinePictureId(This,Position,Result)	\
    ( (This)->lpVtbl -> get_InlinePictureId(This,Position,Result) ) 

#define IParagraph_GetDropCapCharParams(This,Pos,Result)	\
    ( (This)->lpVtbl -> GetDropCapCharParams(This,Pos,Result) ) 

#define IParagraph_get_DropCapCharsCount(This,Result)	\
    ( (This)->lpVtbl -> get_DropCapCharsCount(This,Result) ) 

#define IParagraph_put_DropCapCharsCount(This,Value)	\
    ( (This)->lpVtbl -> put_DropCapCharsCount(This,Value) ) 

#define IParagraph_Remove(This,FromPos,ToPos)	\
    ( (This)->lpVtbl -> Remove(This,FromPos,ToPos) ) 

#define IParagraph_Range(This,FromPos,ToPos,String)	\
    ( (This)->lpVtbl -> Range(This,FromPos,ToPos,String) ) 

#define IParagraph_get_TabPositions(This,Result)	\
    ( (This)->lpVtbl -> get_TabPositions(This,Result) ) 

#define IParagraph_get_Hyperlink(This,Position,Result)	\
    ( (This)->lpVtbl -> get_Hyperlink(This,Position,Result) ) 

#define IParagraph_SetHyperlink(This,Position,Count,Value)	\
    ( (This)->lpVtbl -> SetHyperlink(This,Position,Count,Value) ) 

#define IParagraph_GetHyperlinkRange(This,Position,StartPos,Count)	\
    ( (This)->lpVtbl -> GetHyperlinkRange(This,Position,StartPos,Count) ) 

#define IParagraph_get_Bookmark(This,Index,Bookmark)	\
    ( (This)->lpVtbl -> get_Bookmark(This,Index,Bookmark) ) 

#define IParagraph_get_BookmarkCount(This,Result)	\
    ( (This)->lpVtbl -> get_BookmarkCount(This,Result) ) 

#define IParagraph_SetBookmark(This,Position,Count,Bookmark)	\
    ( (This)->lpVtbl -> SetBookmark(This,Position,Count,Bookmark) ) 

#define IParagraph_DeleteBookmark(This,Bookmark)	\
    ( (This)->lpVtbl -> DeleteBookmark(This,Bookmark) ) 

#define IParagraph_GetBookmarkRange(This,Bookmark,StartPos,Count)	\
    ( (This)->lpVtbl -> GetBookmarkRange(This,Bookmark,StartPos,Count) ) 

#define IParagraph_GetWordRecognitionVariants(This,Position,Result)	\
    ( (This)->lpVtbl -> GetWordRecognitionVariants(This,Position,Result) ) 

#define IParagraph_InsertParagraphBreak(This,Position,CharParams)	\
    ( (This)->lpVtbl -> InsertParagraphBreak(This,Position,CharParams) ) 

#define IParagraph_InsertText(This,Pos,Text)	\
    ( (This)->lpVtbl -> InsertText(This,Pos,Text) ) 

#define IParagraph_get_ParagraphStyle(This,Result)	\
    ( (This)->lpVtbl -> get_ParagraphStyle(This,Result) ) 

#define IParagraph_put_ParagraphStyle(This,Value)	\
    ( (This)->lpVtbl -> put_ParagraphStyle(This,Value) ) 

#define IParagraph_get_ListParams(This,Result)	\
    ( (This)->lpVtbl -> get_ListParams(This,Result) ) 

#define IParagraph_get_HasOverflowedHead(This,Result)	\
    ( (This)->lpVtbl -> get_HasOverflowedHead(This,Result) ) 

#define IParagraph_get_HasOverflowedTail(This,Result)	\
    ( (This)->lpVtbl -> get_HasOverflowedTail(This,Result) ) 

#define IParagraph_get_ColumnNumber(This,Position,Result)	\
    ( (This)->lpVtbl -> get_ColumnNumber(This,Position,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IParagraph_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_Paragraph;

#ifdef __cplusplus

class DECLSPEC_UUID("10002014-0000-1056-976E-008048D53AE3")
Paragraph;
#endif

#ifndef __IParagraphs_INTERFACE_DEFINED__
#define __IParagraphs_INTERFACE_DEFINED__

/* interface IParagraphs */
/* [helpstring][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IParagraphs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001013-0000-1056-976E-008048D53AE3")
    IParagraphs : public IDispatch
    {
    public:
        //virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
        //    /* [in] */ long Index,
        //    /* [retval][out] */ IParagraph **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ IParagraph **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Find( 
            /* [in] */ IParagraph *Paragraph,
            /* [retval][out] */ long *Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IParagraphsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IParagraphs * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IParagraphs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IParagraphs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IParagraphs * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IParagraphs * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IParagraphs * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IParagraphs * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            IParagraphs * This,
            /* [in] */ long Index,
            /* [retval][out] */ IParagraph **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IParagraphs * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IParagraphs * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IParagraphs * This,
            /* [in] */ long Index,
            /* [retval][out] */ IParagraph **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetIndex )( 
            IParagraphs * This,
            /* [in] */ IParagraph *Paragraph,
            /* [retval][out] */ long *Result);
        
        END_INTERFACE
    } IParagraphsVtbl;

    interface IParagraphs
    {
        CONST_VTBL struct IParagraphsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IParagraphs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IParagraphs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IParagraphs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IParagraphs_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IParagraphs_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IParagraphs_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IParagraphs_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IParagraphs_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define IParagraphs_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IParagraphs_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define IParagraphs_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#define IParagraphs_GetIndex(This,Paragraph,Result)	\
    ( (This)->lpVtbl -> GetIndex(This,Paragraph,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IParagraphs_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_Paragraphs;

#ifdef __cplusplus

class DECLSPEC_UUID("10002013-0000-1056-976E-008048D53AE3")
Paragraphs;
#endif

#ifndef __IWordRecognitionVariant_INTERFACE_DEFINED__
#define __IWordRecognitionVariant_INTERFACE_DEFINED__

/* interface IWordRecognitionVariant */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWordRecognitionVariant;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001069-0000-1056-976E-008048D53AE3")
    IWordRecognitionVariant : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetCharParams( 
            /* [in] */ long pos,
            /* [in] */ ICharParams *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ModelType( 
            /* [retval][out] */ WordModelTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WordConfidence( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MeanStrokeWidth( 
            /* [retval][out] */ double *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsWordFromDictionary( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWordRecognitionVariantVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWordRecognitionVariant * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWordRecognitionVariant * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWordRecognitionVariant * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWordRecognitionVariant * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWordRecognitionVariant * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWordRecognitionVariant * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWordRecognitionVariant * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IWordRecognitionVariant * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            IWordRecognitionVariant * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetCharParams )( 
            IWordRecognitionVariant * This,
            /* [in] */ long pos,
            /* [in] */ ICharParams *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ModelType )( 
            IWordRecognitionVariant * This,
            /* [retval][out] */ WordModelTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WordConfidence )( 
            IWordRecognitionVariant * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MeanStrokeWidth )( 
            IWordRecognitionVariant * This,
            /* [retval][out] */ double *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsWordFromDictionary )( 
            IWordRecognitionVariant * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        END_INTERFACE
    } IWordRecognitionVariantVtbl;

    interface IWordRecognitionVariant
    {
        CONST_VTBL struct IWordRecognitionVariantVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWordRecognitionVariant_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWordRecognitionVariant_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWordRecognitionVariant_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWordRecognitionVariant_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWordRecognitionVariant_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWordRecognitionVariant_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWordRecognitionVariant_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWordRecognitionVariant_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IWordRecognitionVariant_get_Text(This,Result)	\
    ( (This)->lpVtbl -> get_Text(This,Result) ) 

#define IWordRecognitionVariant_GetCharParams(This,pos,Result)	\
    ( (This)->lpVtbl -> GetCharParams(This,pos,Result) ) 

#define IWordRecognitionVariant_get_ModelType(This,Result)	\
    ( (This)->lpVtbl -> get_ModelType(This,Result) ) 

#define IWordRecognitionVariant_get_WordConfidence(This,Result)	\
    ( (This)->lpVtbl -> get_WordConfidence(This,Result) ) 

#define IWordRecognitionVariant_get_MeanStrokeWidth(This,Result)	\
    ( (This)->lpVtbl -> get_MeanStrokeWidth(This,Result) ) 

#define IWordRecognitionVariant_get_IsWordFromDictionary(This,Result)	\
    ( (This)->lpVtbl -> get_IsWordFromDictionary(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWordRecognitionVariant_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_WordRecognitionVariant;

#ifdef __cplusplus

class DECLSPEC_UUID("1000205A-0000-1056-976E-008048D53AE3")
WordRecognitionVariant;
#endif

EXTERN_C const CLSID CLSID_WordRecognitionVariants;

#ifdef __cplusplus

class DECLSPEC_UUID("1000205C-0000-1056-976E-008048D53AE3")
WordRecognitionVariants;
#endif

EXTERN_C const CLSID CLSID_CharacterRecognitionVariant;

#ifdef __cplusplus

class DECLSPEC_UUID("1000205E-0000-1056-976E-008048D53AE3")
CharacterRecognitionVariant;
#endif

EXTERN_C const CLSID CLSID_CharacterRecognitionVariants;

#ifdef __cplusplus

class DECLSPEC_UUID("1000205D-0000-1056-976E-008048D53AE3")
CharacterRecognitionVariants;
#endif

EXTERN_C const CLSID CLSID_Text;

#ifdef __cplusplus

class DECLSPEC_UUID("10002012-0000-1056-976E-008048D53AE3")
Text;
#endif

EXTERN_C const CLSID CLSID_Hyperlink;

#ifdef __cplusplus

class DECLSPEC_UUID("10002059-0000-1056-976E-008048D53AE3")
Hyperlink;
#endif

EXTERN_C const CLSID CLSID_Word;

#ifdef __cplusplus

class DECLSPEC_UUID("1000206B-0000-1056-976E-008048D53AE3")
Word;
#endif

EXTERN_C const CLSID CLSID_Words;

#ifdef __cplusplus

class DECLSPEC_UUID("1000206C-0000-1056-976E-008048D53AE3")
Words;
#endif

#ifndef __ITextTable_INTERFACE_DEFINED__
#define __ITextTable_INTERFACE_DEFINED__

/* interface ITextTable */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ITextTable;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010B0-0000-1056-976E-008048D53AE3")
    ITextTable : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Page( 
            /* [retval][out] */ IFRPage **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateCell( 
            /* [in] */ IFRRectangle *Position,
            /* [retval][out] */ ITextTableCell **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CellsCount( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Cell( 
            /* [in] */ long num,
            /* [retval][out] */ ITextTableCell **textTableCell) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetCellIndexByPos( 
            /* [in] */ long x,
            /* [in] */ long y,
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetCellByPos( 
            /* [in] */ long x,
            /* [in] */ long y,
            /* [retval][out] */ ITextTableCell **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RowsCount( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ColumnsCount( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetVSeparator( 
            /* [in] */ int column,
            /* [in] */ int row,
            /* [in] */ TextTableSeparatorTypeEnum Type,
            /* [in] */ long SeparatorWidth) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetHSeparator( 
            /* [in] */ int column,
            /* [in] */ int row,
            /* [in] */ TextTableSeparatorTypeEnum Type,
            /* [in] */ long SeparatorWidth) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_VSeparatorType( 
            /* [in] */ long Column,
            /* [in] */ long Row,
            /* [retval][out] */ TextTableSeparatorTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_VSeparatorWidth( 
            /* [in] */ long Column,
            /* [in] */ long Row,
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HSeparatorType( 
            /* [in] */ long Column,
            /* [in] */ long Row,
            /* [retval][out] */ TextTableSeparatorTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HSeparatorWidth( 
            /* [in] */ long Column,
            /* [in] */ long Row,
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HSeparatorPos( 
            /* [in] */ long Row,
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_VSeparatorPos( 
            /* [in] */ long Column,
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetHSeparatorPos( 
            /* [in] */ long row,
            /* [in] */ long pos) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetVSeparatorPos( 
            /* [in] */ long column,
            /* [in] */ long pos) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertHSeparator( 
            /* [in] */ long row,
            /* [in] */ long pos) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertVSeparator( 
            /* [in] */ long column,
            /* [in] */ long pos) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteHSeparator( 
            /* [in] */ long row,
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteVSeparator( 
            /* [in] */ long row,
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Captions( 
            /* [retval][out] */ ICaptions **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteCaptions( void) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HasCaptions( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LocationParams( 
            /* [retval][out] */ IStreamElementLocationParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ColumnNumber( 
            /* [retval][out] */ long *Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITextTableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITextTable * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITextTable * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITextTable * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITextTable * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITextTable * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITextTable * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITextTable * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ITextTable * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Page )( 
            ITextTable * This,
            /* [retval][out] */ IFRPage **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateCell )( 
            ITextTable * This,
            /* [in] */ IFRRectangle *Position,
            /* [retval][out] */ ITextTableCell **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CellsCount )( 
            ITextTable * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Cell )( 
            ITextTable * This,
            /* [in] */ long num,
            /* [retval][out] */ ITextTableCell **textTableCell);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetCellIndexByPos )( 
            ITextTable * This,
            /* [in] */ long x,
            /* [in] */ long y,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetCellByPos )( 
            ITextTable * This,
            /* [in] */ long x,
            /* [in] */ long y,
            /* [retval][out] */ ITextTableCell **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            ITextTable * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            ITextTable * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RowsCount )( 
            ITextTable * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColumnsCount )( 
            ITextTable * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetVSeparator )( 
            ITextTable * This,
            /* [in] */ int column,
            /* [in] */ int row,
            /* [in] */ TextTableSeparatorTypeEnum Type,
            /* [in] */ long SeparatorWidth);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetHSeparator )( 
            ITextTable * This,
            /* [in] */ int column,
            /* [in] */ int row,
            /* [in] */ TextTableSeparatorTypeEnum Type,
            /* [in] */ long SeparatorWidth);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VSeparatorType )( 
            ITextTable * This,
            /* [in] */ long Column,
            /* [in] */ long Row,
            /* [retval][out] */ TextTableSeparatorTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VSeparatorWidth )( 
            ITextTable * This,
            /* [in] */ long Column,
            /* [in] */ long Row,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HSeparatorType )( 
            ITextTable * This,
            /* [in] */ long Column,
            /* [in] */ long Row,
            /* [retval][out] */ TextTableSeparatorTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HSeparatorWidth )( 
            ITextTable * This,
            /* [in] */ long Column,
            /* [in] */ long Row,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HSeparatorPos )( 
            ITextTable * This,
            /* [in] */ long Row,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VSeparatorPos )( 
            ITextTable * This,
            /* [in] */ long Column,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetHSeparatorPos )( 
            ITextTable * This,
            /* [in] */ long row,
            /* [in] */ long pos);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetVSeparatorPos )( 
            ITextTable * This,
            /* [in] */ long column,
            /* [in] */ long pos);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertHSeparator )( 
            ITextTable * This,
            /* [in] */ long row,
            /* [in] */ long pos);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertVSeparator )( 
            ITextTable * This,
            /* [in] */ long column,
            /* [in] */ long pos);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteHSeparator )( 
            ITextTable * This,
            /* [in] */ long row,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteVSeparator )( 
            ITextTable * This,
            /* [in] */ long row,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Captions )( 
            ITextTable * This,
            /* [retval][out] */ ICaptions **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteCaptions )( 
            ITextTable * This);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCaptions )( 
            ITextTable * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LocationParams )( 
            ITextTable * This,
            /* [retval][out] */ IStreamElementLocationParams **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColumnNumber )( 
            ITextTable * This,
            /* [retval][out] */ long *Value);
        
        END_INTERFACE
    } ITextTableVtbl;

    interface ITextTable
    {
        CONST_VTBL struct ITextTableVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITextTable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITextTable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITextTable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITextTable_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITextTable_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITextTable_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITextTable_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITextTable_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ITextTable_get_Page(This,Result)	\
    ( (This)->lpVtbl -> get_Page(This,Result) ) 

#define ITextTable_CreateCell(This,Position,Result)	\
    ( (This)->lpVtbl -> CreateCell(This,Position,Result) ) 

#define ITextTable_get_CellsCount(This,Result)	\
    ( (This)->lpVtbl -> get_CellsCount(This,Result) ) 

#define ITextTable_get_Cell(This,num,textTableCell)	\
    ( (This)->lpVtbl -> get_Cell(This,num,textTableCell) ) 

#define ITextTable_GetCellIndexByPos(This,x,y,Result)	\
    ( (This)->lpVtbl -> GetCellIndexByPos(This,x,y,Result) ) 

#define ITextTable_GetCellByPos(This,x,y,Result)	\
    ( (This)->lpVtbl -> GetCellByPos(This,x,y,Result) ) 

#define ITextTable_get_Width(This,Result)	\
    ( (This)->lpVtbl -> get_Width(This,Result) ) 

#define ITextTable_get_Height(This,Result)	\
    ( (This)->lpVtbl -> get_Height(This,Result) ) 

#define ITextTable_get_RowsCount(This,Result)	\
    ( (This)->lpVtbl -> get_RowsCount(This,Result) ) 

#define ITextTable_get_ColumnsCount(This,Result)	\
    ( (This)->lpVtbl -> get_ColumnsCount(This,Result) ) 

#define ITextTable_SetVSeparator(This,column,row,Type,SeparatorWidth)	\
    ( (This)->lpVtbl -> SetVSeparator(This,column,row,Type,SeparatorWidth) ) 

#define ITextTable_SetHSeparator(This,column,row,Type,SeparatorWidth)	\
    ( (This)->lpVtbl -> SetHSeparator(This,column,row,Type,SeparatorWidth) ) 

#define ITextTable_get_VSeparatorType(This,Column,Row,Result)	\
    ( (This)->lpVtbl -> get_VSeparatorType(This,Column,Row,Result) ) 

#define ITextTable_get_VSeparatorWidth(This,Column,Row,Result)	\
    ( (This)->lpVtbl -> get_VSeparatorWidth(This,Column,Row,Result) ) 

#define ITextTable_get_HSeparatorType(This,Column,Row,Result)	\
    ( (This)->lpVtbl -> get_HSeparatorType(This,Column,Row,Result) ) 

#define ITextTable_get_HSeparatorWidth(This,Column,Row,Result)	\
    ( (This)->lpVtbl -> get_HSeparatorWidth(This,Column,Row,Result) ) 

#define ITextTable_get_HSeparatorPos(This,Row,Result)	\
    ( (This)->lpVtbl -> get_HSeparatorPos(This,Row,Result) ) 

#define ITextTable_get_VSeparatorPos(This,Column,Result)	\
    ( (This)->lpVtbl -> get_VSeparatorPos(This,Column,Result) ) 

#define ITextTable_SetHSeparatorPos(This,row,pos)	\
    ( (This)->lpVtbl -> SetHSeparatorPos(This,row,pos) ) 

#define ITextTable_SetVSeparatorPos(This,column,pos)	\
    ( (This)->lpVtbl -> SetVSeparatorPos(This,column,pos) ) 

#define ITextTable_InsertHSeparator(This,row,pos)	\
    ( (This)->lpVtbl -> InsertHSeparator(This,row,pos) ) 

#define ITextTable_InsertVSeparator(This,column,pos)	\
    ( (This)->lpVtbl -> InsertVSeparator(This,column,pos) ) 

#define ITextTable_DeleteHSeparator(This,row,Result)	\
    ( (This)->lpVtbl -> DeleteHSeparator(This,row,Result) ) 

#define ITextTable_DeleteVSeparator(This,row,Result)	\
    ( (This)->lpVtbl -> DeleteVSeparator(This,row,Result) ) 

#define ITextTable_get_Captions(This,Result)	\
    ( (This)->lpVtbl -> get_Captions(This,Result) ) 

#define ITextTable_DeleteCaptions(This)	\
    ( (This)->lpVtbl -> DeleteCaptions(This) ) 

#define ITextTable_get_HasCaptions(This,Result)	\
    ( (This)->lpVtbl -> get_HasCaptions(This,Result) ) 

#define ITextTable_get_LocationParams(This,Result)	\
    ( (This)->lpVtbl -> get_LocationParams(This,Result) ) 

#define ITextTable_get_ColumnNumber(This,Value)	\
    ( (This)->lpVtbl -> get_ColumnNumber(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITextTable_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_TextTable;

#ifdef __cplusplus

class DECLSPEC_UUID("100020A0-0000-1056-976E-008048D53AE3")
TextTable;
#endif

#ifndef __ITextPicture_INTERFACE_DEFINED__
#define __ITextPicture_INTERFACE_DEFINED__

/* interface ITextPicture */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ITextPicture;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010B1-0000-1056-976E-008048D53AE3")
    ITextPicture : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Page( 
            /* [retval][out] */ IFRPage **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsInlinePicture( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsInlinePicture( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsBackgroundPicture( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsBackgroundPicture( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Captions( 
            /* [retval][out] */ ICaptions **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteCaptions( void) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HasCaptions( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LocationParams( 
            /* [retval][out] */ IStreamElementLocationParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ColumnNumber( 
            /* [retval][out] */ long *Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITextPictureVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITextPicture * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITextPicture * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITextPicture * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITextPicture * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITextPicture * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITextPicture * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITextPicture * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ITextPicture * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Page )( 
            ITextPicture * This,
            /* [retval][out] */ IFRPage **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsInlinePicture )( 
            ITextPicture * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsInlinePicture )( 
            ITextPicture * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsBackgroundPicture )( 
            ITextPicture * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsBackgroundPicture )( 
            ITextPicture * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Captions )( 
            ITextPicture * This,
            /* [retval][out] */ ICaptions **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteCaptions )( 
            ITextPicture * This);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCaptions )( 
            ITextPicture * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LocationParams )( 
            ITextPicture * This,
            /* [retval][out] */ IStreamElementLocationParams **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColumnNumber )( 
            ITextPicture * This,
            /* [retval][out] */ long *Value);
        
        END_INTERFACE
    } ITextPictureVtbl;

    interface ITextPicture
    {
        CONST_VTBL struct ITextPictureVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITextPicture_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITextPicture_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITextPicture_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITextPicture_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITextPicture_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITextPicture_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITextPicture_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITextPicture_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ITextPicture_get_Page(This,Result)	\
    ( (This)->lpVtbl -> get_Page(This,Result) ) 

#define ITextPicture_get_IsInlinePicture(This,Result)	\
    ( (This)->lpVtbl -> get_IsInlinePicture(This,Result) ) 

#define ITextPicture_put_IsInlinePicture(This,Value)	\
    ( (This)->lpVtbl -> put_IsInlinePicture(This,Value) ) 

#define ITextPicture_get_IsBackgroundPicture(This,Result)	\
    ( (This)->lpVtbl -> get_IsBackgroundPicture(This,Result) ) 

#define ITextPicture_put_IsBackgroundPicture(This,Value)	\
    ( (This)->lpVtbl -> put_IsBackgroundPicture(This,Value) ) 

#define ITextPicture_get_Captions(This,Result)	\
    ( (This)->lpVtbl -> get_Captions(This,Result) ) 

#define ITextPicture_DeleteCaptions(This)	\
    ( (This)->lpVtbl -> DeleteCaptions(This) ) 

#define ITextPicture_get_HasCaptions(This,Result)	\
    ( (This)->lpVtbl -> get_HasCaptions(This,Result) ) 

#define ITextPicture_get_LocationParams(This,Result)	\
    ( (This)->lpVtbl -> get_LocationParams(This,Result) ) 

#define ITextPicture_get_ColumnNumber(This,Value)	\
    ( (This)->lpVtbl -> get_ColumnNumber(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITextPicture_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_TextPicture;

#ifdef __cplusplus

class DECLSPEC_UUID("100020A1-0000-1056-976E-008048D53AE3")
TextPicture;
#endif

#ifndef __ITextBarcode_INTERFACE_DEFINED__
#define __ITextBarcode_INTERFACE_DEFINED__

/* interface ITextBarcode */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ITextBarcode;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010B2-0000-1056-976E-008048D53AE3")
    ITextBarcode : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Page( 
            /* [retval][out] */ IFRPage **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ IText **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LocationParams( 
            /* [retval][out] */ IStreamElementLocationParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ColumnNumber( 
            /* [retval][out] */ long *Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITextBarcodeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITextBarcode * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITextBarcode * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITextBarcode * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITextBarcode * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITextBarcode * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITextBarcode * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITextBarcode * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ITextBarcode * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Page )( 
            ITextBarcode * This,
            /* [retval][out] */ IFRPage **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            ITextBarcode * This,
            /* [retval][out] */ IText **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LocationParams )( 
            ITextBarcode * This,
            /* [retval][out] */ IStreamElementLocationParams **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColumnNumber )( 
            ITextBarcode * This,
            /* [retval][out] */ long *Value);
        
        END_INTERFACE
    } ITextBarcodeVtbl;

    interface ITextBarcode
    {
        CONST_VTBL struct ITextBarcodeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITextBarcode_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITextBarcode_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITextBarcode_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITextBarcode_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITextBarcode_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITextBarcode_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITextBarcode_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITextBarcode_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ITextBarcode_get_Page(This,Result)	\
    ( (This)->lpVtbl -> get_Page(This,Result) ) 

#define ITextBarcode_get_Text(This,Result)	\
    ( (This)->lpVtbl -> get_Text(This,Result) ) 

#define ITextBarcode_get_LocationParams(This,Result)	\
    ( (This)->lpVtbl -> get_LocationParams(This,Result) ) 

#define ITextBarcode_get_ColumnNumber(This,Value)	\
    ( (This)->lpVtbl -> get_ColumnNumber(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITextBarcode_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_TextBarcode;

#ifdef __cplusplus

class DECLSPEC_UUID("100020A2-0000-1056-976E-008048D53AE3")
TextBarcode;
#endif

EXTERN_C const CLSID CLSID_TextTableCell;

#ifdef __cplusplus

class DECLSPEC_UUID("100020B6-0000-1056-976E-008048D53AE3")
TextTableCell;
#endif

#ifndef __ICaption_INTERFACE_DEFINED__
#define __ICaption_INTERFACE_DEFINED__

/* interface ICaption */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ICaption;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010D3-0000-1056-976E-008048D53AE3")
    ICaption : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [retval][out] */ IPageElement **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ CaptionPositionEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Region( 
            /* [retval][out] */ IRegion **Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICaptionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICaption * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICaption * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICaption * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ICaption * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ICaption * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ICaption * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ICaption * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ICaption * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            ICaption * This,
            /* [retval][out] */ IPageElement **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            ICaption * This,
            /* [retval][out] */ CaptionPositionEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Region )( 
            ICaption * This,
            /* [retval][out] */ IRegion **Result);
        
        END_INTERFACE
    } ICaptionVtbl;

    interface ICaption
    {
        CONST_VTBL struct ICaptionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICaption_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICaption_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICaption_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICaption_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ICaption_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ICaption_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ICaption_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ICaption_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ICaption_get_Element(This,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Result) ) 

#define ICaption_get_Position(This,Result)	\
    ( (This)->lpVtbl -> get_Position(This,Result) ) 

#define ICaption_get_Region(This,Result)	\
    ( (This)->lpVtbl -> get_Region(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICaption_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_Caption;

#ifdef __cplusplus

class DECLSPEC_UUID("100020BD-0000-1056-976E-008048D53AE3")
Caption;
#endif

EXTERN_C const CLSID CLSID_Captions;

#ifdef __cplusplus

class DECLSPEC_UUID("100020B8-0000-1056-976E-008048D53AE3")
Captions;
#endif

#ifndef __IRTFExportParams_INTERFACE_DEFINED__
#define __IRTFExportParams_INTERFACE_DEFINED__

/* interface IRTFExportParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IRTFExportParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001029-0000-1056-976E-008048D53AE3")
    IRTFExportParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_KeepLines( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_KeepLines( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_KeepPages( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_KeepPages( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WritePictures( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WritePictures( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RemoveSoftHyphens( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RemoveSoftHyphens( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HighlightErrorsWithTextColor( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_HighlightErrorsWithTextColor( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HighlightErrorsWithBackgroundColor( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_HighlightErrorsWithBackgroundColor( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_KeepTextAndBackgroundColor( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_KeepTextAndBackgroundColor( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PageSynthesisMode( 
            /* [retval][out] */ RTFPageSynthesisModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PageSynthesisMode( 
            /* [in] */ RTFPageSynthesisModeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ErrorTextColor( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ErrorTextColor( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ErrorBackgroundColor( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ErrorBackgroundColor( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PaperWidth( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PaperWidth( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PaperHeight( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PaperHeight( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PictureResolution( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PictureResolution( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IRTFExportParams *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ForceFixedPageSize( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ForceFixedPageSize( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PictureJpegQuality( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PictureJpegQuality( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteTitle( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteTitle( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteAuthor( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteAuthor( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteSubject( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteSubject( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteKeywords( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteKeywords( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PictureFormat( 
            /* [retval][out] */ ExportPictureFormatEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PictureFormat( 
            /* [in] */ ExportPictureFormatEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PageOrientation( 
            /* [retval][out] */ RTFPageOrientationEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PageOrientation( 
            /* [in] */ RTFPageOrientationEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_KeepTextColor( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_KeepTextColor( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BackgroundColorMode( 
            /* [retval][out] */ BackgroundColorModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BackgroundColorMode( 
            /* [in] */ BackgroundColorModeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RunningTitleMode( 
            /* [retval][out] */ RunningTitleModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RunningTitleMode( 
            /* [in] */ RunningTitleModeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_FilterSeparators( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput][hidden] */ HRESULT STDMETHODCALLTYPE put_FilterSeparators( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_UseBlockOrderFromLayout( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput][hidden] */ HRESULT STDMETHODCALLTYPE put_UseBlockOrderFromLayout( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_UseDocumentStructure( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput][hidden] */ HRESULT STDMETHODCALLTYPE put_UseDocumentStructure( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_NarrowTextFrames( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput][hidden] */ HRESULT STDMETHODCALLTYPE put_NarrowTextFrames( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRTFExportParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRTFExportParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRTFExportParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRTFExportParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRTFExportParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRTFExportParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRTFExportParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRTFExportParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IRTFExportParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_KeepLines )( 
            IRTFExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_KeepLines )( 
            IRTFExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_KeepPages )( 
            IRTFExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_KeepPages )( 
            IRTFExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WritePictures )( 
            IRTFExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WritePictures )( 
            IRTFExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RemoveSoftHyphens )( 
            IRTFExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RemoveSoftHyphens )( 
            IRTFExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HighlightErrorsWithTextColor )( 
            IRTFExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HighlightErrorsWithTextColor )( 
            IRTFExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HighlightErrorsWithBackgroundColor )( 
            IRTFExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HighlightErrorsWithBackgroundColor )( 
            IRTFExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_KeepTextAndBackgroundColor )( 
            IRTFExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_KeepTextAndBackgroundColor )( 
            IRTFExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PageSynthesisMode )( 
            IRTFExportParams * This,
            /* [retval][out] */ RTFPageSynthesisModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PageSynthesisMode )( 
            IRTFExportParams * This,
            /* [in] */ RTFPageSynthesisModeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ErrorTextColor )( 
            IRTFExportParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ErrorTextColor )( 
            IRTFExportParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ErrorBackgroundColor )( 
            IRTFExportParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ErrorBackgroundColor )( 
            IRTFExportParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PaperWidth )( 
            IRTFExportParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PaperWidth )( 
            IRTFExportParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PaperHeight )( 
            IRTFExportParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PaperHeight )( 
            IRTFExportParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictureResolution )( 
            IRTFExportParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PictureResolution )( 
            IRTFExportParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IRTFExportParams * This,
            /* [in] */ IRTFExportParams *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IRTFExportParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            IRTFExportParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IRTFExportParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            IRTFExportParams * This,
            /* [in] */ long HGlobal);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ForceFixedPageSize )( 
            IRTFExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ForceFixedPageSize )( 
            IRTFExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictureJpegQuality )( 
            IRTFExportParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PictureJpegQuality )( 
            IRTFExportParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteTitle )( 
            IRTFExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteTitle )( 
            IRTFExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteAuthor )( 
            IRTFExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteAuthor )( 
            IRTFExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteSubject )( 
            IRTFExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteSubject )( 
            IRTFExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteKeywords )( 
            IRTFExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteKeywords )( 
            IRTFExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictureFormat )( 
            IRTFExportParams * This,
            /* [retval][out] */ ExportPictureFormatEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PictureFormat )( 
            IRTFExportParams * This,
            /* [in] */ ExportPictureFormatEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PageOrientation )( 
            IRTFExportParams * This,
            /* [retval][out] */ RTFPageOrientationEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PageOrientation )( 
            IRTFExportParams * This,
            /* [in] */ RTFPageOrientationEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_KeepTextColor )( 
            IRTFExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_KeepTextColor )( 
            IRTFExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundColorMode )( 
            IRTFExportParams * This,
            /* [retval][out] */ BackgroundColorModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundColorMode )( 
            IRTFExportParams * This,
            /* [in] */ BackgroundColorModeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RunningTitleMode )( 
            IRTFExportParams * This,
            /* [retval][out] */ RunningTitleModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RunningTitleMode )( 
            IRTFExportParams * This,
            /* [in] */ RunningTitleModeEnum Value);
        
        /* [helpstring][helpcontext][id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_FilterSeparators )( 
            IRTFExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput][hidden] */ HRESULT ( STDMETHODCALLTYPE *put_FilterSeparators )( 
            IRTFExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_UseBlockOrderFromLayout )( 
            IRTFExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput][hidden] */ HRESULT ( STDMETHODCALLTYPE *put_UseBlockOrderFromLayout )( 
            IRTFExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_UseDocumentStructure )( 
            IRTFExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput][hidden] */ HRESULT ( STDMETHODCALLTYPE *put_UseDocumentStructure )( 
            IRTFExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_NarrowTextFrames )( 
            IRTFExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput][hidden] */ HRESULT ( STDMETHODCALLTYPE *put_NarrowTextFrames )( 
            IRTFExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        END_INTERFACE
    } IRTFExportParamsVtbl;

    interface IRTFExportParams
    {
        CONST_VTBL struct IRTFExportParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRTFExportParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRTFExportParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRTFExportParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRTFExportParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRTFExportParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRTFExportParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRTFExportParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRTFExportParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IRTFExportParams_get_KeepLines(This,Result)	\
    ( (This)->lpVtbl -> get_KeepLines(This,Result) ) 

#define IRTFExportParams_put_KeepLines(This,Value)	\
    ( (This)->lpVtbl -> put_KeepLines(This,Value) ) 

#define IRTFExportParams_get_KeepPages(This,Result)	\
    ( (This)->lpVtbl -> get_KeepPages(This,Result) ) 

#define IRTFExportParams_put_KeepPages(This,Value)	\
    ( (This)->lpVtbl -> put_KeepPages(This,Value) ) 

#define IRTFExportParams_get_WritePictures(This,Result)	\
    ( (This)->lpVtbl -> get_WritePictures(This,Result) ) 

#define IRTFExportParams_put_WritePictures(This,Value)	\
    ( (This)->lpVtbl -> put_WritePictures(This,Value) ) 

#define IRTFExportParams_get_RemoveSoftHyphens(This,Result)	\
    ( (This)->lpVtbl -> get_RemoveSoftHyphens(This,Result) ) 

#define IRTFExportParams_put_RemoveSoftHyphens(This,Value)	\
    ( (This)->lpVtbl -> put_RemoveSoftHyphens(This,Value) ) 

#define IRTFExportParams_get_HighlightErrorsWithTextColor(This,Result)	\
    ( (This)->lpVtbl -> get_HighlightErrorsWithTextColor(This,Result) ) 

#define IRTFExportParams_put_HighlightErrorsWithTextColor(This,Value)	\
    ( (This)->lpVtbl -> put_HighlightErrorsWithTextColor(This,Value) ) 

#define IRTFExportParams_get_HighlightErrorsWithBackgroundColor(This,Result)	\
    ( (This)->lpVtbl -> get_HighlightErrorsWithBackgroundColor(This,Result) ) 

#define IRTFExportParams_put_HighlightErrorsWithBackgroundColor(This,Value)	\
    ( (This)->lpVtbl -> put_HighlightErrorsWithBackgroundColor(This,Value) ) 

#define IRTFExportParams_get_KeepTextAndBackgroundColor(This,Result)	\
    ( (This)->lpVtbl -> get_KeepTextAndBackgroundColor(This,Result) ) 

#define IRTFExportParams_put_KeepTextAndBackgroundColor(This,Value)	\
    ( (This)->lpVtbl -> put_KeepTextAndBackgroundColor(This,Value) ) 

#define IRTFExportParams_get_PageSynthesisMode(This,Result)	\
    ( (This)->lpVtbl -> get_PageSynthesisMode(This,Result) ) 

#define IRTFExportParams_put_PageSynthesisMode(This,Value)	\
    ( (This)->lpVtbl -> put_PageSynthesisMode(This,Value) ) 

#define IRTFExportParams_get_ErrorTextColor(This,Result)	\
    ( (This)->lpVtbl -> get_ErrorTextColor(This,Result) ) 

#define IRTFExportParams_put_ErrorTextColor(This,Value)	\
    ( (This)->lpVtbl -> put_ErrorTextColor(This,Value) ) 

#define IRTFExportParams_get_ErrorBackgroundColor(This,Result)	\
    ( (This)->lpVtbl -> get_ErrorBackgroundColor(This,Result) ) 

#define IRTFExportParams_put_ErrorBackgroundColor(This,Value)	\
    ( (This)->lpVtbl -> put_ErrorBackgroundColor(This,Value) ) 

#define IRTFExportParams_get_PaperWidth(This,Result)	\
    ( (This)->lpVtbl -> get_PaperWidth(This,Result) ) 

#define IRTFExportParams_put_PaperWidth(This,Value)	\
    ( (This)->lpVtbl -> put_PaperWidth(This,Value) ) 

#define IRTFExportParams_get_PaperHeight(This,Result)	\
    ( (This)->lpVtbl -> get_PaperHeight(This,Result) ) 

#define IRTFExportParams_put_PaperHeight(This,Value)	\
    ( (This)->lpVtbl -> put_PaperHeight(This,Value) ) 

#define IRTFExportParams_get_PictureResolution(This,Result)	\
    ( (This)->lpVtbl -> get_PictureResolution(This,Result) ) 

#define IRTFExportParams_put_PictureResolution(This,Value)	\
    ( (This)->lpVtbl -> put_PictureResolution(This,Value) ) 

#define IRTFExportParams_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IRTFExportParams_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define IRTFExportParams_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define IRTFExportParams_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IRTFExportParams_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#define IRTFExportParams_get_ForceFixedPageSize(This,Result)	\
    ( (This)->lpVtbl -> get_ForceFixedPageSize(This,Result) ) 

#define IRTFExportParams_put_ForceFixedPageSize(This,Value)	\
    ( (This)->lpVtbl -> put_ForceFixedPageSize(This,Value) ) 

#define IRTFExportParams_get_PictureJpegQuality(This,Result)	\
    ( (This)->lpVtbl -> get_PictureJpegQuality(This,Result) ) 

#define IRTFExportParams_put_PictureJpegQuality(This,Value)	\
    ( (This)->lpVtbl -> put_PictureJpegQuality(This,Value) ) 

#define IRTFExportParams_get_WriteTitle(This,Result)	\
    ( (This)->lpVtbl -> get_WriteTitle(This,Result) ) 

#define IRTFExportParams_put_WriteTitle(This,Value)	\
    ( (This)->lpVtbl -> put_WriteTitle(This,Value) ) 

#define IRTFExportParams_get_WriteAuthor(This,Result)	\
    ( (This)->lpVtbl -> get_WriteAuthor(This,Result) ) 

#define IRTFExportParams_put_WriteAuthor(This,Value)	\
    ( (This)->lpVtbl -> put_WriteAuthor(This,Value) ) 

#define IRTFExportParams_get_WriteSubject(This,Result)	\
    ( (This)->lpVtbl -> get_WriteSubject(This,Result) ) 

#define IRTFExportParams_put_WriteSubject(This,Value)	\
    ( (This)->lpVtbl -> put_WriteSubject(This,Value) ) 

#define IRTFExportParams_get_WriteKeywords(This,Result)	\
    ( (This)->lpVtbl -> get_WriteKeywords(This,Result) ) 

#define IRTFExportParams_put_WriteKeywords(This,Value)	\
    ( (This)->lpVtbl -> put_WriteKeywords(This,Value) ) 

#define IRTFExportParams_get_PictureFormat(This,Result)	\
    ( (This)->lpVtbl -> get_PictureFormat(This,Result) ) 

#define IRTFExportParams_put_PictureFormat(This,Value)	\
    ( (This)->lpVtbl -> put_PictureFormat(This,Value) ) 

#define IRTFExportParams_get_PageOrientation(This,Result)	\
    ( (This)->lpVtbl -> get_PageOrientation(This,Result) ) 

#define IRTFExportParams_put_PageOrientation(This,Value)	\
    ( (This)->lpVtbl -> put_PageOrientation(This,Value) ) 

#define IRTFExportParams_get_KeepTextColor(This,Result)	\
    ( (This)->lpVtbl -> get_KeepTextColor(This,Result) ) 

#define IRTFExportParams_put_KeepTextColor(This,Value)	\
    ( (This)->lpVtbl -> put_KeepTextColor(This,Value) ) 

#define IRTFExportParams_get_BackgroundColorMode(This,Result)	\
    ( (This)->lpVtbl -> get_BackgroundColorMode(This,Result) ) 

#define IRTFExportParams_put_BackgroundColorMode(This,Value)	\
    ( (This)->lpVtbl -> put_BackgroundColorMode(This,Value) ) 

#define IRTFExportParams_get_RunningTitleMode(This,Result)	\
    ( (This)->lpVtbl -> get_RunningTitleMode(This,Result) ) 

#define IRTFExportParams_put_RunningTitleMode(This,Value)	\
    ( (This)->lpVtbl -> put_RunningTitleMode(This,Value) ) 

#define IRTFExportParams_get_FilterSeparators(This,Result)	\
    ( (This)->lpVtbl -> get_FilterSeparators(This,Result) ) 

#define IRTFExportParams_put_FilterSeparators(This,Value)	\
    ( (This)->lpVtbl -> put_FilterSeparators(This,Value) ) 

#define IRTFExportParams_get_UseBlockOrderFromLayout(This,Result)	\
    ( (This)->lpVtbl -> get_UseBlockOrderFromLayout(This,Result) ) 

#define IRTFExportParams_put_UseBlockOrderFromLayout(This,Value)	\
    ( (This)->lpVtbl -> put_UseBlockOrderFromLayout(This,Value) ) 

#define IRTFExportParams_get_UseDocumentStructure(This,Result)	\
    ( (This)->lpVtbl -> get_UseDocumentStructure(This,Result) ) 

#define IRTFExportParams_put_UseDocumentStructure(This,Value)	\
    ( (This)->lpVtbl -> put_UseDocumentStructure(This,Value) ) 

#define IRTFExportParams_get_NarrowTextFrames(This,Result)	\
    ( (This)->lpVtbl -> get_NarrowTextFrames(This,Result) ) 

#define IRTFExportParams_put_NarrowTextFrames(This,Value)	\
    ( (This)->lpVtbl -> put_NarrowTextFrames(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRTFExportParams_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_RTFExportParams;

#ifdef __cplusplus

class DECLSPEC_UUID("1000202a-0000-1056-976E-008048D53AE3")
RTFExportParams;
#endif

#ifndef __ITextExportParams_INTERFACE_DEFINED__
#define __ITextExportParams_INTERFACE_DEFINED__

/* interface ITextExportParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ITextExportParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000102a-0000-1056-976E-008048D53AE3")
    ITextExportParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_InsertEmptyLineBetweenParagraphs( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_InsertEmptyLineBetweenParagraphs( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ExportParagraphsAsOneLine( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ExportParagraphsAsOneLine( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UsePageBreaks( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_UsePageBreaks( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AppendToEnd( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_AppendToEnd( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ExportFormat( 
            /* [retval][out] */ TXTExportFormatEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ExportFormat( 
            /* [in] */ TXTExportFormatEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AppendEOF( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_AppendEOF( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EncodingType( 
            /* [retval][out] */ TextEncodingTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_EncodingType( 
            /* [in] */ TextEncodingTypeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CodePage( 
            /* [retval][out] */ CodePageEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CodePage( 
            /* [in] */ CodePageEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TabSeparator( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TabSeparator( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RunningTitleMode( 
            /* [retval][out] */ RunningTitleModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RunningTitleMode( 
            /* [in] */ RunningTitleModeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ ITextExportParams *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITextExportParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITextExportParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITextExportParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITextExportParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITextExportParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITextExportParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITextExportParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITextExportParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ITextExportParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_InsertEmptyLineBetweenParagraphs )( 
            ITextExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_InsertEmptyLineBetweenParagraphs )( 
            ITextExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExportParagraphsAsOneLine )( 
            ITextExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ExportParagraphsAsOneLine )( 
            ITextExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UsePageBreaks )( 
            ITextExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UsePageBreaks )( 
            ITextExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AppendToEnd )( 
            ITextExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AppendToEnd )( 
            ITextExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExportFormat )( 
            ITextExportParams * This,
            /* [retval][out] */ TXTExportFormatEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ExportFormat )( 
            ITextExportParams * This,
            /* [in] */ TXTExportFormatEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AppendEOF )( 
            ITextExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AppendEOF )( 
            ITextExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EncodingType )( 
            ITextExportParams * This,
            /* [retval][out] */ TextEncodingTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EncodingType )( 
            ITextExportParams * This,
            /* [in] */ TextEncodingTypeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CodePage )( 
            ITextExportParams * This,
            /* [retval][out] */ CodePageEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CodePage )( 
            ITextExportParams * This,
            /* [in] */ CodePageEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabSeparator )( 
            ITextExportParams * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabSeparator )( 
            ITextExportParams * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RunningTitleMode )( 
            ITextExportParams * This,
            /* [retval][out] */ RunningTitleModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RunningTitleMode )( 
            ITextExportParams * This,
            /* [in] */ RunningTitleModeEnum Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            ITextExportParams * This,
            /* [in] */ ITextExportParams *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            ITextExportParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            ITextExportParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            ITextExportParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            ITextExportParams * This,
            /* [in] */ long HGlobal);
        
        END_INTERFACE
    } ITextExportParamsVtbl;

    interface ITextExportParams
    {
        CONST_VTBL struct ITextExportParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITextExportParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITextExportParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITextExportParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITextExportParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITextExportParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITextExportParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITextExportParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITextExportParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ITextExportParams_get_InsertEmptyLineBetweenParagraphs(This,Result)	\
    ( (This)->lpVtbl -> get_InsertEmptyLineBetweenParagraphs(This,Result) ) 

#define ITextExportParams_put_InsertEmptyLineBetweenParagraphs(This,Value)	\
    ( (This)->lpVtbl -> put_InsertEmptyLineBetweenParagraphs(This,Value) ) 

#define ITextExportParams_get_ExportParagraphsAsOneLine(This,Result)	\
    ( (This)->lpVtbl -> get_ExportParagraphsAsOneLine(This,Result) ) 

#define ITextExportParams_put_ExportParagraphsAsOneLine(This,Value)	\
    ( (This)->lpVtbl -> put_ExportParagraphsAsOneLine(This,Value) ) 

#define ITextExportParams_get_UsePageBreaks(This,Result)	\
    ( (This)->lpVtbl -> get_UsePageBreaks(This,Result) ) 

#define ITextExportParams_put_UsePageBreaks(This,Value)	\
    ( (This)->lpVtbl -> put_UsePageBreaks(This,Value) ) 

#define ITextExportParams_get_AppendToEnd(This,Result)	\
    ( (This)->lpVtbl -> get_AppendToEnd(This,Result) ) 

#define ITextExportParams_put_AppendToEnd(This,Value)	\
    ( (This)->lpVtbl -> put_AppendToEnd(This,Value) ) 

#define ITextExportParams_get_ExportFormat(This,Result)	\
    ( (This)->lpVtbl -> get_ExportFormat(This,Result) ) 

#define ITextExportParams_put_ExportFormat(This,Value)	\
    ( (This)->lpVtbl -> put_ExportFormat(This,Value) ) 

#define ITextExportParams_get_AppendEOF(This,Result)	\
    ( (This)->lpVtbl -> get_AppendEOF(This,Result) ) 

#define ITextExportParams_put_AppendEOF(This,Value)	\
    ( (This)->lpVtbl -> put_AppendEOF(This,Value) ) 

#define ITextExportParams_get_EncodingType(This,Result)	\
    ( (This)->lpVtbl -> get_EncodingType(This,Result) ) 

#define ITextExportParams_put_EncodingType(This,Value)	\
    ( (This)->lpVtbl -> put_EncodingType(This,Value) ) 

#define ITextExportParams_get_CodePage(This,Result)	\
    ( (This)->lpVtbl -> get_CodePage(This,Result) ) 

#define ITextExportParams_put_CodePage(This,Value)	\
    ( (This)->lpVtbl -> put_CodePage(This,Value) ) 

#define ITextExportParams_get_TabSeparator(This,Result)	\
    ( (This)->lpVtbl -> get_TabSeparator(This,Result) ) 

#define ITextExportParams_put_TabSeparator(This,Value)	\
    ( (This)->lpVtbl -> put_TabSeparator(This,Value) ) 

#define ITextExportParams_get_RunningTitleMode(This,Result)	\
    ( (This)->lpVtbl -> get_RunningTitleMode(This,Result) ) 

#define ITextExportParams_put_RunningTitleMode(This,Value)	\
    ( (This)->lpVtbl -> put_RunningTitleMode(This,Value) ) 

#define ITextExportParams_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define ITextExportParams_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define ITextExportParams_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define ITextExportParams_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define ITextExportParams_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITextExportParams_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_TextExportParams;

#ifdef __cplusplus

class DECLSPEC_UUID("1000202b-0000-1056-976E-008048D53AE3")
TextExportParams;
#endif

#ifndef __IXLExportParams_INTERFACE_DEFINED__
#define __IXLExportParams_INTERFACE_DEFINED__

/* interface IXLExportParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IXLExportParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000102b-0000-1056-976E-008048D53AE3")
    IXLExportParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ConvertStringsToNumbers( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ConvertStringsToNumbers( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TablesOnly( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TablesOnly( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RemoveFormatting( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RemoveFormatting( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_XLFileFormat( 
            /* [retval][out] */ XLFileFormatEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_XLFileFormat( 
            /* [in] */ XLFileFormatEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IXLExportParams *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteTitle( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteTitle( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteAuthor( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteAuthor( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteSubject( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteSubject( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteKeywords( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteKeywords( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RunningTitleMode( 
            /* [retval][out] */ RunningTitleModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RunningTitleMode( 
            /* [in] */ RunningTitleModeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_KeepTextColor( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_KeepTextColor( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BackgroundColorMode( 
            /* [retval][out] */ BackgroundColorModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BackgroundColorMode( 
            /* [in] */ BackgroundColorModeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PaperSize( 
            /* [retval][out] */ XLSXPaperSizeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PaperSize( 
            /* [in] */ XLSXPaperSizeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PageOrientation( 
            /* [retval][out] */ RTFPageOrientationEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PageOrientation( 
            /* [in] */ RTFPageOrientationEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_OnePagePerWorksheet( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_OnePagePerWorksheet( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IXLExportParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXLExportParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXLExportParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXLExportParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXLExportParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXLExportParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXLExportParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXLExportParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IXLExportParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConvertStringsToNumbers )( 
            IXLExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ConvertStringsToNumbers )( 
            IXLExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TablesOnly )( 
            IXLExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TablesOnly )( 
            IXLExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RemoveFormatting )( 
            IXLExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RemoveFormatting )( 
            IXLExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_XLFileFormat )( 
            IXLExportParams * This,
            /* [retval][out] */ XLFileFormatEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_XLFileFormat )( 
            IXLExportParams * This,
            /* [in] */ XLFileFormatEnum Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IXLExportParams * This,
            /* [in] */ IXLExportParams *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IXLExportParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            IXLExportParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IXLExportParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            IXLExportParams * This,
            /* [in] */ long HGlobal);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteTitle )( 
            IXLExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteTitle )( 
            IXLExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteAuthor )( 
            IXLExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteAuthor )( 
            IXLExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteSubject )( 
            IXLExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteSubject )( 
            IXLExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteKeywords )( 
            IXLExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteKeywords )( 
            IXLExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RunningTitleMode )( 
            IXLExportParams * This,
            /* [retval][out] */ RunningTitleModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RunningTitleMode )( 
            IXLExportParams * This,
            /* [in] */ RunningTitleModeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_KeepTextColor )( 
            IXLExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_KeepTextColor )( 
            IXLExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundColorMode )( 
            IXLExportParams * This,
            /* [retval][out] */ BackgroundColorModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundColorMode )( 
            IXLExportParams * This,
            /* [in] */ BackgroundColorModeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PaperSize )( 
            IXLExportParams * This,
            /* [retval][out] */ XLSXPaperSizeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PaperSize )( 
            IXLExportParams * This,
            /* [in] */ XLSXPaperSizeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PageOrientation )( 
            IXLExportParams * This,
            /* [retval][out] */ RTFPageOrientationEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PageOrientation )( 
            IXLExportParams * This,
            /* [in] */ RTFPageOrientationEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OnePagePerWorksheet )( 
            IXLExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OnePagePerWorksheet )( 
            IXLExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        END_INTERFACE
    } IXLExportParamsVtbl;

    interface IXLExportParams
    {
        CONST_VTBL struct IXLExportParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXLExportParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXLExportParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXLExportParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXLExportParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXLExportParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXLExportParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXLExportParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXLExportParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IXLExportParams_get_ConvertStringsToNumbers(This,Result)	\
    ( (This)->lpVtbl -> get_ConvertStringsToNumbers(This,Result) ) 

#define IXLExportParams_put_ConvertStringsToNumbers(This,Value)	\
    ( (This)->lpVtbl -> put_ConvertStringsToNumbers(This,Value) ) 

#define IXLExportParams_get_TablesOnly(This,Result)	\
    ( (This)->lpVtbl -> get_TablesOnly(This,Result) ) 

#define IXLExportParams_put_TablesOnly(This,Value)	\
    ( (This)->lpVtbl -> put_TablesOnly(This,Value) ) 

#define IXLExportParams_get_RemoveFormatting(This,Result)	\
    ( (This)->lpVtbl -> get_RemoveFormatting(This,Result) ) 

#define IXLExportParams_put_RemoveFormatting(This,Value)	\
    ( (This)->lpVtbl -> put_RemoveFormatting(This,Value) ) 

#define IXLExportParams_get_XLFileFormat(This,Result)	\
    ( (This)->lpVtbl -> get_XLFileFormat(This,Result) ) 

#define IXLExportParams_put_XLFileFormat(This,Value)	\
    ( (This)->lpVtbl -> put_XLFileFormat(This,Value) ) 

#define IXLExportParams_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IXLExportParams_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define IXLExportParams_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define IXLExportParams_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IXLExportParams_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#define IXLExportParams_get_WriteTitle(This,Result)	\
    ( (This)->lpVtbl -> get_WriteTitle(This,Result) ) 

#define IXLExportParams_put_WriteTitle(This,Value)	\
    ( (This)->lpVtbl -> put_WriteTitle(This,Value) ) 

#define IXLExportParams_get_WriteAuthor(This,Result)	\
    ( (This)->lpVtbl -> get_WriteAuthor(This,Result) ) 

#define IXLExportParams_put_WriteAuthor(This,Value)	\
    ( (This)->lpVtbl -> put_WriteAuthor(This,Value) ) 

#define IXLExportParams_get_WriteSubject(This,Result)	\
    ( (This)->lpVtbl -> get_WriteSubject(This,Result) ) 

#define IXLExportParams_put_WriteSubject(This,Value)	\
    ( (This)->lpVtbl -> put_WriteSubject(This,Value) ) 

#define IXLExportParams_get_WriteKeywords(This,Result)	\
    ( (This)->lpVtbl -> get_WriteKeywords(This,Result) ) 

#define IXLExportParams_put_WriteKeywords(This,Value)	\
    ( (This)->lpVtbl -> put_WriteKeywords(This,Value) ) 

#define IXLExportParams_get_RunningTitleMode(This,Result)	\
    ( (This)->lpVtbl -> get_RunningTitleMode(This,Result) ) 

#define IXLExportParams_put_RunningTitleMode(This,Value)	\
    ( (This)->lpVtbl -> put_RunningTitleMode(This,Value) ) 

#define IXLExportParams_get_KeepTextColor(This,Result)	\
    ( (This)->lpVtbl -> get_KeepTextColor(This,Result) ) 

#define IXLExportParams_put_KeepTextColor(This,Value)	\
    ( (This)->lpVtbl -> put_KeepTextColor(This,Value) ) 

#define IXLExportParams_get_BackgroundColorMode(This,Result)	\
    ( (This)->lpVtbl -> get_BackgroundColorMode(This,Result) ) 

#define IXLExportParams_put_BackgroundColorMode(This,Value)	\
    ( (This)->lpVtbl -> put_BackgroundColorMode(This,Value) ) 

#define IXLExportParams_get_PaperSize(This,Result)	\
    ( (This)->lpVtbl -> get_PaperSize(This,Result) ) 

#define IXLExportParams_put_PaperSize(This,Value)	\
    ( (This)->lpVtbl -> put_PaperSize(This,Value) ) 

#define IXLExportParams_get_PageOrientation(This,Result)	\
    ( (This)->lpVtbl -> get_PageOrientation(This,Result) ) 

#define IXLExportParams_put_PageOrientation(This,Value)	\
    ( (This)->lpVtbl -> put_PageOrientation(This,Value) ) 

#define IXLExportParams_get_OnePagePerWorksheet(This,Result)	\
    ( (This)->lpVtbl -> get_OnePagePerWorksheet(This,Result) ) 

#define IXLExportParams_put_OnePagePerWorksheet(This,Value)	\
    ( (This)->lpVtbl -> put_OnePagePerWorksheet(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXLExportParams_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_XLExportParams;

#ifdef __cplusplus

class DECLSPEC_UUID("1000202c-0000-1056-976E-008048D53AE3")
XLExportParams;
#endif

#ifndef __IHTMLExportParams_INTERFACE_DEFINED__
#define __IHTMLExportParams_INTERFACE_DEFINED__

/* interface IHTMLExportParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IHTMLExportParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000102d-0000-1056-976E-008048D53AE3")
    IHTMLExportParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_KeepLines( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_KeepLines( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WritePictures( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WritePictures( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_KeepTextAndBackgroundColor( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_KeepTextAndBackgroundColor( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HTMLSynthesisMode( 
            /* [retval][out] */ HTMLSynthesisModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_HTMLSynthesisMode( 
            /* [in] */ HTMLSynthesisModeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HTMLFormatMode( 
            /* [retval][out] */ HTMLFormatModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_HTMLFormatMode( 
            /* [in] */ HTMLFormatModeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EncodingType( 
            /* [retval][out] */ TextEncodingTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_EncodingType( 
            /* [in] */ TextEncodingTypeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CodePage( 
            /* [retval][out] */ CodePageEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CodePage( 
            /* [in] */ CodePageEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PictureResolution( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PictureResolution( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PictureJpegQuality( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PictureJpegQuality( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IHTMLExportParams *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteTitle( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteTitle( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteAuthor( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteAuthor( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteSubject( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteSubject( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteKeywords( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteKeywords( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PictureFormat( 
            /* [retval][out] */ ExportPictureFormatEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PictureFormat( 
            /* [in] */ ExportPictureFormatEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RunningTitleMode( 
            /* [retval][out] */ RunningTitleModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RunningTitleMode( 
            /* [in] */ RunningTitleModeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SplitDocumentToFiles( 
            /* [retval][out] */ HTMLDocumentSplittingModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SplitDocumentToFiles( 
            /* [in] */ HTMLDocumentSplittingModeEnum Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLExportParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHTMLExportParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHTMLExportParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHTMLExportParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IHTMLExportParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IHTMLExportParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IHTMLExportParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLExportParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IHTMLExportParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_KeepLines )( 
            IHTMLExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_KeepLines )( 
            IHTMLExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WritePictures )( 
            IHTMLExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WritePictures )( 
            IHTMLExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_KeepTextAndBackgroundColor )( 
            IHTMLExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_KeepTextAndBackgroundColor )( 
            IHTMLExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HTMLSynthesisMode )( 
            IHTMLExportParams * This,
            /* [retval][out] */ HTMLSynthesisModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HTMLSynthesisMode )( 
            IHTMLExportParams * This,
            /* [in] */ HTMLSynthesisModeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HTMLFormatMode )( 
            IHTMLExportParams * This,
            /* [retval][out] */ HTMLFormatModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HTMLFormatMode )( 
            IHTMLExportParams * This,
            /* [in] */ HTMLFormatModeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EncodingType )( 
            IHTMLExportParams * This,
            /* [retval][out] */ TextEncodingTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EncodingType )( 
            IHTMLExportParams * This,
            /* [in] */ TextEncodingTypeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CodePage )( 
            IHTMLExportParams * This,
            /* [retval][out] */ CodePageEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CodePage )( 
            IHTMLExportParams * This,
            /* [in] */ CodePageEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictureResolution )( 
            IHTMLExportParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PictureResolution )( 
            IHTMLExportParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictureJpegQuality )( 
            IHTMLExportParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PictureJpegQuality )( 
            IHTMLExportParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IHTMLExportParams * This,
            /* [in] */ IHTMLExportParams *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IHTMLExportParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            IHTMLExportParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IHTMLExportParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            IHTMLExportParams * This,
            /* [in] */ long HGlobal);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteTitle )( 
            IHTMLExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteTitle )( 
            IHTMLExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteAuthor )( 
            IHTMLExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteAuthor )( 
            IHTMLExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteSubject )( 
            IHTMLExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteSubject )( 
            IHTMLExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteKeywords )( 
            IHTMLExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteKeywords )( 
            IHTMLExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictureFormat )( 
            IHTMLExportParams * This,
            /* [retval][out] */ ExportPictureFormatEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PictureFormat )( 
            IHTMLExportParams * This,
            /* [in] */ ExportPictureFormatEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RunningTitleMode )( 
            IHTMLExportParams * This,
            /* [retval][out] */ RunningTitleModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RunningTitleMode )( 
            IHTMLExportParams * This,
            /* [in] */ RunningTitleModeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SplitDocumentToFiles )( 
            IHTMLExportParams * This,
            /* [retval][out] */ HTMLDocumentSplittingModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SplitDocumentToFiles )( 
            IHTMLExportParams * This,
            /* [in] */ HTMLDocumentSplittingModeEnum Value);
        
        END_INTERFACE
    } IHTMLExportParamsVtbl;

    interface IHTMLExportParams
    {
        CONST_VTBL struct IHTMLExportParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLExportParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHTMLExportParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHTMLExportParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHTMLExportParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IHTMLExportParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IHTMLExportParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IHTMLExportParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IHTMLExportParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IHTMLExportParams_get_KeepLines(This,Result)	\
    ( (This)->lpVtbl -> get_KeepLines(This,Result) ) 

#define IHTMLExportParams_put_KeepLines(This,Value)	\
    ( (This)->lpVtbl -> put_KeepLines(This,Value) ) 

#define IHTMLExportParams_get_WritePictures(This,Result)	\
    ( (This)->lpVtbl -> get_WritePictures(This,Result) ) 

#define IHTMLExportParams_put_WritePictures(This,Value)	\
    ( (This)->lpVtbl -> put_WritePictures(This,Value) ) 

#define IHTMLExportParams_get_KeepTextAndBackgroundColor(This,Result)	\
    ( (This)->lpVtbl -> get_KeepTextAndBackgroundColor(This,Result) ) 

#define IHTMLExportParams_put_KeepTextAndBackgroundColor(This,Value)	\
    ( (This)->lpVtbl -> put_KeepTextAndBackgroundColor(This,Value) ) 

#define IHTMLExportParams_get_HTMLSynthesisMode(This,Result)	\
    ( (This)->lpVtbl -> get_HTMLSynthesisMode(This,Result) ) 

#define IHTMLExportParams_put_HTMLSynthesisMode(This,Value)	\
    ( (This)->lpVtbl -> put_HTMLSynthesisMode(This,Value) ) 

#define IHTMLExportParams_get_HTMLFormatMode(This,Result)	\
    ( (This)->lpVtbl -> get_HTMLFormatMode(This,Result) ) 

#define IHTMLExportParams_put_HTMLFormatMode(This,Value)	\
    ( (This)->lpVtbl -> put_HTMLFormatMode(This,Value) ) 

#define IHTMLExportParams_get_EncodingType(This,Result)	\
    ( (This)->lpVtbl -> get_EncodingType(This,Result) ) 

#define IHTMLExportParams_put_EncodingType(This,Value)	\
    ( (This)->lpVtbl -> put_EncodingType(This,Value) ) 

#define IHTMLExportParams_get_CodePage(This,Result)	\
    ( (This)->lpVtbl -> get_CodePage(This,Result) ) 

#define IHTMLExportParams_put_CodePage(This,Value)	\
    ( (This)->lpVtbl -> put_CodePage(This,Value) ) 

#define IHTMLExportParams_get_PictureResolution(This,Result)	\
    ( (This)->lpVtbl -> get_PictureResolution(This,Result) ) 

#define IHTMLExportParams_put_PictureResolution(This,Value)	\
    ( (This)->lpVtbl -> put_PictureResolution(This,Value) ) 

#define IHTMLExportParams_get_PictureJpegQuality(This,Result)	\
    ( (This)->lpVtbl -> get_PictureJpegQuality(This,Result) ) 

#define IHTMLExportParams_put_PictureJpegQuality(This,Value)	\
    ( (This)->lpVtbl -> put_PictureJpegQuality(This,Value) ) 

#define IHTMLExportParams_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IHTMLExportParams_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define IHTMLExportParams_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define IHTMLExportParams_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IHTMLExportParams_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#define IHTMLExportParams_get_WriteTitle(This,Result)	\
    ( (This)->lpVtbl -> get_WriteTitle(This,Result) ) 

#define IHTMLExportParams_put_WriteTitle(This,Value)	\
    ( (This)->lpVtbl -> put_WriteTitle(This,Value) ) 

#define IHTMLExportParams_get_WriteAuthor(This,Result)	\
    ( (This)->lpVtbl -> get_WriteAuthor(This,Result) ) 

#define IHTMLExportParams_put_WriteAuthor(This,Value)	\
    ( (This)->lpVtbl -> put_WriteAuthor(This,Value) ) 

#define IHTMLExportParams_get_WriteSubject(This,Result)	\
    ( (This)->lpVtbl -> get_WriteSubject(This,Result) ) 

#define IHTMLExportParams_put_WriteSubject(This,Value)	\
    ( (This)->lpVtbl -> put_WriteSubject(This,Value) ) 

#define IHTMLExportParams_get_WriteKeywords(This,Result)	\
    ( (This)->lpVtbl -> get_WriteKeywords(This,Result) ) 

#define IHTMLExportParams_put_WriteKeywords(This,Value)	\
    ( (This)->lpVtbl -> put_WriteKeywords(This,Value) ) 

#define IHTMLExportParams_get_PictureFormat(This,Result)	\
    ( (This)->lpVtbl -> get_PictureFormat(This,Result) ) 

#define IHTMLExportParams_put_PictureFormat(This,Value)	\
    ( (This)->lpVtbl -> put_PictureFormat(This,Value) ) 

#define IHTMLExportParams_get_RunningTitleMode(This,Result)	\
    ( (This)->lpVtbl -> get_RunningTitleMode(This,Result) ) 

#define IHTMLExportParams_put_RunningTitleMode(This,Value)	\
    ( (This)->lpVtbl -> put_RunningTitleMode(This,Value) ) 

#define IHTMLExportParams_get_SplitDocumentToFiles(This,Result)	\
    ( (This)->lpVtbl -> get_SplitDocumentToFiles(This,Result) ) 

#define IHTMLExportParams_put_SplitDocumentToFiles(This,Value)	\
    ( (This)->lpVtbl -> put_SplitDocumentToFiles(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHTMLExportParams_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_HTMLExportParams;

#ifdef __cplusplus

class DECLSPEC_UUID("1000202e-0000-1056-976E-008048D53AE3")
HTMLExportParams;
#endif

#ifndef __IPDFEncryptionInfo_INTERFACE_DEFINED__
#define __IPDFEncryptionInfo_INTERFACE_DEFINED__

/* interface IPDFEncryptionInfo */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IPDFEncryptionInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001064-0000-1056-976E-008048D53AE3")
    IPDFEncryptionInfo : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsEncryptionRequested( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsEncryptionRequested( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_KeyLength( 
            /* [retval][out] */ PDFKeyLengthEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_KeyLength( 
            /* [in] */ PDFKeyLengthEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UserPassword( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_UserPassword( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_OwnerPassword( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_OwnerPassword( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PermissionPrint( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PermissionPrint( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PermissionModifyContent( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PermissionModifyContent( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PermissionExtractTextAndGraphics( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PermissionExtractTextAndGraphics( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PermissionAddAnnotations( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PermissionAddAnnotations( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PermissionFillFormFields( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PermissionFillFormFields( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PermissionExtractTextAndGraphicsExt( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PermissionExtractTextAndGraphicsExt( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PermissionAssembleDoc( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PermissionAssembleDoc( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PermissionPrintExt( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PermissionPrintExt( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UseAES( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_UseAES( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IPDFEncryptionInfo *From) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPDFEncryptionInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPDFEncryptionInfo * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPDFEncryptionInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPDFEncryptionInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPDFEncryptionInfo * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPDFEncryptionInfo * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPDFEncryptionInfo * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPDFEncryptionInfo * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPDFEncryptionInfo * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsEncryptionRequested )( 
            IPDFEncryptionInfo * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsEncryptionRequested )( 
            IPDFEncryptionInfo * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_KeyLength )( 
            IPDFEncryptionInfo * This,
            /* [retval][out] */ PDFKeyLengthEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_KeyLength )( 
            IPDFEncryptionInfo * This,
            /* [in] */ PDFKeyLengthEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserPassword )( 
            IPDFEncryptionInfo * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UserPassword )( 
            IPDFEncryptionInfo * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerPassword )( 
            IPDFEncryptionInfo * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OwnerPassword )( 
            IPDFEncryptionInfo * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PermissionPrint )( 
            IPDFEncryptionInfo * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PermissionPrint )( 
            IPDFEncryptionInfo * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PermissionModifyContent )( 
            IPDFEncryptionInfo * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PermissionModifyContent )( 
            IPDFEncryptionInfo * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PermissionExtractTextAndGraphics )( 
            IPDFEncryptionInfo * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PermissionExtractTextAndGraphics )( 
            IPDFEncryptionInfo * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PermissionAddAnnotations )( 
            IPDFEncryptionInfo * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PermissionAddAnnotations )( 
            IPDFEncryptionInfo * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PermissionFillFormFields )( 
            IPDFEncryptionInfo * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PermissionFillFormFields )( 
            IPDFEncryptionInfo * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PermissionExtractTextAndGraphicsExt )( 
            IPDFEncryptionInfo * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PermissionExtractTextAndGraphicsExt )( 
            IPDFEncryptionInfo * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PermissionAssembleDoc )( 
            IPDFEncryptionInfo * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PermissionAssembleDoc )( 
            IPDFEncryptionInfo * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PermissionPrintExt )( 
            IPDFEncryptionInfo * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PermissionPrintExt )( 
            IPDFEncryptionInfo * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UseAES )( 
            IPDFEncryptionInfo * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UseAES )( 
            IPDFEncryptionInfo * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IPDFEncryptionInfo * This,
            /* [in] */ IPDFEncryptionInfo *From);
        
        END_INTERFACE
    } IPDFEncryptionInfoVtbl;

    interface IPDFEncryptionInfo
    {
        CONST_VTBL struct IPDFEncryptionInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPDFEncryptionInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPDFEncryptionInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPDFEncryptionInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPDFEncryptionInfo_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPDFEncryptionInfo_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPDFEncryptionInfo_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPDFEncryptionInfo_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPDFEncryptionInfo_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IPDFEncryptionInfo_get_IsEncryptionRequested(This,Result)	\
    ( (This)->lpVtbl -> get_IsEncryptionRequested(This,Result) ) 

#define IPDFEncryptionInfo_put_IsEncryptionRequested(This,Value)	\
    ( (This)->lpVtbl -> put_IsEncryptionRequested(This,Value) ) 

#define IPDFEncryptionInfo_get_KeyLength(This,Result)	\
    ( (This)->lpVtbl -> get_KeyLength(This,Result) ) 

#define IPDFEncryptionInfo_put_KeyLength(This,Value)	\
    ( (This)->lpVtbl -> put_KeyLength(This,Value) ) 

#define IPDFEncryptionInfo_get_UserPassword(This,Result)	\
    ( (This)->lpVtbl -> get_UserPassword(This,Result) ) 

#define IPDFEncryptionInfo_put_UserPassword(This,Value)	\
    ( (This)->lpVtbl -> put_UserPassword(This,Value) ) 

#define IPDFEncryptionInfo_get_OwnerPassword(This,Result)	\
    ( (This)->lpVtbl -> get_OwnerPassword(This,Result) ) 

#define IPDFEncryptionInfo_put_OwnerPassword(This,Value)	\
    ( (This)->lpVtbl -> put_OwnerPassword(This,Value) ) 

#define IPDFEncryptionInfo_get_PermissionPrint(This,Result)	\
    ( (This)->lpVtbl -> get_PermissionPrint(This,Result) ) 

#define IPDFEncryptionInfo_put_PermissionPrint(This,Value)	\
    ( (This)->lpVtbl -> put_PermissionPrint(This,Value) ) 

#define IPDFEncryptionInfo_get_PermissionModifyContent(This,Result)	\
    ( (This)->lpVtbl -> get_PermissionModifyContent(This,Result) ) 

#define IPDFEncryptionInfo_put_PermissionModifyContent(This,Value)	\
    ( (This)->lpVtbl -> put_PermissionModifyContent(This,Value) ) 

#define IPDFEncryptionInfo_get_PermissionExtractTextAndGraphics(This,Result)	\
    ( (This)->lpVtbl -> get_PermissionExtractTextAndGraphics(This,Result) ) 

#define IPDFEncryptionInfo_put_PermissionExtractTextAndGraphics(This,Value)	\
    ( (This)->lpVtbl -> put_PermissionExtractTextAndGraphics(This,Value) ) 

#define IPDFEncryptionInfo_get_PermissionAddAnnotations(This,Result)	\
    ( (This)->lpVtbl -> get_PermissionAddAnnotations(This,Result) ) 

#define IPDFEncryptionInfo_put_PermissionAddAnnotations(This,Value)	\
    ( (This)->lpVtbl -> put_PermissionAddAnnotations(This,Value) ) 

#define IPDFEncryptionInfo_get_PermissionFillFormFields(This,Result)	\
    ( (This)->lpVtbl -> get_PermissionFillFormFields(This,Result) ) 

#define IPDFEncryptionInfo_put_PermissionFillFormFields(This,Value)	\
    ( (This)->lpVtbl -> put_PermissionFillFormFields(This,Value) ) 

#define IPDFEncryptionInfo_get_PermissionExtractTextAndGraphicsExt(This,Result)	\
    ( (This)->lpVtbl -> get_PermissionExtractTextAndGraphicsExt(This,Result) ) 

#define IPDFEncryptionInfo_put_PermissionExtractTextAndGraphicsExt(This,Value)	\
    ( (This)->lpVtbl -> put_PermissionExtractTextAndGraphicsExt(This,Value) ) 

#define IPDFEncryptionInfo_get_PermissionAssembleDoc(This,Result)	\
    ( (This)->lpVtbl -> get_PermissionAssembleDoc(This,Result) ) 

#define IPDFEncryptionInfo_put_PermissionAssembleDoc(This,Value)	\
    ( (This)->lpVtbl -> put_PermissionAssembleDoc(This,Value) ) 

#define IPDFEncryptionInfo_get_PermissionPrintExt(This,Result)	\
    ( (This)->lpVtbl -> get_PermissionPrintExt(This,Result) ) 

#define IPDFEncryptionInfo_put_PermissionPrintExt(This,Value)	\
    ( (This)->lpVtbl -> put_PermissionPrintExt(This,Value) ) 

#define IPDFEncryptionInfo_get_UseAES(This,Result)	\
    ( (This)->lpVtbl -> get_UseAES(This,Result) ) 

#define IPDFEncryptionInfo_put_UseAES(This,Value)	\
    ( (This)->lpVtbl -> put_UseAES(This,Value) ) 

#define IPDFEncryptionInfo_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPDFEncryptionInfo_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_PDFEncryptionInfo;

#ifdef __cplusplus

class DECLSPEC_UUID("10002056-0000-1056-976E-008048D53AE3")
PDFEncryptionInfo;
#endif

#ifndef __IPDFMRCParams_INTERFACE_DEFINED__
#define __IPDFMRCParams_INTERFACE_DEFINED__

/* interface IPDFMRCParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IPDFMRCParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000108D-0000-1056-976E-008048D53AE3")
    IPDFMRCParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CompressionLevel( 
            /* [retval][out] */ PDFMRCCompressionLevelEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CompressionLevel( 
            /* [in] */ PDFMRCCompressionLevelEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BackgroundQuality( 
            /* [retval][out] */ long *Quality) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BackgroundQuality( 
            /* [in] */ long Quality) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BackgroundFormat( 
            /* [retval][out] */ ExportPictureFormatEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BackgroundFormat( 
            /* [in] */ ExportPictureFormatEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_KeepBackground( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_KeepBackground( 
            /* [in] */ VARIANT_BOOL Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BackgroundColor( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BackgroundColor( 
            /* [in] */ long Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BackgroundDownSampling( 
            /* [retval][out] */ long *Rate) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BackgroundDownSampling( 
            /* [in] */ long Rate) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MonochromeText( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_MonochromeText( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TextColor( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TextColor( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ColorMaskQuality( 
            /* [retval][out] */ long *Quality) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ColorMaskQuality( 
            /* [in] */ long Quality) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ColorMaskFormat( 
            /* [retval][out] */ ExportPictureFormatEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ColorMaskFormat( 
            /* [in] */ ExportPictureFormatEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ColorMaskDownSampling( 
            /* [retval][out] */ long *Rate) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ColorMaskDownSampling( 
            /* [in] */ long Rate) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TextMaskFormat( 
            /* [retval][out] */ ExportPictureFormatEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TextMaskFormat( 
            /* [in] */ ExportPictureFormatEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TextMaskQuality( 
            /* [retval][out] */ long *Quality) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TextMaskQuality( 
            /* [in] */ long Quality) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TextMaskDownSampling( 
            /* [retval][out] */ long *Rate) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TextMaskDownSampling( 
            /* [in] */ long Rate) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PicturesInBackground( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PicturesInBackground( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPDFMRCParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPDFMRCParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPDFMRCParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPDFMRCParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPDFMRCParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPDFMRCParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPDFMRCParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPDFMRCParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPDFMRCParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CompressionLevel )( 
            IPDFMRCParams * This,
            /* [retval][out] */ PDFMRCCompressionLevelEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CompressionLevel )( 
            IPDFMRCParams * This,
            /* [in] */ PDFMRCCompressionLevelEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundQuality )( 
            IPDFMRCParams * This,
            /* [retval][out] */ long *Quality);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundQuality )( 
            IPDFMRCParams * This,
            /* [in] */ long Quality);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundFormat )( 
            IPDFMRCParams * This,
            /* [retval][out] */ ExportPictureFormatEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundFormat )( 
            IPDFMRCParams * This,
            /* [in] */ ExportPictureFormatEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_KeepBackground )( 
            IPDFMRCParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_KeepBackground )( 
            IPDFMRCParams * This,
            /* [in] */ VARIANT_BOOL Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundColor )( 
            IPDFMRCParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundColor )( 
            IPDFMRCParams * This,
            /* [in] */ long Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundDownSampling )( 
            IPDFMRCParams * This,
            /* [retval][out] */ long *Rate);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundDownSampling )( 
            IPDFMRCParams * This,
            /* [in] */ long Rate);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MonochromeText )( 
            IPDFMRCParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MonochromeText )( 
            IPDFMRCParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TextColor )( 
            IPDFMRCParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TextColor )( 
            IPDFMRCParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorMaskQuality )( 
            IPDFMRCParams * This,
            /* [retval][out] */ long *Quality);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ColorMaskQuality )( 
            IPDFMRCParams * This,
            /* [in] */ long Quality);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorMaskFormat )( 
            IPDFMRCParams * This,
            /* [retval][out] */ ExportPictureFormatEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ColorMaskFormat )( 
            IPDFMRCParams * This,
            /* [in] */ ExportPictureFormatEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorMaskDownSampling )( 
            IPDFMRCParams * This,
            /* [retval][out] */ long *Rate);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ColorMaskDownSampling )( 
            IPDFMRCParams * This,
            /* [in] */ long Rate);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TextMaskFormat )( 
            IPDFMRCParams * This,
            /* [retval][out] */ ExportPictureFormatEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TextMaskFormat )( 
            IPDFMRCParams * This,
            /* [in] */ ExportPictureFormatEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TextMaskQuality )( 
            IPDFMRCParams * This,
            /* [retval][out] */ long *Quality);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TextMaskQuality )( 
            IPDFMRCParams * This,
            /* [in] */ long Quality);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TextMaskDownSampling )( 
            IPDFMRCParams * This,
            /* [retval][out] */ long *Rate);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TextMaskDownSampling )( 
            IPDFMRCParams * This,
            /* [in] */ long Rate);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PicturesInBackground )( 
            IPDFMRCParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PicturesInBackground )( 
            IPDFMRCParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        END_INTERFACE
    } IPDFMRCParamsVtbl;

    interface IPDFMRCParams
    {
        CONST_VTBL struct IPDFMRCParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPDFMRCParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPDFMRCParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPDFMRCParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPDFMRCParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPDFMRCParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPDFMRCParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPDFMRCParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPDFMRCParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IPDFMRCParams_get_CompressionLevel(This,Result)	\
    ( (This)->lpVtbl -> get_CompressionLevel(This,Result) ) 

#define IPDFMRCParams_put_CompressionLevel(This,Value)	\
    ( (This)->lpVtbl -> put_CompressionLevel(This,Value) ) 

#define IPDFMRCParams_get_BackgroundQuality(This,Quality)	\
    ( (This)->lpVtbl -> get_BackgroundQuality(This,Quality) ) 

#define IPDFMRCParams_put_BackgroundQuality(This,Quality)	\
    ( (This)->lpVtbl -> put_BackgroundQuality(This,Quality) ) 

#define IPDFMRCParams_get_BackgroundFormat(This,Result)	\
    ( (This)->lpVtbl -> get_BackgroundFormat(This,Result) ) 

#define IPDFMRCParams_put_BackgroundFormat(This,Value)	\
    ( (This)->lpVtbl -> put_BackgroundFormat(This,Value) ) 

#define IPDFMRCParams_get_KeepBackground(This,Result)	\
    ( (This)->lpVtbl -> get_KeepBackground(This,Result) ) 

#define IPDFMRCParams_put_KeepBackground(This,Result)	\
    ( (This)->lpVtbl -> put_KeepBackground(This,Result) ) 

#define IPDFMRCParams_get_BackgroundColor(This,Result)	\
    ( (This)->lpVtbl -> get_BackgroundColor(This,Result) ) 

#define IPDFMRCParams_put_BackgroundColor(This,Result)	\
    ( (This)->lpVtbl -> put_BackgroundColor(This,Result) ) 

#define IPDFMRCParams_get_BackgroundDownSampling(This,Rate)	\
    ( (This)->lpVtbl -> get_BackgroundDownSampling(This,Rate) ) 

#define IPDFMRCParams_put_BackgroundDownSampling(This,Rate)	\
    ( (This)->lpVtbl -> put_BackgroundDownSampling(This,Rate) ) 

#define IPDFMRCParams_get_MonochromeText(This,Result)	\
    ( (This)->lpVtbl -> get_MonochromeText(This,Result) ) 

#define IPDFMRCParams_put_MonochromeText(This,Value)	\
    ( (This)->lpVtbl -> put_MonochromeText(This,Value) ) 

#define IPDFMRCParams_get_TextColor(This,Result)	\
    ( (This)->lpVtbl -> get_TextColor(This,Result) ) 

#define IPDFMRCParams_put_TextColor(This,Value)	\
    ( (This)->lpVtbl -> put_TextColor(This,Value) ) 

#define IPDFMRCParams_get_ColorMaskQuality(This,Quality)	\
    ( (This)->lpVtbl -> get_ColorMaskQuality(This,Quality) ) 

#define IPDFMRCParams_put_ColorMaskQuality(This,Quality)	\
    ( (This)->lpVtbl -> put_ColorMaskQuality(This,Quality) ) 

#define IPDFMRCParams_get_ColorMaskFormat(This,Result)	\
    ( (This)->lpVtbl -> get_ColorMaskFormat(This,Result) ) 

#define IPDFMRCParams_put_ColorMaskFormat(This,Value)	\
    ( (This)->lpVtbl -> put_ColorMaskFormat(This,Value) ) 

#define IPDFMRCParams_get_ColorMaskDownSampling(This,Rate)	\
    ( (This)->lpVtbl -> get_ColorMaskDownSampling(This,Rate) ) 

#define IPDFMRCParams_put_ColorMaskDownSampling(This,Rate)	\
    ( (This)->lpVtbl -> put_ColorMaskDownSampling(This,Rate) ) 

#define IPDFMRCParams_get_TextMaskFormat(This,Result)	\
    ( (This)->lpVtbl -> get_TextMaskFormat(This,Result) ) 

#define IPDFMRCParams_put_TextMaskFormat(This,Value)	\
    ( (This)->lpVtbl -> put_TextMaskFormat(This,Value) ) 

#define IPDFMRCParams_get_TextMaskQuality(This,Quality)	\
    ( (This)->lpVtbl -> get_TextMaskQuality(This,Quality) ) 

#define IPDFMRCParams_put_TextMaskQuality(This,Quality)	\
    ( (This)->lpVtbl -> put_TextMaskQuality(This,Quality) ) 

#define IPDFMRCParams_get_TextMaskDownSampling(This,Rate)	\
    ( (This)->lpVtbl -> get_TextMaskDownSampling(This,Rate) ) 

#define IPDFMRCParams_put_TextMaskDownSampling(This,Rate)	\
    ( (This)->lpVtbl -> put_TextMaskDownSampling(This,Rate) ) 

#define IPDFMRCParams_get_PicturesInBackground(This,Result)	\
    ( (This)->lpVtbl -> get_PicturesInBackground(This,Result) ) 

#define IPDFMRCParams_put_PicturesInBackground(This,Value)	\
    ( (This)->lpVtbl -> put_PicturesInBackground(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPDFMRCParams_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_PDFMRCParams;

#ifdef __cplusplus

class DECLSPEC_UUID("10002076-0000-1056-976E-008048D53AE3")
PDFMRCParams;
#endif

#ifndef __IPDFExportParamsOld_INTERFACE_DEFINED__
#define __IPDFExportParamsOld_INTERFACE_DEFINED__

/* interface IPDFExportParamsOld */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IPDFExportParamsOld;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000102e-0000-1056-976E-008048D53AE3")
    IPDFExportParamsOld : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReplaceUncertainWordsWithImage( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReplaceUncertainWordsWithImage( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_KeepTextAndBackgroundColor( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_KeepTextAndBackgroundColor( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ExportMode( 
            /* [retval][out] */ PDFExportModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ExportMode( 
            /* [in] */ PDFExportModeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PictureResolution( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PictureResolution( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Quality( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Quality( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteAuthor( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteAuthor( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteCreator( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteCreator( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteProducer( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteProducer( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteTitle( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteTitle( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteSubject( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteSubject( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteKeywords( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteKeywords( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FontMode( 
            /* [retval][out] */ FontModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FontMode( 
            /* [in] */ FontModeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IPDFExportParamsOld *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EncryptionInfo( 
            /* [retval][out] */ IPDFEncryptionInfo **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_EncryptionInfo( 
            /* [in] */ IPDFEncryptionInfo *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteLinks( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteLinks( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteTaggedPDF( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteTaggedPDF( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SetPageSizeByLayoutSize( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SetPageSizeByLayoutSize( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PaperWidth( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PaperWidth( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PaperHeight( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PaperHeight( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PictureFormat( 
            /* [retval][out] */ ExportPictureFormatEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PictureFormat( 
            /* [in] */ ExportPictureFormatEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EmbedFonts( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_EmbedFonts( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][hidden][propget] */ HRESULT STDMETHODCALLTYPE get_SetPageSizeByOriginalImageSize( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][hidden][propput] */ HRESULT STDMETHODCALLTYPE put_SetPageSizeByOriginalImageSize( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EnableMRC( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_EnableMRC( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MRCParams( 
            /* [retval][out] */ IPDFMRCParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PDFVersion( 
            /* [retval][out] */ PDFVersionEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PDFVersion( 
            /* [in] */ PDFVersionEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RunningTitleMode( 
            /* [retval][out] */ RunningTitleModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RunningTitleMode( 
            /* [in] */ RunningTitleModeEnum Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPDFExportParamsOldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPDFExportParamsOld * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPDFExportParamsOld * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPDFExportParamsOld * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPDFExportParamsOld * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPDFExportParamsOld * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPDFExportParamsOld * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPDFExportParamsOld * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPDFExportParamsOld * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReplaceUncertainWordsWithImage )( 
            IPDFExportParamsOld * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReplaceUncertainWordsWithImage )( 
            IPDFExportParamsOld * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_KeepTextAndBackgroundColor )( 
            IPDFExportParamsOld * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_KeepTextAndBackgroundColor )( 
            IPDFExportParamsOld * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExportMode )( 
            IPDFExportParamsOld * This,
            /* [retval][out] */ PDFExportModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ExportMode )( 
            IPDFExportParamsOld * This,
            /* [in] */ PDFExportModeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictureResolution )( 
            IPDFExportParamsOld * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PictureResolution )( 
            IPDFExportParamsOld * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Quality )( 
            IPDFExportParamsOld * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Quality )( 
            IPDFExportParamsOld * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteAuthor )( 
            IPDFExportParamsOld * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteAuthor )( 
            IPDFExportParamsOld * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteCreator )( 
            IPDFExportParamsOld * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteCreator )( 
            IPDFExportParamsOld * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteProducer )( 
            IPDFExportParamsOld * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteProducer )( 
            IPDFExportParamsOld * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteTitle )( 
            IPDFExportParamsOld * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteTitle )( 
            IPDFExportParamsOld * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteSubject )( 
            IPDFExportParamsOld * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteSubject )( 
            IPDFExportParamsOld * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteKeywords )( 
            IPDFExportParamsOld * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteKeywords )( 
            IPDFExportParamsOld * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FontMode )( 
            IPDFExportParamsOld * This,
            /* [retval][out] */ FontModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FontMode )( 
            IPDFExportParamsOld * This,
            /* [in] */ FontModeEnum Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IPDFExportParamsOld * This,
            /* [in] */ IPDFExportParamsOld *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IPDFExportParamsOld * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            IPDFExportParamsOld * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IPDFExportParamsOld * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            IPDFExportParamsOld * This,
            /* [in] */ long HGlobal);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EncryptionInfo )( 
            IPDFExportParamsOld * This,
            /* [retval][out] */ IPDFEncryptionInfo **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EncryptionInfo )( 
            IPDFExportParamsOld * This,
            /* [in] */ IPDFEncryptionInfo *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteLinks )( 
            IPDFExportParamsOld * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteLinks )( 
            IPDFExportParamsOld * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteTaggedPDF )( 
            IPDFExportParamsOld * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteTaggedPDF )( 
            IPDFExportParamsOld * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SetPageSizeByLayoutSize )( 
            IPDFExportParamsOld * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SetPageSizeByLayoutSize )( 
            IPDFExportParamsOld * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PaperWidth )( 
            IPDFExportParamsOld * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PaperWidth )( 
            IPDFExportParamsOld * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PaperHeight )( 
            IPDFExportParamsOld * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PaperHeight )( 
            IPDFExportParamsOld * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictureFormat )( 
            IPDFExportParamsOld * This,
            /* [retval][out] */ ExportPictureFormatEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PictureFormat )( 
            IPDFExportParamsOld * This,
            /* [in] */ ExportPictureFormatEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmbedFonts )( 
            IPDFExportParamsOld * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EmbedFonts )( 
            IPDFExportParamsOld * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SetPageSizeByOriginalImageSize )( 
            IPDFExportParamsOld * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][hidden][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SetPageSizeByOriginalImageSize )( 
            IPDFExportParamsOld * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableMRC )( 
            IPDFExportParamsOld * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableMRC )( 
            IPDFExportParamsOld * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MRCParams )( 
            IPDFExportParamsOld * This,
            /* [retval][out] */ IPDFMRCParams **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PDFVersion )( 
            IPDFExportParamsOld * This,
            /* [retval][out] */ PDFVersionEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PDFVersion )( 
            IPDFExportParamsOld * This,
            /* [in] */ PDFVersionEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RunningTitleMode )( 
            IPDFExportParamsOld * This,
            /* [retval][out] */ RunningTitleModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RunningTitleMode )( 
            IPDFExportParamsOld * This,
            /* [in] */ RunningTitleModeEnum Value);
        
        END_INTERFACE
    } IPDFExportParamsOldVtbl;

    interface IPDFExportParamsOld
    {
        CONST_VTBL struct IPDFExportParamsOldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPDFExportParamsOld_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPDFExportParamsOld_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPDFExportParamsOld_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPDFExportParamsOld_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPDFExportParamsOld_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPDFExportParamsOld_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPDFExportParamsOld_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPDFExportParamsOld_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IPDFExportParamsOld_get_ReplaceUncertainWordsWithImage(This,Result)	\
    ( (This)->lpVtbl -> get_ReplaceUncertainWordsWithImage(This,Result) ) 

#define IPDFExportParamsOld_put_ReplaceUncertainWordsWithImage(This,Value)	\
    ( (This)->lpVtbl -> put_ReplaceUncertainWordsWithImage(This,Value) ) 

#define IPDFExportParamsOld_get_KeepTextAndBackgroundColor(This,Result)	\
    ( (This)->lpVtbl -> get_KeepTextAndBackgroundColor(This,Result) ) 

#define IPDFExportParamsOld_put_KeepTextAndBackgroundColor(This,Value)	\
    ( (This)->lpVtbl -> put_KeepTextAndBackgroundColor(This,Value) ) 

#define IPDFExportParamsOld_get_ExportMode(This,Result)	\
    ( (This)->lpVtbl -> get_ExportMode(This,Result) ) 

#define IPDFExportParamsOld_put_ExportMode(This,Value)	\
    ( (This)->lpVtbl -> put_ExportMode(This,Value) ) 

#define IPDFExportParamsOld_get_PictureResolution(This,Result)	\
    ( (This)->lpVtbl -> get_PictureResolution(This,Result) ) 

#define IPDFExportParamsOld_put_PictureResolution(This,Value)	\
    ( (This)->lpVtbl -> put_PictureResolution(This,Value) ) 

#define IPDFExportParamsOld_get_Quality(This,Result)	\
    ( (This)->lpVtbl -> get_Quality(This,Result) ) 

#define IPDFExportParamsOld_put_Quality(This,Value)	\
    ( (This)->lpVtbl -> put_Quality(This,Value) ) 

#define IPDFExportParamsOld_get_WriteAuthor(This,Result)	\
    ( (This)->lpVtbl -> get_WriteAuthor(This,Result) ) 

#define IPDFExportParamsOld_put_WriteAuthor(This,Value)	\
    ( (This)->lpVtbl -> put_WriteAuthor(This,Value) ) 

#define IPDFExportParamsOld_get_WriteCreator(This,Result)	\
    ( (This)->lpVtbl -> get_WriteCreator(This,Result) ) 

#define IPDFExportParamsOld_put_WriteCreator(This,Value)	\
    ( (This)->lpVtbl -> put_WriteCreator(This,Value) ) 

#define IPDFExportParamsOld_get_WriteProducer(This,Result)	\
    ( (This)->lpVtbl -> get_WriteProducer(This,Result) ) 

#define IPDFExportParamsOld_put_WriteProducer(This,Value)	\
    ( (This)->lpVtbl -> put_WriteProducer(This,Value) ) 

#define IPDFExportParamsOld_get_WriteTitle(This,Result)	\
    ( (This)->lpVtbl -> get_WriteTitle(This,Result) ) 

#define IPDFExportParamsOld_put_WriteTitle(This,Value)	\
    ( (This)->lpVtbl -> put_WriteTitle(This,Value) ) 

#define IPDFExportParamsOld_get_WriteSubject(This,Result)	\
    ( (This)->lpVtbl -> get_WriteSubject(This,Result) ) 

#define IPDFExportParamsOld_put_WriteSubject(This,Value)	\
    ( (This)->lpVtbl -> put_WriteSubject(This,Value) ) 

#define IPDFExportParamsOld_get_WriteKeywords(This,Result)	\
    ( (This)->lpVtbl -> get_WriteKeywords(This,Result) ) 

#define IPDFExportParamsOld_put_WriteKeywords(This,Value)	\
    ( (This)->lpVtbl -> put_WriteKeywords(This,Value) ) 

#define IPDFExportParamsOld_get_FontMode(This,Result)	\
    ( (This)->lpVtbl -> get_FontMode(This,Result) ) 

#define IPDFExportParamsOld_put_FontMode(This,Value)	\
    ( (This)->lpVtbl -> put_FontMode(This,Value) ) 

#define IPDFExportParamsOld_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IPDFExportParamsOld_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define IPDFExportParamsOld_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define IPDFExportParamsOld_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IPDFExportParamsOld_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#define IPDFExportParamsOld_get_EncryptionInfo(This,Result)	\
    ( (This)->lpVtbl -> get_EncryptionInfo(This,Result) ) 

#define IPDFExportParamsOld_put_EncryptionInfo(This,Value)	\
    ( (This)->lpVtbl -> put_EncryptionInfo(This,Value) ) 

#define IPDFExportParamsOld_get_WriteLinks(This,Result)	\
    ( (This)->lpVtbl -> get_WriteLinks(This,Result) ) 

#define IPDFExportParamsOld_put_WriteLinks(This,Value)	\
    ( (This)->lpVtbl -> put_WriteLinks(This,Value) ) 

#define IPDFExportParamsOld_get_WriteTaggedPDF(This,Result)	\
    ( (This)->lpVtbl -> get_WriteTaggedPDF(This,Result) ) 

#define IPDFExportParamsOld_put_WriteTaggedPDF(This,Value)	\
    ( (This)->lpVtbl -> put_WriteTaggedPDF(This,Value) ) 

#define IPDFExportParamsOld_get_SetPageSizeByLayoutSize(This,Result)	\
    ( (This)->lpVtbl -> get_SetPageSizeByLayoutSize(This,Result) ) 

#define IPDFExportParamsOld_put_SetPageSizeByLayoutSize(This,Value)	\
    ( (This)->lpVtbl -> put_SetPageSizeByLayoutSize(This,Value) ) 

#define IPDFExportParamsOld_get_PaperWidth(This,Result)	\
    ( (This)->lpVtbl -> get_PaperWidth(This,Result) ) 

#define IPDFExportParamsOld_put_PaperWidth(This,Value)	\
    ( (This)->lpVtbl -> put_PaperWidth(This,Value) ) 

#define IPDFExportParamsOld_get_PaperHeight(This,Result)	\
    ( (This)->lpVtbl -> get_PaperHeight(This,Result) ) 

#define IPDFExportParamsOld_put_PaperHeight(This,Value)	\
    ( (This)->lpVtbl -> put_PaperHeight(This,Value) ) 

#define IPDFExportParamsOld_get_PictureFormat(This,Result)	\
    ( (This)->lpVtbl -> get_PictureFormat(This,Result) ) 

#define IPDFExportParamsOld_put_PictureFormat(This,Value)	\
    ( (This)->lpVtbl -> put_PictureFormat(This,Value) ) 

#define IPDFExportParamsOld_get_EmbedFonts(This,Result)	\
    ( (This)->lpVtbl -> get_EmbedFonts(This,Result) ) 

#define IPDFExportParamsOld_put_EmbedFonts(This,Value)	\
    ( (This)->lpVtbl -> put_EmbedFonts(This,Value) ) 

#define IPDFExportParamsOld_get_SetPageSizeByOriginalImageSize(This,Result)	\
    ( (This)->lpVtbl -> get_SetPageSizeByOriginalImageSize(This,Result) ) 

#define IPDFExportParamsOld_put_SetPageSizeByOriginalImageSize(This,Value)	\
    ( (This)->lpVtbl -> put_SetPageSizeByOriginalImageSize(This,Value) ) 

#define IPDFExportParamsOld_get_EnableMRC(This,Result)	\
    ( (This)->lpVtbl -> get_EnableMRC(This,Result) ) 

#define IPDFExportParamsOld_put_EnableMRC(This,Value)	\
    ( (This)->lpVtbl -> put_EnableMRC(This,Value) ) 

#define IPDFExportParamsOld_get_MRCParams(This,Result)	\
    ( (This)->lpVtbl -> get_MRCParams(This,Result) ) 

#define IPDFExportParamsOld_get_PDFVersion(This,Result)	\
    ( (This)->lpVtbl -> get_PDFVersion(This,Result) ) 

#define IPDFExportParamsOld_put_PDFVersion(This,Value)	\
    ( (This)->lpVtbl -> put_PDFVersion(This,Value) ) 

#define IPDFExportParamsOld_get_RunningTitleMode(This,Result)	\
    ( (This)->lpVtbl -> get_RunningTitleMode(This,Result) ) 

#define IPDFExportParamsOld_put_RunningTitleMode(This,Value)	\
    ( (This)->lpVtbl -> put_RunningTitleMode(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPDFExportParamsOld_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_PDFExportParamsOld;

#ifdef __cplusplus

class DECLSPEC_UUID("1000202f-0000-1056-976E-008048D53AE3")
PDFExportParamsOld;
#endif

#ifndef __IPDFAExportParamsOld_INTERFACE_DEFINED__
#define __IPDFAExportParamsOld_INTERFACE_DEFINED__

/* interface IPDFAExportParamsOld */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IPDFAExportParamsOld;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001076-0000-1056-976E-008048D53AE3")
    IPDFAExportParamsOld : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ExportMode( 
            /* [retval][out] */ PDFExportModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ExportMode( 
            /* [in] */ PDFExportModeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PictureResolution( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PictureResolution( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Quality( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Quality( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteAuthor( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteAuthor( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteCreator( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteCreator( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteProducer( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteProducer( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteTitle( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteTitle( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteSubject( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteSubject( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteKeywords( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteKeywords( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IPDFAExportParamsOld *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteLinks( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteLinks( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteTaggedPDF( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteTaggedPDF( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SetPageSizeByLayoutSize( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SetPageSizeByLayoutSize( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PaperWidth( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PaperWidth( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PaperHeight( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PaperHeight( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PictureFormat( 
            /* [retval][out] */ ExportPictureFormatEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PictureFormat( 
            /* [in] */ ExportPictureFormatEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][hidden][propget] */ HRESULT STDMETHODCALLTYPE get_SetPageSizeByOriginalImageSize( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][hidden][propput] */ HRESULT STDMETHODCALLTYPE put_SetPageSizeByOriginalImageSize( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WritePDFA1A( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WritePDFA1A( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PDFVersion( 
            /* [retval][out] */ PDFVersionEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PDFVersion( 
            /* [in] */ PDFVersionEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RunningTitleMode( 
            /* [retval][out] */ RunningTitleModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RunningTitleMode( 
            /* [in] */ RunningTitleModeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EnableMRC( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_EnableMRC( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MRCParams( 
            /* [retval][out] */ IPDFMRCParams **Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPDFAExportParamsOldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPDFAExportParamsOld * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPDFAExportParamsOld * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPDFAExportParamsOld * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPDFAExportParamsOld * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPDFAExportParamsOld * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPDFAExportParamsOld * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPDFAExportParamsOld * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPDFAExportParamsOld * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExportMode )( 
            IPDFAExportParamsOld * This,
            /* [retval][out] */ PDFExportModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ExportMode )( 
            IPDFAExportParamsOld * This,
            /* [in] */ PDFExportModeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictureResolution )( 
            IPDFAExportParamsOld * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PictureResolution )( 
            IPDFAExportParamsOld * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Quality )( 
            IPDFAExportParamsOld * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Quality )( 
            IPDFAExportParamsOld * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteAuthor )( 
            IPDFAExportParamsOld * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteAuthor )( 
            IPDFAExportParamsOld * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteCreator )( 
            IPDFAExportParamsOld * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteCreator )( 
            IPDFAExportParamsOld * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteProducer )( 
            IPDFAExportParamsOld * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteProducer )( 
            IPDFAExportParamsOld * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteTitle )( 
            IPDFAExportParamsOld * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteTitle )( 
            IPDFAExportParamsOld * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteSubject )( 
            IPDFAExportParamsOld * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteSubject )( 
            IPDFAExportParamsOld * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteKeywords )( 
            IPDFAExportParamsOld * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteKeywords )( 
            IPDFAExportParamsOld * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IPDFAExportParamsOld * This,
            /* [in] */ IPDFAExportParamsOld *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IPDFAExportParamsOld * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            IPDFAExportParamsOld * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IPDFAExportParamsOld * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            IPDFAExportParamsOld * This,
            /* [in] */ long HGlobal);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteLinks )( 
            IPDFAExportParamsOld * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteLinks )( 
            IPDFAExportParamsOld * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteTaggedPDF )( 
            IPDFAExportParamsOld * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteTaggedPDF )( 
            IPDFAExportParamsOld * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SetPageSizeByLayoutSize )( 
            IPDFAExportParamsOld * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SetPageSizeByLayoutSize )( 
            IPDFAExportParamsOld * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PaperWidth )( 
            IPDFAExportParamsOld * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PaperWidth )( 
            IPDFAExportParamsOld * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PaperHeight )( 
            IPDFAExportParamsOld * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PaperHeight )( 
            IPDFAExportParamsOld * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictureFormat )( 
            IPDFAExportParamsOld * This,
            /* [retval][out] */ ExportPictureFormatEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PictureFormat )( 
            IPDFAExportParamsOld * This,
            /* [in] */ ExportPictureFormatEnum Value);
        
        /* [helpstring][helpcontext][id][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SetPageSizeByOriginalImageSize )( 
            IPDFAExportParamsOld * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][hidden][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SetPageSizeByOriginalImageSize )( 
            IPDFAExportParamsOld * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WritePDFA1A )( 
            IPDFAExportParamsOld * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WritePDFA1A )( 
            IPDFAExportParamsOld * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PDFVersion )( 
            IPDFAExportParamsOld * This,
            /* [retval][out] */ PDFVersionEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PDFVersion )( 
            IPDFAExportParamsOld * This,
            /* [in] */ PDFVersionEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RunningTitleMode )( 
            IPDFAExportParamsOld * This,
            /* [retval][out] */ RunningTitleModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RunningTitleMode )( 
            IPDFAExportParamsOld * This,
            /* [in] */ RunningTitleModeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableMRC )( 
            IPDFAExportParamsOld * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableMRC )( 
            IPDFAExportParamsOld * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MRCParams )( 
            IPDFAExportParamsOld * This,
            /* [retval][out] */ IPDFMRCParams **Result);
        
        END_INTERFACE
    } IPDFAExportParamsOldVtbl;

    interface IPDFAExportParamsOld
    {
        CONST_VTBL struct IPDFAExportParamsOldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPDFAExportParamsOld_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPDFAExportParamsOld_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPDFAExportParamsOld_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPDFAExportParamsOld_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPDFAExportParamsOld_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPDFAExportParamsOld_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPDFAExportParamsOld_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPDFAExportParamsOld_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IPDFAExportParamsOld_get_ExportMode(This,Result)	\
    ( (This)->lpVtbl -> get_ExportMode(This,Result) ) 

#define IPDFAExportParamsOld_put_ExportMode(This,Value)	\
    ( (This)->lpVtbl -> put_ExportMode(This,Value) ) 

#define IPDFAExportParamsOld_get_PictureResolution(This,Result)	\
    ( (This)->lpVtbl -> get_PictureResolution(This,Result) ) 

#define IPDFAExportParamsOld_put_PictureResolution(This,Value)	\
    ( (This)->lpVtbl -> put_PictureResolution(This,Value) ) 

#define IPDFAExportParamsOld_get_Quality(This,Result)	\
    ( (This)->lpVtbl -> get_Quality(This,Result) ) 

#define IPDFAExportParamsOld_put_Quality(This,Value)	\
    ( (This)->lpVtbl -> put_Quality(This,Value) ) 

#define IPDFAExportParamsOld_get_WriteAuthor(This,Result)	\
    ( (This)->lpVtbl -> get_WriteAuthor(This,Result) ) 

#define IPDFAExportParamsOld_put_WriteAuthor(This,Value)	\
    ( (This)->lpVtbl -> put_WriteAuthor(This,Value) ) 

#define IPDFAExportParamsOld_get_WriteCreator(This,Result)	\
    ( (This)->lpVtbl -> get_WriteCreator(This,Result) ) 

#define IPDFAExportParamsOld_put_WriteCreator(This,Value)	\
    ( (This)->lpVtbl -> put_WriteCreator(This,Value) ) 

#define IPDFAExportParamsOld_get_WriteProducer(This,Result)	\
    ( (This)->lpVtbl -> get_WriteProducer(This,Result) ) 

#define IPDFAExportParamsOld_put_WriteProducer(This,Value)	\
    ( (This)->lpVtbl -> put_WriteProducer(This,Value) ) 

#define IPDFAExportParamsOld_get_WriteTitle(This,Result)	\
    ( (This)->lpVtbl -> get_WriteTitle(This,Result) ) 

#define IPDFAExportParamsOld_put_WriteTitle(This,Value)	\
    ( (This)->lpVtbl -> put_WriteTitle(This,Value) ) 

#define IPDFAExportParamsOld_get_WriteSubject(This,Result)	\
    ( (This)->lpVtbl -> get_WriteSubject(This,Result) ) 

#define IPDFAExportParamsOld_put_WriteSubject(This,Value)	\
    ( (This)->lpVtbl -> put_WriteSubject(This,Value) ) 

#define IPDFAExportParamsOld_get_WriteKeywords(This,Result)	\
    ( (This)->lpVtbl -> get_WriteKeywords(This,Result) ) 

#define IPDFAExportParamsOld_put_WriteKeywords(This,Value)	\
    ( (This)->lpVtbl -> put_WriteKeywords(This,Value) ) 

#define IPDFAExportParamsOld_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IPDFAExportParamsOld_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define IPDFAExportParamsOld_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define IPDFAExportParamsOld_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IPDFAExportParamsOld_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#define IPDFAExportParamsOld_get_WriteLinks(This,Result)	\
    ( (This)->lpVtbl -> get_WriteLinks(This,Result) ) 

#define IPDFAExportParamsOld_put_WriteLinks(This,Value)	\
    ( (This)->lpVtbl -> put_WriteLinks(This,Value) ) 

#define IPDFAExportParamsOld_get_WriteTaggedPDF(This,Result)	\
    ( (This)->lpVtbl -> get_WriteTaggedPDF(This,Result) ) 

#define IPDFAExportParamsOld_put_WriteTaggedPDF(This,Value)	\
    ( (This)->lpVtbl -> put_WriteTaggedPDF(This,Value) ) 

#define IPDFAExportParamsOld_get_SetPageSizeByLayoutSize(This,Result)	\
    ( (This)->lpVtbl -> get_SetPageSizeByLayoutSize(This,Result) ) 

#define IPDFAExportParamsOld_put_SetPageSizeByLayoutSize(This,Value)	\
    ( (This)->lpVtbl -> put_SetPageSizeByLayoutSize(This,Value) ) 

#define IPDFAExportParamsOld_get_PaperWidth(This,Result)	\
    ( (This)->lpVtbl -> get_PaperWidth(This,Result) ) 

#define IPDFAExportParamsOld_put_PaperWidth(This,Value)	\
    ( (This)->lpVtbl -> put_PaperWidth(This,Value) ) 

#define IPDFAExportParamsOld_get_PaperHeight(This,Result)	\
    ( (This)->lpVtbl -> get_PaperHeight(This,Result) ) 

#define IPDFAExportParamsOld_put_PaperHeight(This,Value)	\
    ( (This)->lpVtbl -> put_PaperHeight(This,Value) ) 

#define IPDFAExportParamsOld_get_PictureFormat(This,Result)	\
    ( (This)->lpVtbl -> get_PictureFormat(This,Result) ) 

#define IPDFAExportParamsOld_put_PictureFormat(This,Value)	\
    ( (This)->lpVtbl -> put_PictureFormat(This,Value) ) 

#define IPDFAExportParamsOld_get_SetPageSizeByOriginalImageSize(This,Result)	\
    ( (This)->lpVtbl -> get_SetPageSizeByOriginalImageSize(This,Result) ) 

#define IPDFAExportParamsOld_put_SetPageSizeByOriginalImageSize(This,Value)	\
    ( (This)->lpVtbl -> put_SetPageSizeByOriginalImageSize(This,Value) ) 

#define IPDFAExportParamsOld_get_WritePDFA1A(This,Result)	\
    ( (This)->lpVtbl -> get_WritePDFA1A(This,Result) ) 

#define IPDFAExportParamsOld_put_WritePDFA1A(This,Value)	\
    ( (This)->lpVtbl -> put_WritePDFA1A(This,Value) ) 

#define IPDFAExportParamsOld_get_PDFVersion(This,Result)	\
    ( (This)->lpVtbl -> get_PDFVersion(This,Result) ) 

#define IPDFAExportParamsOld_put_PDFVersion(This,Value)	\
    ( (This)->lpVtbl -> put_PDFVersion(This,Value) ) 

#define IPDFAExportParamsOld_get_RunningTitleMode(This,Result)	\
    ( (This)->lpVtbl -> get_RunningTitleMode(This,Result) ) 

#define IPDFAExportParamsOld_put_RunningTitleMode(This,Value)	\
    ( (This)->lpVtbl -> put_RunningTitleMode(This,Value) ) 

#define IPDFAExportParamsOld_get_EnableMRC(This,Result)	\
    ( (This)->lpVtbl -> get_EnableMRC(This,Result) ) 

#define IPDFAExportParamsOld_put_EnableMRC(This,Value)	\
    ( (This)->lpVtbl -> put_EnableMRC(This,Value) ) 

#define IPDFAExportParamsOld_get_MRCParams(This,Result)	\
    ( (This)->lpVtbl -> get_MRCParams(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPDFAExportParamsOld_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_PDFAExportParamsOld;

#ifdef __cplusplus

class DECLSPEC_UUID("10002065-0000-1056-976E-008048D53AE3")
PDFAExportParamsOld;
#endif

#ifndef __IDocumentContentInfoWritingParams_INTERFACE_DEFINED__
#define __IDocumentContentInfoWritingParams_INTERFACE_DEFINED__

/* interface IDocumentContentInfoWritingParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IDocumentContentInfoWritingParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010DE-0000-1056-976E-008048D53AE3")
    IDocumentContentInfoWritingParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteAuthor( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteAuthor( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteCreator( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteCreator( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteKeywords( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteKeywords( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteProducer( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteProducer( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteSubject( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteSubject( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteTitle( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteTitle( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDocumentContentInfoWritingParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDocumentContentInfoWritingParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDocumentContentInfoWritingParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDocumentContentInfoWritingParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDocumentContentInfoWritingParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDocumentContentInfoWritingParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDocumentContentInfoWritingParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDocumentContentInfoWritingParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IDocumentContentInfoWritingParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteAuthor )( 
            IDocumentContentInfoWritingParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteAuthor )( 
            IDocumentContentInfoWritingParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteCreator )( 
            IDocumentContentInfoWritingParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteCreator )( 
            IDocumentContentInfoWritingParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteKeywords )( 
            IDocumentContentInfoWritingParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteKeywords )( 
            IDocumentContentInfoWritingParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteProducer )( 
            IDocumentContentInfoWritingParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteProducer )( 
            IDocumentContentInfoWritingParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteSubject )( 
            IDocumentContentInfoWritingParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteSubject )( 
            IDocumentContentInfoWritingParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteTitle )( 
            IDocumentContentInfoWritingParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteTitle )( 
            IDocumentContentInfoWritingParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        END_INTERFACE
    } IDocumentContentInfoWritingParamsVtbl;

    interface IDocumentContentInfoWritingParams
    {
        CONST_VTBL struct IDocumentContentInfoWritingParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDocumentContentInfoWritingParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDocumentContentInfoWritingParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDocumentContentInfoWritingParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDocumentContentInfoWritingParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IDocumentContentInfoWritingParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IDocumentContentInfoWritingParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IDocumentContentInfoWritingParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IDocumentContentInfoWritingParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IDocumentContentInfoWritingParams_get_WriteAuthor(This,Result)	\
    ( (This)->lpVtbl -> get_WriteAuthor(This,Result) ) 

#define IDocumentContentInfoWritingParams_put_WriteAuthor(This,Value)	\
    ( (This)->lpVtbl -> put_WriteAuthor(This,Value) ) 

#define IDocumentContentInfoWritingParams_get_WriteCreator(This,Result)	\
    ( (This)->lpVtbl -> get_WriteCreator(This,Result) ) 

#define IDocumentContentInfoWritingParams_put_WriteCreator(This,Value)	\
    ( (This)->lpVtbl -> put_WriteCreator(This,Value) ) 

#define IDocumentContentInfoWritingParams_get_WriteKeywords(This,Result)	\
    ( (This)->lpVtbl -> get_WriteKeywords(This,Result) ) 

#define IDocumentContentInfoWritingParams_put_WriteKeywords(This,Value)	\
    ( (This)->lpVtbl -> put_WriteKeywords(This,Value) ) 

#define IDocumentContentInfoWritingParams_get_WriteProducer(This,Result)	\
    ( (This)->lpVtbl -> get_WriteProducer(This,Result) ) 

#define IDocumentContentInfoWritingParams_put_WriteProducer(This,Value)	\
    ( (This)->lpVtbl -> put_WriteProducer(This,Value) ) 

#define IDocumentContentInfoWritingParams_get_WriteSubject(This,Result)	\
    ( (This)->lpVtbl -> get_WriteSubject(This,Result) ) 

#define IDocumentContentInfoWritingParams_put_WriteSubject(This,Value)	\
    ( (This)->lpVtbl -> put_WriteSubject(This,Value) ) 

#define IDocumentContentInfoWritingParams_get_WriteTitle(This,Result)	\
    ( (This)->lpVtbl -> get_WriteTitle(This,Result) ) 

#define IDocumentContentInfoWritingParams_put_WriteTitle(This,Value)	\
    ( (This)->lpVtbl -> put_WriteTitle(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDocumentContentInfoWritingParams_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_DocumentContentInfoWritingParams;

#ifdef __cplusplus

class DECLSPEC_UUID("100020C6-0000-1056-976E-008048D53AE3")
DocumentContentInfoWritingParams;
#endif

#ifndef __IPDFPaperSizeParams_INTERFACE_DEFINED__
#define __IPDFPaperSizeParams_INTERFACE_DEFINED__

/* interface IPDFPaperSizeParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IPDFPaperSizeParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010DF-0000-1056-976E-008048D53AE3")
    IPDFPaperSizeParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PaperHeight( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PaperHeight( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PaperWidth( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PaperWidth( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SetPageSizeByLayoutSize( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SetPageSizeByLayoutSize( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPDFPaperSizeParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPDFPaperSizeParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPDFPaperSizeParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPDFPaperSizeParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPDFPaperSizeParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPDFPaperSizeParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPDFPaperSizeParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPDFPaperSizeParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPDFPaperSizeParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PaperHeight )( 
            IPDFPaperSizeParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PaperHeight )( 
            IPDFPaperSizeParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PaperWidth )( 
            IPDFPaperSizeParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PaperWidth )( 
            IPDFPaperSizeParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SetPageSizeByLayoutSize )( 
            IPDFPaperSizeParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SetPageSizeByLayoutSize )( 
            IPDFPaperSizeParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        END_INTERFACE
    } IPDFPaperSizeParamsVtbl;

    interface IPDFPaperSizeParams
    {
        CONST_VTBL struct IPDFPaperSizeParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPDFPaperSizeParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPDFPaperSizeParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPDFPaperSizeParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPDFPaperSizeParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPDFPaperSizeParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPDFPaperSizeParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPDFPaperSizeParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPDFPaperSizeParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IPDFPaperSizeParams_get_PaperHeight(This,Result)	\
    ( (This)->lpVtbl -> get_PaperHeight(This,Result) ) 

#define IPDFPaperSizeParams_put_PaperHeight(This,Value)	\
    ( (This)->lpVtbl -> put_PaperHeight(This,Value) ) 

#define IPDFPaperSizeParams_get_PaperWidth(This,Result)	\
    ( (This)->lpVtbl -> get_PaperWidth(This,Result) ) 

#define IPDFPaperSizeParams_put_PaperWidth(This,Value)	\
    ( (This)->lpVtbl -> put_PaperWidth(This,Value) ) 

#define IPDFPaperSizeParams_get_SetPageSizeByLayoutSize(This,Result)	\
    ( (This)->lpVtbl -> get_SetPageSizeByLayoutSize(This,Result) ) 

#define IPDFPaperSizeParams_put_SetPageSizeByLayoutSize(This,Value)	\
    ( (This)->lpVtbl -> put_SetPageSizeByLayoutSize(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPDFPaperSizeParams_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_PDFPaperSizeParams;

#ifdef __cplusplus

class DECLSPEC_UUID("100020C7-0000-1056-976E-008048D53AE3")
PDFPaperSizeParams;
#endif

#ifndef __IPDFExportFeatures_INTERFACE_DEFINED__
#define __IPDFExportFeatures_INTERFACE_DEFINED__

/* interface IPDFExportFeatures */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IPDFExportFeatures;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010E0-0000-1056-976E-008048D53AE3")
    IPDFExportFeatures : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EncryptionInfo( 
            /* [retval][out] */ IPDFEncryptionInfo **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EmbedFonts( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_EmbedFonts( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PDFVersion( 
            /* [retval][out] */ PDFVersionEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PDFVersion( 
            /* [in] */ PDFVersionEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReplaceUncertainWordsWithImage( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReplaceUncertainWordsWithImage( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RunningTitleMode( 
            /* [retval][out] */ RunningTitleModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RunningTitleMode( 
            /* [in] */ RunningTitleModeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteTaggedPDF( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteTaggedPDF( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PaperSize( 
            /* [retval][out] */ IPDFPaperSizeParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteLinks( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteLinks( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MetaDataWritingParams( 
            /* [retval][out] */ IDocumentContentInfoWritingParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteMetaDataToXmp( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteMetaDataToXmp( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPDFExportFeaturesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPDFExportFeatures * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPDFExportFeatures * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPDFExportFeatures * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPDFExportFeatures * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPDFExportFeatures * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPDFExportFeatures * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPDFExportFeatures * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPDFExportFeatures * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EncryptionInfo )( 
            IPDFExportFeatures * This,
            /* [retval][out] */ IPDFEncryptionInfo **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmbedFonts )( 
            IPDFExportFeatures * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EmbedFonts )( 
            IPDFExportFeatures * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PDFVersion )( 
            IPDFExportFeatures * This,
            /* [retval][out] */ PDFVersionEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PDFVersion )( 
            IPDFExportFeatures * This,
            /* [in] */ PDFVersionEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReplaceUncertainWordsWithImage )( 
            IPDFExportFeatures * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReplaceUncertainWordsWithImage )( 
            IPDFExportFeatures * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RunningTitleMode )( 
            IPDFExportFeatures * This,
            /* [retval][out] */ RunningTitleModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RunningTitleMode )( 
            IPDFExportFeatures * This,
            /* [in] */ RunningTitleModeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteTaggedPDF )( 
            IPDFExportFeatures * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteTaggedPDF )( 
            IPDFExportFeatures * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PaperSize )( 
            IPDFExportFeatures * This,
            /* [retval][out] */ IPDFPaperSizeParams **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteLinks )( 
            IPDFExportFeatures * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteLinks )( 
            IPDFExportFeatures * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MetaDataWritingParams )( 
            IPDFExportFeatures * This,
            /* [retval][out] */ IDocumentContentInfoWritingParams **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteMetaDataToXmp )( 
            IPDFExportFeatures * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteMetaDataToXmp )( 
            IPDFExportFeatures * This,
            /* [in] */ VARIANT_BOOL Value);
        
        END_INTERFACE
    } IPDFExportFeaturesVtbl;

    interface IPDFExportFeatures
    {
        CONST_VTBL struct IPDFExportFeaturesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPDFExportFeatures_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPDFExportFeatures_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPDFExportFeatures_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPDFExportFeatures_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPDFExportFeatures_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPDFExportFeatures_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPDFExportFeatures_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPDFExportFeatures_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IPDFExportFeatures_get_EncryptionInfo(This,Result)	\
    ( (This)->lpVtbl -> get_EncryptionInfo(This,Result) ) 

#define IPDFExportFeatures_get_EmbedFonts(This,Result)	\
    ( (This)->lpVtbl -> get_EmbedFonts(This,Result) ) 

#define IPDFExportFeatures_put_EmbedFonts(This,Value)	\
    ( (This)->lpVtbl -> put_EmbedFonts(This,Value) ) 

#define IPDFExportFeatures_get_PDFVersion(This,Result)	\
    ( (This)->lpVtbl -> get_PDFVersion(This,Result) ) 

#define IPDFExportFeatures_put_PDFVersion(This,Value)	\
    ( (This)->lpVtbl -> put_PDFVersion(This,Value) ) 

#define IPDFExportFeatures_get_ReplaceUncertainWordsWithImage(This,Result)	\
    ( (This)->lpVtbl -> get_ReplaceUncertainWordsWithImage(This,Result) ) 

#define IPDFExportFeatures_put_ReplaceUncertainWordsWithImage(This,Value)	\
    ( (This)->lpVtbl -> put_ReplaceUncertainWordsWithImage(This,Value) ) 

#define IPDFExportFeatures_get_RunningTitleMode(This,Result)	\
    ( (This)->lpVtbl -> get_RunningTitleMode(This,Result) ) 

#define IPDFExportFeatures_put_RunningTitleMode(This,Value)	\
    ( (This)->lpVtbl -> put_RunningTitleMode(This,Value) ) 

#define IPDFExportFeatures_get_WriteTaggedPDF(This,Result)	\
    ( (This)->lpVtbl -> get_WriteTaggedPDF(This,Result) ) 

#define IPDFExportFeatures_put_WriteTaggedPDF(This,Value)	\
    ( (This)->lpVtbl -> put_WriteTaggedPDF(This,Value) ) 

#define IPDFExportFeatures_get_PaperSize(This,Result)	\
    ( (This)->lpVtbl -> get_PaperSize(This,Result) ) 

#define IPDFExportFeatures_get_WriteLinks(This,Result)	\
    ( (This)->lpVtbl -> get_WriteLinks(This,Result) ) 

#define IPDFExportFeatures_put_WriteLinks(This,Value)	\
    ( (This)->lpVtbl -> put_WriteLinks(This,Value) ) 

#define IPDFExportFeatures_get_MetaDataWritingParams(This,Result)	\
    ( (This)->lpVtbl -> get_MetaDataWritingParams(This,Result) ) 

#define IPDFExportFeatures_get_WriteMetaDataToXmp(This,Result)	\
    ( (This)->lpVtbl -> get_WriteMetaDataToXmp(This,Result) ) 

#define IPDFExportFeatures_put_WriteMetaDataToXmp(This,Value)	\
    ( (This)->lpVtbl -> put_WriteMetaDataToXmp(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPDFExportFeatures_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_PDFExportFeatures;

#ifdef __cplusplus

class DECLSPEC_UUID("100020C8-0000-1056-976E-008048D53AE3")
PDFExportFeatures;
#endif

#ifndef __IPDFPictureCompressionParams_INTERFACE_DEFINED__
#define __IPDFPictureCompressionParams_INTERFACE_DEFINED__

/* interface IPDFPictureCompressionParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IPDFPictureCompressionParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010E1-0000-1056-976E-008048D53AE3")
    IPDFPictureCompressionParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MRCParams( 
            /* [retval][out] */ IPDFMRCParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_JpegQuality( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_JpegQuality( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ColorFormat( 
            /* [retval][out] */ ExportPictureFormatEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ColorFormat( 
            /* [in] */ ExportPictureFormatEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_GrayFormat( 
            /* [retval][out] */ ExportPictureFormatEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_GrayFormat( 
            /* [in] */ ExportPictureFormatEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BwFormat( 
            /* [retval][out] */ ExportPictureFormatEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BwFormat( 
            /* [in] */ ExportPictureFormatEnum Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPDFPictureCompressionParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPDFPictureCompressionParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPDFPictureCompressionParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPDFPictureCompressionParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPDFPictureCompressionParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPDFPictureCompressionParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPDFPictureCompressionParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPDFPictureCompressionParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPDFPictureCompressionParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MRCParams )( 
            IPDFPictureCompressionParams * This,
            /* [retval][out] */ IPDFMRCParams **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_JpegQuality )( 
            IPDFPictureCompressionParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_JpegQuality )( 
            IPDFPictureCompressionParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorFormat )( 
            IPDFPictureCompressionParams * This,
            /* [retval][out] */ ExportPictureFormatEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ColorFormat )( 
            IPDFPictureCompressionParams * This,
            /* [in] */ ExportPictureFormatEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GrayFormat )( 
            IPDFPictureCompressionParams * This,
            /* [retval][out] */ ExportPictureFormatEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_GrayFormat )( 
            IPDFPictureCompressionParams * This,
            /* [in] */ ExportPictureFormatEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BwFormat )( 
            IPDFPictureCompressionParams * This,
            /* [retval][out] */ ExportPictureFormatEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BwFormat )( 
            IPDFPictureCompressionParams * This,
            /* [in] */ ExportPictureFormatEnum Value);
        
        END_INTERFACE
    } IPDFPictureCompressionParamsVtbl;

    interface IPDFPictureCompressionParams
    {
        CONST_VTBL struct IPDFPictureCompressionParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPDFPictureCompressionParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPDFPictureCompressionParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPDFPictureCompressionParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPDFPictureCompressionParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPDFPictureCompressionParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPDFPictureCompressionParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPDFPictureCompressionParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPDFPictureCompressionParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IPDFPictureCompressionParams_get_MRCParams(This,Result)	\
    ( (This)->lpVtbl -> get_MRCParams(This,Result) ) 

#define IPDFPictureCompressionParams_get_JpegQuality(This,Result)	\
    ( (This)->lpVtbl -> get_JpegQuality(This,Result) ) 

#define IPDFPictureCompressionParams_put_JpegQuality(This,Value)	\
    ( (This)->lpVtbl -> put_JpegQuality(This,Value) ) 

#define IPDFPictureCompressionParams_get_ColorFormat(This,Result)	\
    ( (This)->lpVtbl -> get_ColorFormat(This,Result) ) 

#define IPDFPictureCompressionParams_put_ColorFormat(This,Value)	\
    ( (This)->lpVtbl -> put_ColorFormat(This,Value) ) 

#define IPDFPictureCompressionParams_get_GrayFormat(This,Result)	\
    ( (This)->lpVtbl -> get_GrayFormat(This,Result) ) 

#define IPDFPictureCompressionParams_put_GrayFormat(This,Value)	\
    ( (This)->lpVtbl -> put_GrayFormat(This,Value) ) 

#define IPDFPictureCompressionParams_get_BwFormat(This,Result)	\
    ( (This)->lpVtbl -> get_BwFormat(This,Result) ) 

#define IPDFPictureCompressionParams_put_BwFormat(This,Value)	\
    ( (This)->lpVtbl -> put_BwFormat(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPDFPictureCompressionParams_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_PDFPictureCompressionParams;

#ifdef __cplusplus

class DECLSPEC_UUID("100020C9-0000-1056-976E-008048D53AE3")
PDFPictureCompressionParams;
#endif

#ifndef __IPDFExportParams_INTERFACE_DEFINED__
#define __IPDFExportParams_INTERFACE_DEFINED__

/* interface IPDFExportParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IPDFExportParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010D9-0000-1056-976E-008048D53AE3")
    IPDFExportParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Scenario( 
            /* [retval][out] */ PDFExportScenarioEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Scenario( 
            /* [in] */ PDFExportScenarioEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Colority( 
            /* [retval][out] */ PDFColorityModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Colority( 
            /* [in] */ PDFColorityModeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Resolution( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Resolution( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ResolutionType( 
            /* [retval][out] */ PDFResolutionTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ResolutionType( 
            /* [in] */ PDFResolutionTypeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MRCMode( 
            /* [retval][out] */ PDFMRCModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_MRCMode( 
            /* [in] */ PDFMRCModeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TextExportMode( 
            /* [retval][out] */ PDFExportModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TextExportMode( 
            /* [in] */ PDFExportModeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PDFAComplianceMode( 
            /* [retval][out] */ PDFAComplianceModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PDFAComplianceMode( 
            /* [in] */ PDFAComplianceModeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IPDFExportParams *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PDFFeatures( 
            /* [retval][out] */ IPDFExportFeatures **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PictureCompressionParams( 
            /* [retval][out] */ IPDFPictureCompressionParams **Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPDFExportParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPDFExportParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPDFExportParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPDFExportParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPDFExportParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPDFExportParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPDFExportParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPDFExportParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPDFExportParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Scenario )( 
            IPDFExportParams * This,
            /* [retval][out] */ PDFExportScenarioEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Scenario )( 
            IPDFExportParams * This,
            /* [in] */ PDFExportScenarioEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Colority )( 
            IPDFExportParams * This,
            /* [retval][out] */ PDFColorityModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Colority )( 
            IPDFExportParams * This,
            /* [in] */ PDFColorityModeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Resolution )( 
            IPDFExportParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Resolution )( 
            IPDFExportParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ResolutionType )( 
            IPDFExportParams * This,
            /* [retval][out] */ PDFResolutionTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ResolutionType )( 
            IPDFExportParams * This,
            /* [in] */ PDFResolutionTypeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MRCMode )( 
            IPDFExportParams * This,
            /* [retval][out] */ PDFMRCModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MRCMode )( 
            IPDFExportParams * This,
            /* [in] */ PDFMRCModeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TextExportMode )( 
            IPDFExportParams * This,
            /* [retval][out] */ PDFExportModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TextExportMode )( 
            IPDFExportParams * This,
            /* [in] */ PDFExportModeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PDFAComplianceMode )( 
            IPDFExportParams * This,
            /* [retval][out] */ PDFAComplianceModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PDFAComplianceMode )( 
            IPDFExportParams * This,
            /* [in] */ PDFAComplianceModeEnum Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IPDFExportParams * This,
            /* [in] */ IPDFExportParams *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IPDFExportParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            IPDFExportParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IPDFExportParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            IPDFExportParams * This,
            /* [in] */ long HGlobal);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PDFFeatures )( 
            IPDFExportParams * This,
            /* [retval][out] */ IPDFExportFeatures **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictureCompressionParams )( 
            IPDFExportParams * This,
            /* [retval][out] */ IPDFPictureCompressionParams **Result);
        
        END_INTERFACE
    } IPDFExportParamsVtbl;

    interface IPDFExportParams
    {
        CONST_VTBL struct IPDFExportParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPDFExportParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPDFExportParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPDFExportParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPDFExportParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPDFExportParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPDFExportParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPDFExportParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPDFExportParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IPDFExportParams_get_Scenario(This,Result)	\
    ( (This)->lpVtbl -> get_Scenario(This,Result) ) 

#define IPDFExportParams_put_Scenario(This,Value)	\
    ( (This)->lpVtbl -> put_Scenario(This,Value) ) 

#define IPDFExportParams_get_Colority(This,Result)	\
    ( (This)->lpVtbl -> get_Colority(This,Result) ) 

#define IPDFExportParams_put_Colority(This,Value)	\
    ( (This)->lpVtbl -> put_Colority(This,Value) ) 

#define IPDFExportParams_get_Resolution(This,Result)	\
    ( (This)->lpVtbl -> get_Resolution(This,Result) ) 

#define IPDFExportParams_put_Resolution(This,Value)	\
    ( (This)->lpVtbl -> put_Resolution(This,Value) ) 

#define IPDFExportParams_get_ResolutionType(This,Result)	\
    ( (This)->lpVtbl -> get_ResolutionType(This,Result) ) 

#define IPDFExportParams_put_ResolutionType(This,Value)	\
    ( (This)->lpVtbl -> put_ResolutionType(This,Value) ) 

#define IPDFExportParams_get_MRCMode(This,Result)	\
    ( (This)->lpVtbl -> get_MRCMode(This,Result) ) 

#define IPDFExportParams_put_MRCMode(This,Value)	\
    ( (This)->lpVtbl -> put_MRCMode(This,Value) ) 

#define IPDFExportParams_get_TextExportMode(This,Result)	\
    ( (This)->lpVtbl -> get_TextExportMode(This,Result) ) 

#define IPDFExportParams_put_TextExportMode(This,Value)	\
    ( (This)->lpVtbl -> put_TextExportMode(This,Value) ) 

#define IPDFExportParams_get_PDFAComplianceMode(This,Result)	\
    ( (This)->lpVtbl -> get_PDFAComplianceMode(This,Result) ) 

#define IPDFExportParams_put_PDFAComplianceMode(This,Value)	\
    ( (This)->lpVtbl -> put_PDFAComplianceMode(This,Value) ) 

#define IPDFExportParams_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IPDFExportParams_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define IPDFExportParams_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define IPDFExportParams_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IPDFExportParams_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#define IPDFExportParams_get_PDFFeatures(This,Result)	\
    ( (This)->lpVtbl -> get_PDFFeatures(This,Result) ) 

#define IPDFExportParams_get_PictureCompressionParams(This,Result)	\
    ( (This)->lpVtbl -> get_PictureCompressionParams(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPDFExportParams_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_PDFExportParams;

#ifdef __cplusplus

class DECLSPEC_UUID("10002077-0000-1056-976E-008048D53AE3")
PDFExportParams;
#endif

#ifndef __IXMLExportParams_INTERFACE_DEFINED__
#define __IXMLExportParams_INTERFACE_DEFINED__

/* interface IXMLExportParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IXMLExportParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001050-0000-1056-976E-008048D53AE3")
    IXMLExportParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IXMLExportParams *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteCharAttributes( 
            /* [retval][out] */ XMLCharAttributesEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteCharAttributes( 
            /* [in] */ XMLCharAttributesEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteNondeskewedCoordinates( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteNondeskewedCoordinates( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteCharFormatting( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteCharFormatting( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteWordRecognitionVariants( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteWordRecognitionVariants( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteCharacterRecognitionVariants( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteCharacterRecognitionVariants( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IXMLExportParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IXMLExportParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IXMLExportParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IXMLExportParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IXMLExportParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IXMLExportParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IXMLExportParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IXMLExportParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IXMLExportParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IXMLExportParams * This,
            /* [in] */ IXMLExportParams *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IXMLExportParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            IXMLExportParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IXMLExportParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            IXMLExportParams * This,
            /* [in] */ long HGlobal);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteCharAttributes )( 
            IXMLExportParams * This,
            /* [retval][out] */ XMLCharAttributesEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteCharAttributes )( 
            IXMLExportParams * This,
            /* [in] */ XMLCharAttributesEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteNondeskewedCoordinates )( 
            IXMLExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteNondeskewedCoordinates )( 
            IXMLExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteCharFormatting )( 
            IXMLExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteCharFormatting )( 
            IXMLExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteWordRecognitionVariants )( 
            IXMLExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteWordRecognitionVariants )( 
            IXMLExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteCharacterRecognitionVariants )( 
            IXMLExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteCharacterRecognitionVariants )( 
            IXMLExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        END_INTERFACE
    } IXMLExportParamsVtbl;

    interface IXMLExportParams
    {
        CONST_VTBL struct IXMLExportParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IXMLExportParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IXMLExportParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IXMLExportParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IXMLExportParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IXMLExportParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IXMLExportParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IXMLExportParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IXMLExportParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IXMLExportParams_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IXMLExportParams_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define IXMLExportParams_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define IXMLExportParams_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IXMLExportParams_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#define IXMLExportParams_get_WriteCharAttributes(This,Result)	\
    ( (This)->lpVtbl -> get_WriteCharAttributes(This,Result) ) 

#define IXMLExportParams_put_WriteCharAttributes(This,Value)	\
    ( (This)->lpVtbl -> put_WriteCharAttributes(This,Value) ) 

#define IXMLExportParams_get_WriteNondeskewedCoordinates(This,Result)	\
    ( (This)->lpVtbl -> get_WriteNondeskewedCoordinates(This,Result) ) 

#define IXMLExportParams_put_WriteNondeskewedCoordinates(This,Value)	\
    ( (This)->lpVtbl -> put_WriteNondeskewedCoordinates(This,Value) ) 

#define IXMLExportParams_get_WriteCharFormatting(This,Result)	\
    ( (This)->lpVtbl -> get_WriteCharFormatting(This,Result) ) 

#define IXMLExportParams_put_WriteCharFormatting(This,Value)	\
    ( (This)->lpVtbl -> put_WriteCharFormatting(This,Value) ) 

#define IXMLExportParams_get_WriteWordRecognitionVariants(This,Result)	\
    ( (This)->lpVtbl -> get_WriteWordRecognitionVariants(This,Result) ) 

#define IXMLExportParams_put_WriteWordRecognitionVariants(This,Value)	\
    ( (This)->lpVtbl -> put_WriteWordRecognitionVariants(This,Value) ) 

#define IXMLExportParams_get_WriteCharacterRecognitionVariants(This,Result)	\
    ( (This)->lpVtbl -> get_WriteCharacterRecognitionVariants(This,Result) ) 

#define IXMLExportParams_put_WriteCharacterRecognitionVariants(This,Value)	\
    ( (This)->lpVtbl -> put_WriteCharacterRecognitionVariants(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IXMLExportParams_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_XMLExportParams;

#ifdef __cplusplus

class DECLSPEC_UUID("10002044-0000-1056-976E-008048D53AE3")
XMLExportParams;
#endif

#ifndef __IPPTExportParams_INTERFACE_DEFINED__
#define __IPPTExportParams_INTERFACE_DEFINED__

/* interface IPPTExportParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IPPTExportParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001051-0000-1056-976E-008048D53AE3")
    IPPTExportParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IPPTExportParams *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_KeepLines( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_KeepLines( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WritePictures( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WritePictures( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WrapTextInBlock( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WrapTextInBlock( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PictureResolution( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PictureResolution( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PictureJpegQuality( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PictureJpegQuality( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PictureFormat( 
            /* [retval][out] */ ExportPictureFormatEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PictureFormat( 
            /* [in] */ ExportPictureFormatEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteTitle( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteTitle( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteAuthor( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteAuthor( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteSubject( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteSubject( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WriteKeywords( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WriteKeywords( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RunningTitleMode( 
            /* [retval][out] */ RunningTitleModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RunningTitleMode( 
            /* [in] */ RunningTitleModeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_KeepTextColor( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_KeepTextColor( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BackgroundColorMode( 
            /* [retval][out] */ BackgroundColorModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BackgroundColorMode( 
            /* [in] */ BackgroundColorModeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PaperWidth( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PaperWidth( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PaperHeight( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PaperHeight( 
            /* [in] */ long Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPPTExportParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPPTExportParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPPTExportParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPPTExportParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPPTExportParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPPTExportParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPPTExportParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPPTExportParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPPTExportParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IPPTExportParams * This,
            /* [in] */ IPPTExportParams *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IPPTExportParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            IPPTExportParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IPPTExportParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            IPPTExportParams * This,
            /* [in] */ long HGlobal);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_KeepLines )( 
            IPPTExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_KeepLines )( 
            IPPTExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WritePictures )( 
            IPPTExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WritePictures )( 
            IPPTExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WrapTextInBlock )( 
            IPPTExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WrapTextInBlock )( 
            IPPTExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictureResolution )( 
            IPPTExportParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PictureResolution )( 
            IPPTExportParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictureJpegQuality )( 
            IPPTExportParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PictureJpegQuality )( 
            IPPTExportParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictureFormat )( 
            IPPTExportParams * This,
            /* [retval][out] */ ExportPictureFormatEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PictureFormat )( 
            IPPTExportParams * This,
            /* [in] */ ExportPictureFormatEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteTitle )( 
            IPPTExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteTitle )( 
            IPPTExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteAuthor )( 
            IPPTExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteAuthor )( 
            IPPTExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteSubject )( 
            IPPTExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteSubject )( 
            IPPTExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteKeywords )( 
            IPPTExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteKeywords )( 
            IPPTExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RunningTitleMode )( 
            IPPTExportParams * This,
            /* [retval][out] */ RunningTitleModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RunningTitleMode )( 
            IPPTExportParams * This,
            /* [in] */ RunningTitleModeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_KeepTextColor )( 
            IPPTExportParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_KeepTextColor )( 
            IPPTExportParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundColorMode )( 
            IPPTExportParams * This,
            /* [retval][out] */ BackgroundColorModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundColorMode )( 
            IPPTExportParams * This,
            /* [in] */ BackgroundColorModeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PaperWidth )( 
            IPPTExportParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PaperWidth )( 
            IPPTExportParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PaperHeight )( 
            IPPTExportParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PaperHeight )( 
            IPPTExportParams * This,
            /* [in] */ long Value);
        
        END_INTERFACE
    } IPPTExportParamsVtbl;

    interface IPPTExportParams
    {
        CONST_VTBL struct IPPTExportParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPPTExportParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPPTExportParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPPTExportParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPPTExportParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPPTExportParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPPTExportParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPPTExportParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPPTExportParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IPPTExportParams_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IPPTExportParams_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define IPPTExportParams_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define IPPTExportParams_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IPPTExportParams_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#define IPPTExportParams_get_KeepLines(This,Result)	\
    ( (This)->lpVtbl -> get_KeepLines(This,Result) ) 

#define IPPTExportParams_put_KeepLines(This,Value)	\
    ( (This)->lpVtbl -> put_KeepLines(This,Value) ) 

#define IPPTExportParams_get_WritePictures(This,Result)	\
    ( (This)->lpVtbl -> get_WritePictures(This,Result) ) 

#define IPPTExportParams_put_WritePictures(This,Value)	\
    ( (This)->lpVtbl -> put_WritePictures(This,Value) ) 

#define IPPTExportParams_get_WrapTextInBlock(This,Result)	\
    ( (This)->lpVtbl -> get_WrapTextInBlock(This,Result) ) 

#define IPPTExportParams_put_WrapTextInBlock(This,Value)	\
    ( (This)->lpVtbl -> put_WrapTextInBlock(This,Value) ) 

#define IPPTExportParams_get_PictureResolution(This,Result)	\
    ( (This)->lpVtbl -> get_PictureResolution(This,Result) ) 

#define IPPTExportParams_put_PictureResolution(This,Value)	\
    ( (This)->lpVtbl -> put_PictureResolution(This,Value) ) 

#define IPPTExportParams_get_PictureJpegQuality(This,Result)	\
    ( (This)->lpVtbl -> get_PictureJpegQuality(This,Result) ) 

#define IPPTExportParams_put_PictureJpegQuality(This,Value)	\
    ( (This)->lpVtbl -> put_PictureJpegQuality(This,Value) ) 

#define IPPTExportParams_get_PictureFormat(This,Result)	\
    ( (This)->lpVtbl -> get_PictureFormat(This,Result) ) 

#define IPPTExportParams_put_PictureFormat(This,Value)	\
    ( (This)->lpVtbl -> put_PictureFormat(This,Value) ) 

#define IPPTExportParams_get_WriteTitle(This,Result)	\
    ( (This)->lpVtbl -> get_WriteTitle(This,Result) ) 

#define IPPTExportParams_put_WriteTitle(This,Value)	\
    ( (This)->lpVtbl -> put_WriteTitle(This,Value) ) 

#define IPPTExportParams_get_WriteAuthor(This,Result)	\
    ( (This)->lpVtbl -> get_WriteAuthor(This,Result) ) 

#define IPPTExportParams_put_WriteAuthor(This,Value)	\
    ( (This)->lpVtbl -> put_WriteAuthor(This,Value) ) 

#define IPPTExportParams_get_WriteSubject(This,Result)	\
    ( (This)->lpVtbl -> get_WriteSubject(This,Result) ) 

#define IPPTExportParams_put_WriteSubject(This,Value)	\
    ( (This)->lpVtbl -> put_WriteSubject(This,Value) ) 

#define IPPTExportParams_get_WriteKeywords(This,Result)	\
    ( (This)->lpVtbl -> get_WriteKeywords(This,Result) ) 

#define IPPTExportParams_put_WriteKeywords(This,Value)	\
    ( (This)->lpVtbl -> put_WriteKeywords(This,Value) ) 

#define IPPTExportParams_get_RunningTitleMode(This,Result)	\
    ( (This)->lpVtbl -> get_RunningTitleMode(This,Result) ) 

#define IPPTExportParams_put_RunningTitleMode(This,Value)	\
    ( (This)->lpVtbl -> put_RunningTitleMode(This,Value) ) 

#define IPPTExportParams_get_KeepTextColor(This,Result)	\
    ( (This)->lpVtbl -> get_KeepTextColor(This,Result) ) 

#define IPPTExportParams_put_KeepTextColor(This,Value)	\
    ( (This)->lpVtbl -> put_KeepTextColor(This,Value) ) 

#define IPPTExportParams_get_BackgroundColorMode(This,Result)	\
    ( (This)->lpVtbl -> get_BackgroundColorMode(This,Result) ) 

#define IPPTExportParams_put_BackgroundColorMode(This,Value)	\
    ( (This)->lpVtbl -> put_BackgroundColorMode(This,Value) ) 

#define IPPTExportParams_get_PaperWidth(This,Result)	\
    ( (This)->lpVtbl -> get_PaperWidth(This,Result) ) 

#define IPPTExportParams_put_PaperWidth(This,Value)	\
    ( (This)->lpVtbl -> put_PaperWidth(This,Value) ) 

#define IPPTExportParams_get_PaperHeight(This,Result)	\
    ( (This)->lpVtbl -> get_PaperHeight(This,Result) ) 

#define IPPTExportParams_put_PaperHeight(This,Value)	\
    ( (This)->lpVtbl -> put_PaperHeight(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPPTExportParams_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_PPTExportParams;

#ifdef __cplusplus

class DECLSPEC_UUID("10002045-0000-1056-976E-008048D53AE3")
PPTExportParams;
#endif

#ifndef __IAltoExportParams_INTERFACE_DEFINED__
#define __IAltoExportParams_INTERFACE_DEFINED__

/* interface IAltoExportParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IAltoExportParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010E4-0000-1056-976E-008048D53AE3")
    IAltoExportParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IAltoExportParams *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FontAttributesMode( 
            /* [retval][out] */ FontAttributesModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FontAttributesMode( 
            /* [in] */ FontAttributesModeEnum Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAltoExportParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IAltoExportParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IAltoExportParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IAltoExportParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IAltoExportParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IAltoExportParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IAltoExportParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IAltoExportParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IAltoExportParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IAltoExportParams * This,
            /* [in] */ IAltoExportParams *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IAltoExportParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            IAltoExportParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IAltoExportParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            IAltoExportParams * This,
            /* [in] */ long HGlobal);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FontAttributesMode )( 
            IAltoExportParams * This,
            /* [retval][out] */ FontAttributesModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FontAttributesMode )( 
            IAltoExportParams * This,
            /* [in] */ FontAttributesModeEnum Value);
        
        END_INTERFACE
    } IAltoExportParamsVtbl;

    interface IAltoExportParams
    {
        CONST_VTBL struct IAltoExportParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAltoExportParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAltoExportParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAltoExportParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAltoExportParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IAltoExportParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IAltoExportParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IAltoExportParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IAltoExportParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IAltoExportParams_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IAltoExportParams_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define IAltoExportParams_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define IAltoExportParams_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IAltoExportParams_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#define IAltoExportParams_get_FontAttributesMode(This,Result)	\
    ( (This)->lpVtbl -> get_FontAttributesMode(This,Result) ) 

#define IAltoExportParams_put_FontAttributesMode(This,Value)	\
    ( (This)->lpVtbl -> put_FontAttributesMode(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAltoExportParams_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_AltoExportParams;

#ifdef __cplusplus

class DECLSPEC_UUID("100020CA-0000-1056-976E-008048D53AE3")
AltoExportParams;
#endif

#ifndef __IImageDocument_INTERFACE_DEFINED__
#define __IImageDocument_INTERFACE_DEFINED__

/* interface IImageDocument */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IImageDocument;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001023-0000-1056-976E-008048D53AE3")
    IImageDocument : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsInMemory( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsModified( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ImageColorType( 
            /* [retval][out] */ ImageColorTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ImageWasInverted( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ImageRotation( 
            /* [retval][out] */ RotationTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ImageWasMirrored( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsSkewCorrected( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SkewAngle( 
            /* [retval][out] */ double *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Id( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BlackWhiteImage( 
            /* [retval][out] */ IImage **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ColorImage( 
            /* [retval][out] */ IImage **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PreviewImage( 
            /* [retval][out] */ IImage **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ChangeResolution( 
            /* [in] */ long NewResolution) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Transform( 
            /* [in] */ RotationTypeEnum Rotation,
            /* [in] */ VARIANT_BOOL Mirror,
            /* [in] */ VARIANT_BOOL Invert) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Modify( 
            /* [in] */ IImageModification *Modification) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveModified( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveImageRegionTo( 
            /* [in] */ BSTR FolderName,
            /* [in] */ IRegion *Rects,
            /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertCoordinates( 
            /* [in] */ ImageTypeEnum FromPage,
            /* [in] */ ImageTypeEnum ToPage,
            /* [out] */ long *X,
            /* [out] */ long *Y) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetTextBackgroundColor( 
            /* [in] */ long Left,
            /* [in] */ long Top,
            /* [in] */ long Right,
            /* [in] */ long Bottom,
            /* [in] */ long Flags,
            /* [out] */ long *TextColor,
            /* [out] */ long *BackgroundColor) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SourceImageXResolution( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SourceImageYResolution( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SourceImageFileFormat( 
            /* [retval][out] */ ImageFileFormatEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SourceImageScannerInfo( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SourceImageScanThreshold( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveTo( 
            /* [in] */ BSTR FolderName) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CorrectSkew( 
            /* [in] */ long CorrectSkewFlags) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR FileName) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveColorObjects( 
            /* [in] */ IRegion *Region,
            /* [in] */ ObjectsColorEnum Color,
            /* [in] */ ObjectsTypeEnum Mode) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SubtractColor( 
            /* [in] */ byte ReferenceHue,
            /* [in] */ long SaturationBoundary) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveCameraBlur( 
            /* [defaultvalue][in] */ IRegion *Region = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveCameraNoise( 
            /* [defaultvalue][in] */ IRegion *Region = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveGarbage( 
            /* [defaultvalue][in] */ IRegion *Region = 0,
            /* [defaultvalue][in] */ long GarbageSize = -1) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SmoothImage( 
            /* [defaultvalue][in] */ IRegion *Region = 0,
            /* [defaultvalue][in] */ long AreaSize = 3) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IImageDocumentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IImageDocument * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IImageDocument * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IImageDocument * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IImageDocument * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IImageDocument * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IImageDocument * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IImageDocument * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IImageDocument * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsInMemory )( 
            IImageDocument * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsModified )( 
            IImageDocument * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ImageColorType )( 
            IImageDocument * This,
            /* [retval][out] */ ImageColorTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ImageWasInverted )( 
            IImageDocument * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ImageRotation )( 
            IImageDocument * This,
            /* [retval][out] */ RotationTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ImageWasMirrored )( 
            IImageDocument * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsSkewCorrected )( 
            IImageDocument * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SkewAngle )( 
            IImageDocument * This,
            /* [retval][out] */ double *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IImageDocument * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            IImageDocument * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlackWhiteImage )( 
            IImageDocument * This,
            /* [retval][out] */ IImage **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorImage )( 
            IImageDocument * This,
            /* [retval][out] */ IImage **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PreviewImage )( 
            IImageDocument * This,
            /* [retval][out] */ IImage **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ChangeResolution )( 
            IImageDocument * This,
            /* [in] */ long NewResolution);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IImageDocument * This,
            /* [in] */ RotationTypeEnum Rotation,
            /* [in] */ VARIANT_BOOL Mirror,
            /* [in] */ VARIANT_BOOL Invert);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Modify )( 
            IImageDocument * This,
            /* [in] */ IImageModification *Modification);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveModified )( 
            IImageDocument * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveImageRegionTo )( 
            IImageDocument * This,
            /* [in] */ BSTR FolderName,
            /* [in] */ IRegion *Rects,
            /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertCoordinates )( 
            IImageDocument * This,
            /* [in] */ ImageTypeEnum FromPage,
            /* [in] */ ImageTypeEnum ToPage,
            /* [out] */ long *X,
            /* [out] */ long *Y);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetTextBackgroundColor )( 
            IImageDocument * This,
            /* [in] */ long Left,
            /* [in] */ long Top,
            /* [in] */ long Right,
            /* [in] */ long Bottom,
            /* [in] */ long Flags,
            /* [out] */ long *TextColor,
            /* [out] */ long *BackgroundColor);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceImageXResolution )( 
            IImageDocument * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceImageYResolution )( 
            IImageDocument * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceImageFileFormat )( 
            IImageDocument * This,
            /* [retval][out] */ ImageFileFormatEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceImageScannerInfo )( 
            IImageDocument * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceImageScanThreshold )( 
            IImageDocument * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveTo )( 
            IImageDocument * This,
            /* [in] */ BSTR FolderName);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CorrectSkew )( 
            IImageDocument * This,
            /* [in] */ long CorrectSkewFlags);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IImageDocument * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IImageDocument * This,
            /* [in] */ BSTR FileName);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveColorObjects )( 
            IImageDocument * This,
            /* [in] */ IRegion *Region,
            /* [in] */ ObjectsColorEnum Color,
            /* [in] */ ObjectsTypeEnum Mode);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SubtractColor )( 
            IImageDocument * This,
            /* [in] */ byte ReferenceHue,
            /* [in] */ long SaturationBoundary);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveCameraBlur )( 
            IImageDocument * This,
            /* [defaultvalue][in] */ IRegion *Region);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveCameraNoise )( 
            IImageDocument * This,
            /* [defaultvalue][in] */ IRegion *Region);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveGarbage )( 
            IImageDocument * This,
            /* [defaultvalue][in] */ IRegion *Region,
            /* [defaultvalue][in] */ long GarbageSize);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SmoothImage )( 
            IImageDocument * This,
            /* [defaultvalue][in] */ IRegion *Region,
            /* [defaultvalue][in] */ long AreaSize);
        
        END_INTERFACE
    } IImageDocumentVtbl;

    interface IImageDocument
    {
        CONST_VTBL struct IImageDocumentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IImageDocument_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IImageDocument_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IImageDocument_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IImageDocument_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IImageDocument_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IImageDocument_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IImageDocument_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IImageDocument_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IImageDocument_get_IsInMemory(This,Result)	\
    ( (This)->lpVtbl -> get_IsInMemory(This,Result) ) 

#define IImageDocument_get_IsModified(This,Result)	\
    ( (This)->lpVtbl -> get_IsModified(This,Result) ) 

#define IImageDocument_get_ImageColorType(This,Result)	\
    ( (This)->lpVtbl -> get_ImageColorType(This,Result) ) 

#define IImageDocument_get_ImageWasInverted(This,Result)	\
    ( (This)->lpVtbl -> get_ImageWasInverted(This,Result) ) 

#define IImageDocument_get_ImageRotation(This,Result)	\
    ( (This)->lpVtbl -> get_ImageRotation(This,Result) ) 

#define IImageDocument_get_ImageWasMirrored(This,Result)	\
    ( (This)->lpVtbl -> get_ImageWasMirrored(This,Result) ) 

#define IImageDocument_get_IsSkewCorrected(This,Result)	\
    ( (This)->lpVtbl -> get_IsSkewCorrected(This,Result) ) 

#define IImageDocument_get_SkewAngle(This,Result)	\
    ( (This)->lpVtbl -> get_SkewAngle(This,Result) ) 

#define IImageDocument_get_Path(This,Result)	\
    ( (This)->lpVtbl -> get_Path(This,Result) ) 

#define IImageDocument_get_Id(This,Result)	\
    ( (This)->lpVtbl -> get_Id(This,Result) ) 

#define IImageDocument_get_BlackWhiteImage(This,Result)	\
    ( (This)->lpVtbl -> get_BlackWhiteImage(This,Result) ) 

#define IImageDocument_get_ColorImage(This,Result)	\
    ( (This)->lpVtbl -> get_ColorImage(This,Result) ) 

#define IImageDocument_get_PreviewImage(This,Result)	\
    ( (This)->lpVtbl -> get_PreviewImage(This,Result) ) 

#define IImageDocument_ChangeResolution(This,NewResolution)	\
    ( (This)->lpVtbl -> ChangeResolution(This,NewResolution) ) 

#define IImageDocument_Transform(This,Rotation,Mirror,Invert)	\
    ( (This)->lpVtbl -> Transform(This,Rotation,Mirror,Invert) ) 

#define IImageDocument_Modify(This,Modification)	\
    ( (This)->lpVtbl -> Modify(This,Modification) ) 

#define IImageDocument_SaveModified(This)	\
    ( (This)->lpVtbl -> SaveModified(This) ) 

#define IImageDocument_SaveImageRegionTo(This,FolderName,Rects,PrepareMode)	\
    ( (This)->lpVtbl -> SaveImageRegionTo(This,FolderName,Rects,PrepareMode) ) 

#define IImageDocument_ConvertCoordinates(This,FromPage,ToPage,X,Y)	\
    ( (This)->lpVtbl -> ConvertCoordinates(This,FromPage,ToPage,X,Y) ) 

#define IImageDocument_GetTextBackgroundColor(This,Left,Top,Right,Bottom,Flags,TextColor,BackgroundColor)	\
    ( (This)->lpVtbl -> GetTextBackgroundColor(This,Left,Top,Right,Bottom,Flags,TextColor,BackgroundColor) ) 

#define IImageDocument_get_SourceImageXResolution(This,Result)	\
    ( (This)->lpVtbl -> get_SourceImageXResolution(This,Result) ) 

#define IImageDocument_get_SourceImageYResolution(This,Result)	\
    ( (This)->lpVtbl -> get_SourceImageYResolution(This,Result) ) 

#define IImageDocument_get_SourceImageFileFormat(This,Result)	\
    ( (This)->lpVtbl -> get_SourceImageFileFormat(This,Result) ) 

#define IImageDocument_get_SourceImageScannerInfo(This,Result)	\
    ( (This)->lpVtbl -> get_SourceImageScannerInfo(This,Result) ) 

#define IImageDocument_get_SourceImageScanThreshold(This,Result)	\
    ( (This)->lpVtbl -> get_SourceImageScanThreshold(This,Result) ) 

#define IImageDocument_SaveTo(This,FolderName)	\
    ( (This)->lpVtbl -> SaveTo(This,FolderName) ) 

#define IImageDocument_CorrectSkew(This,CorrectSkewFlags)	\
    ( (This)->lpVtbl -> CorrectSkew(This,CorrectSkewFlags) ) 

#define IImageDocument_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IImageDocument_SaveToFile(This,FileName)	\
    ( (This)->lpVtbl -> SaveToFile(This,FileName) ) 

#define IImageDocument_RemoveColorObjects(This,Region,Color,Mode)	\
    ( (This)->lpVtbl -> RemoveColorObjects(This,Region,Color,Mode) ) 

#define IImageDocument_SubtractColor(This,ReferenceHue,SaturationBoundary)	\
    ( (This)->lpVtbl -> SubtractColor(This,ReferenceHue,SaturationBoundary) ) 

#define IImageDocument_RemoveCameraBlur(This,Region)	\
    ( (This)->lpVtbl -> RemoveCameraBlur(This,Region) ) 

#define IImageDocument_RemoveCameraNoise(This,Region)	\
    ( (This)->lpVtbl -> RemoveCameraNoise(This,Region) ) 

#define IImageDocument_RemoveGarbage(This,Region,GarbageSize)	\
    ( (This)->lpVtbl -> RemoveGarbage(This,Region,GarbageSize) ) 

#define IImageDocument_SmoothImage(This,Region,AreaSize)	\
    ( (This)->lpVtbl -> SmoothImage(This,Region,AreaSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IImageDocument_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_Region;

#ifdef __cplusplus

class DECLSPEC_UUID("10002023-0000-1056-976E-008048D53AE3")
Region;
#endif


#ifndef __DetectColorRegionFlags_MODULE_DEFINED__
#define __DetectColorRegionFlags_MODULE_DEFINED__


/* module DetectColorRegionFlags */
/* [helpstring][helpcontext] */ 

/* [helpstring][helpcontext] */ const long DCR_Invert	=	0x1;

#endif /* __DetectColorRegionFlags_MODULE_DEFINED__ */


#ifndef __RemoveGarbageRegionFlags_MODULE_DEFINED__
#define __RemoveGarbageRegionFlags_MODULE_DEFINED__


/* module RemoveGarbageRegionFlags */
/* [helpstring][helpcontext] */ 

/* [helpstring][helpcontext] */ const long RGR_Invert	=	0x1;

#endif /* __RemoveGarbageRegionFlags_MODULE_DEFINED__ */

#ifndef __IImageModification_INTERFACE_DEFINED__
#define __IImageModification_INTERFACE_DEFINED__

/* interface IImageModification */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IImageModification;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001025-0000-1056-976E-008048D53AE3")
    IImageModification : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_StretchRatio( 
            /* [retval][out] */ double *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_StretchRatio( 
            /* [in] */ double Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearClipRegions( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddClipRegion( 
            /* [in] */ IRegion *Region) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearInvertRegions( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddInvertRegion( 
            /* [in] */ IRegion *Region) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearPaintRegions( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddPaintRegion( 
            /* [in] */ IRegion *Region,
            /* [in] */ long Color) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearReplaceBlackPixelsRegions( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddReplaceBlackPixelsRegion( 
            /* [in] */ IRegion *Region,
            /* [in] */ long Color,
            /* [defaultvalue][in] */ long StrokesExpansion = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearReplaceWhitePixelsRegions( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddReplaceWhitePixelsRegion( 
            /* [in] */ IRegion *Region,
            /* [in] */ long Color,
            /* [defaultvalue][in] */ long StrokesExpansion = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearRemoveGarbageRegions( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddRemoveGarbageRegion( 
            /* [in] */ IRegion *Region,
            /* [in] */ long Attributes,
            /* [defaultvalue][in] */ long GarbageSize = -1) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IImageModification *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IImageModificationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IImageModification * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IImageModification * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IImageModification * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IImageModification * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IImageModification * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IImageModification * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IImageModification * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IImageModification * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StretchRatio )( 
            IImageModification * This,
            /* [retval][out] */ double *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_StretchRatio )( 
            IImageModification * This,
            /* [in] */ double Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearClipRegions )( 
            IImageModification * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddClipRegion )( 
            IImageModification * This,
            /* [in] */ IRegion *Region);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearInvertRegions )( 
            IImageModification * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddInvertRegion )( 
            IImageModification * This,
            /* [in] */ IRegion *Region);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearPaintRegions )( 
            IImageModification * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddPaintRegion )( 
            IImageModification * This,
            /* [in] */ IRegion *Region,
            /* [in] */ long Color);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearReplaceBlackPixelsRegions )( 
            IImageModification * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddReplaceBlackPixelsRegion )( 
            IImageModification * This,
            /* [in] */ IRegion *Region,
            /* [in] */ long Color,
            /* [defaultvalue][in] */ long StrokesExpansion);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearReplaceWhitePixelsRegions )( 
            IImageModification * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddReplaceWhitePixelsRegion )( 
            IImageModification * This,
            /* [in] */ IRegion *Region,
            /* [in] */ long Color,
            /* [defaultvalue][in] */ long StrokesExpansion);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearRemoveGarbageRegions )( 
            IImageModification * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddRemoveGarbageRegion )( 
            IImageModification * This,
            /* [in] */ IRegion *Region,
            /* [in] */ long Attributes,
            /* [defaultvalue][in] */ long GarbageSize);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IImageModification * This,
            /* [in] */ IImageModification *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IImageModification * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            IImageModification * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IImageModification * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            IImageModification * This,
            /* [in] */ long HGlobal);
        
        END_INTERFACE
    } IImageModificationVtbl;

    interface IImageModification
    {
        CONST_VTBL struct IImageModificationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IImageModification_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IImageModification_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IImageModification_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IImageModification_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IImageModification_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IImageModification_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IImageModification_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IImageModification_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IImageModification_get_StretchRatio(This,Result)	\
    ( (This)->lpVtbl -> get_StretchRatio(This,Result) ) 

#define IImageModification_put_StretchRatio(This,Value)	\
    ( (This)->lpVtbl -> put_StretchRatio(This,Value) ) 

#define IImageModification_ClearClipRegions(This)	\
    ( (This)->lpVtbl -> ClearClipRegions(This) ) 

#define IImageModification_AddClipRegion(This,Region)	\
    ( (This)->lpVtbl -> AddClipRegion(This,Region) ) 

#define IImageModification_ClearInvertRegions(This)	\
    ( (This)->lpVtbl -> ClearInvertRegions(This) ) 

#define IImageModification_AddInvertRegion(This,Region)	\
    ( (This)->lpVtbl -> AddInvertRegion(This,Region) ) 

#define IImageModification_ClearPaintRegions(This)	\
    ( (This)->lpVtbl -> ClearPaintRegions(This) ) 

#define IImageModification_AddPaintRegion(This,Region,Color)	\
    ( (This)->lpVtbl -> AddPaintRegion(This,Region,Color) ) 

#define IImageModification_ClearReplaceBlackPixelsRegions(This)	\
    ( (This)->lpVtbl -> ClearReplaceBlackPixelsRegions(This) ) 

#define IImageModification_AddReplaceBlackPixelsRegion(This,Region,Color,StrokesExpansion)	\
    ( (This)->lpVtbl -> AddReplaceBlackPixelsRegion(This,Region,Color,StrokesExpansion) ) 

#define IImageModification_ClearReplaceWhitePixelsRegions(This)	\
    ( (This)->lpVtbl -> ClearReplaceWhitePixelsRegions(This) ) 

#define IImageModification_AddReplaceWhitePixelsRegion(This,Region,Color,StrokesExpansion)	\
    ( (This)->lpVtbl -> AddReplaceWhitePixelsRegion(This,Region,Color,StrokesExpansion) ) 

#define IImageModification_ClearRemoveGarbageRegions(This)	\
    ( (This)->lpVtbl -> ClearRemoveGarbageRegions(This) ) 

#define IImageModification_AddRemoveGarbageRegion(This,Region,Attributes,GarbageSize)	\
    ( (This)->lpVtbl -> AddRemoveGarbageRegion(This,Region,Attributes,GarbageSize) ) 

#define IImageModification_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IImageModification_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define IImageModification_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define IImageModification_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IImageModification_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IImageModification_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_ImageModification;

#ifdef __cplusplus

class DECLSPEC_UUID("10002026-0000-1056-976E-008048D53AE3")
ImageModification;
#endif


#ifndef __GetPictureFlags_MODULE_DEFINED__
#define __GetPictureFlags_MODULE_DEFINED__


/* module GetPictureFlags */
/* [helpstring][helpcontext] */ 

/* [helpcontext] */ const long GP_ScaleToGray	=	0x1;

/* [helpcontext] */ const long GP_ReduceToHighColor	=	0x2;

#endif /* __GetPictureFlags_MODULE_DEFINED__ */

#ifndef __IImage_INTERFACE_DEFINED__
#define __IImage_INTERFACE_DEFINED__

/* interface IImage */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IImage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001024-0000-1056-976E-008048D53AE3")
    IImage : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ImageDocument( 
            /* [retval][out] */ IImageDocument **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_XResolution( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_YResolution( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ImageColorType( 
            /* [retval][out] */ ImageColorTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WriteToFile( 
            /* [in] */ BSTR FileName,
            /* [in] */ ImageFileFormatEnum Format,
            /* [defaultvalue][in] */ IImageModification *Modification = 0,
            /* [defaultvalue][in] */ IUnknown *extendedParams = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetPicture( 
            /* [in] */ IImageModification *Modification,
            /* [in] */ long Mode,
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EstimateBitmapSize( 
            /* [in] */ IImageModification *Modification,
            /* [in] */ long Mode,
            /* [retval][out] */ long *Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IImageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IImage * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IImage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IImage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IImage * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IImage * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IImage * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IImage * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IImage * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ImageDocument )( 
            IImage * This,
            /* [retval][out] */ IImageDocument **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            IImage * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            IImage * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_XResolution )( 
            IImage * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_YResolution )( 
            IImage * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ImageColorType )( 
            IImage * This,
            /* [retval][out] */ ImageColorTypeEnum *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WriteToFile )( 
            IImage * This,
            /* [in] */ BSTR FileName,
            /* [in] */ ImageFileFormatEnum Format,
            /* [defaultvalue][in] */ IImageModification *Modification,
            /* [defaultvalue][in] */ IUnknown *extendedParams);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetPicture )( 
            IImage * This,
            /* [in] */ IImageModification *Modification,
            /* [in] */ long Mode,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EstimateBitmapSize )( 
            IImage * This,
            /* [in] */ IImageModification *Modification,
            /* [in] */ long Mode,
            /* [retval][out] */ long *Result);
        
        END_INTERFACE
    } IImageVtbl;

    interface IImage
    {
        CONST_VTBL struct IImageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IImage_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IImage_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IImage_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IImage_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IImage_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IImage_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IImage_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IImage_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IImage_get_ImageDocument(This,Result)	\
    ( (This)->lpVtbl -> get_ImageDocument(This,Result) ) 

#define IImage_get_Width(This,Result)	\
    ( (This)->lpVtbl -> get_Width(This,Result) ) 

#define IImage_get_Height(This,Result)	\
    ( (This)->lpVtbl -> get_Height(This,Result) ) 

#define IImage_get_XResolution(This,Result)	\
    ( (This)->lpVtbl -> get_XResolution(This,Result) ) 

#define IImage_get_YResolution(This,Result)	\
    ( (This)->lpVtbl -> get_YResolution(This,Result) ) 

#define IImage_get_ImageColorType(This,Result)	\
    ( (This)->lpVtbl -> get_ImageColorType(This,Result) ) 

#define IImage_WriteToFile(This,FileName,Format,Modification,extendedParams)	\
    ( (This)->lpVtbl -> WriteToFile(This,FileName,Format,Modification,extendedParams) ) 

#define IImage_GetPicture(This,Modification,Mode,Result)	\
    ( (This)->lpVtbl -> GetPicture(This,Modification,Mode,Result) ) 

#define IImage_EstimateBitmapSize(This,Modification,Mode,Result)	\
    ( (This)->lpVtbl -> EstimateBitmapSize(This,Modification,Mode,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IImage_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_Image;

#ifdef __cplusplus

class DECLSPEC_UUID("10002025-0000-1056-976E-008048D53AE3")
Image;
#endif

#ifndef __IPrepareImageMode_INTERFACE_DEFINED__
#define __IPrepareImageMode_INTERFACE_DEFINED__

/* interface IPrepareImageMode */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IPrepareImageMode;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001026-0000-1056-976E-008048D53AE3")
    IPrepareImageMode : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CorrectSkewMode( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CorrectSkewMode( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CorrectSkewByBlackSquaresHorizontally( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CorrectSkewByBlackSquaresHorizontally( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CorrectSkewByBlackSquaresVertically( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CorrectSkewByBlackSquaresVertically( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CorrectSkewByHorizontalLines( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CorrectSkewByHorizontalLines( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CorrectSkewByVerticalLines( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CorrectSkewByVerticalLines( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CorrectSkewByHorizontalText( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CorrectSkewByHorizontalText( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CorrectSkewByVerticalText( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CorrectSkewByVerticalText( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_InvertImage( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_InvertImage( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MirrorImage( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_MirrorImage( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Rotation( 
            /* [retval][out] */ RotationTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Rotation( 
            /* [in] */ RotationTypeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DiscardColorImage( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DiscardColorImage( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_OverwriteResolution( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_OverwriteResolution( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_XResolutionToOverwrite( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_XResolutionToOverwrite( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_YResolutionToOverwrite( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_YResolutionToOverwrite( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CreatePreview( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CreatePreview( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PreviewWidth( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PreviewWidth( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PreviewHeight( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PreviewHeight( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IPrepareImageMode *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ImageCompression( 
            /* [retval][out] */ ImageCompressionEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ImageCompression( 
            /* [in] */ ImageCompressionEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoOverwriteResolution( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoOverwriteResolution( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPrepareImageModeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPrepareImageMode * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPrepareImageMode * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPrepareImageMode * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPrepareImageMode * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPrepareImageMode * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPrepareImageMode * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPrepareImageMode * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPrepareImageMode * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CorrectSkewMode )( 
            IPrepareImageMode * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CorrectSkewMode )( 
            IPrepareImageMode * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CorrectSkewByBlackSquaresHorizontally )( 
            IPrepareImageMode * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CorrectSkewByBlackSquaresHorizontally )( 
            IPrepareImageMode * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CorrectSkewByBlackSquaresVertically )( 
            IPrepareImageMode * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CorrectSkewByBlackSquaresVertically )( 
            IPrepareImageMode * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CorrectSkewByHorizontalLines )( 
            IPrepareImageMode * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CorrectSkewByHorizontalLines )( 
            IPrepareImageMode * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CorrectSkewByVerticalLines )( 
            IPrepareImageMode * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CorrectSkewByVerticalLines )( 
            IPrepareImageMode * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CorrectSkewByHorizontalText )( 
            IPrepareImageMode * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CorrectSkewByHorizontalText )( 
            IPrepareImageMode * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CorrectSkewByVerticalText )( 
            IPrepareImageMode * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CorrectSkewByVerticalText )( 
            IPrepareImageMode * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_InvertImage )( 
            IPrepareImageMode * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_InvertImage )( 
            IPrepareImageMode * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MirrorImage )( 
            IPrepareImageMode * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MirrorImage )( 
            IPrepareImageMode * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            IPrepareImageMode * This,
            /* [retval][out] */ RotationTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            IPrepareImageMode * This,
            /* [in] */ RotationTypeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DiscardColorImage )( 
            IPrepareImageMode * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DiscardColorImage )( 
            IPrepareImageMode * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OverwriteResolution )( 
            IPrepareImageMode * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OverwriteResolution )( 
            IPrepareImageMode * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_XResolutionToOverwrite )( 
            IPrepareImageMode * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_XResolutionToOverwrite )( 
            IPrepareImageMode * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_YResolutionToOverwrite )( 
            IPrepareImageMode * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_YResolutionToOverwrite )( 
            IPrepareImageMode * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CreatePreview )( 
            IPrepareImageMode * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CreatePreview )( 
            IPrepareImageMode * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PreviewWidth )( 
            IPrepareImageMode * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PreviewWidth )( 
            IPrepareImageMode * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PreviewHeight )( 
            IPrepareImageMode * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PreviewHeight )( 
            IPrepareImageMode * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IPrepareImageMode * This,
            /* [in] */ IPrepareImageMode *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IPrepareImageMode * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            IPrepareImageMode * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IPrepareImageMode * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            IPrepareImageMode * This,
            /* [in] */ long HGlobal);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ImageCompression )( 
            IPrepareImageMode * This,
            /* [retval][out] */ ImageCompressionEnum *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ImageCompression )( 
            IPrepareImageMode * This,
            /* [in] */ ImageCompressionEnum Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoOverwriteResolution )( 
            IPrepareImageMode * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoOverwriteResolution )( 
            IPrepareImageMode * This,
            /* [in] */ VARIANT_BOOL Value);
        
        END_INTERFACE
    } IPrepareImageModeVtbl;

    interface IPrepareImageMode
    {
        CONST_VTBL struct IPrepareImageModeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPrepareImageMode_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPrepareImageMode_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPrepareImageMode_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPrepareImageMode_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPrepareImageMode_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPrepareImageMode_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPrepareImageMode_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPrepareImageMode_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IPrepareImageMode_get_CorrectSkewMode(This,Result)	\
    ( (This)->lpVtbl -> get_CorrectSkewMode(This,Result) ) 

#define IPrepareImageMode_put_CorrectSkewMode(This,Value)	\
    ( (This)->lpVtbl -> put_CorrectSkewMode(This,Value) ) 

#define IPrepareImageMode_get_CorrectSkewByBlackSquaresHorizontally(This,Result)	\
    ( (This)->lpVtbl -> get_CorrectSkewByBlackSquaresHorizontally(This,Result) ) 

#define IPrepareImageMode_put_CorrectSkewByBlackSquaresHorizontally(This,Value)	\
    ( (This)->lpVtbl -> put_CorrectSkewByBlackSquaresHorizontally(This,Value) ) 

#define IPrepareImageMode_get_CorrectSkewByBlackSquaresVertically(This,Result)	\
    ( (This)->lpVtbl -> get_CorrectSkewByBlackSquaresVertically(This,Result) ) 

#define IPrepareImageMode_put_CorrectSkewByBlackSquaresVertically(This,Value)	\
    ( (This)->lpVtbl -> put_CorrectSkewByBlackSquaresVertically(This,Value) ) 

#define IPrepareImageMode_get_CorrectSkewByHorizontalLines(This,Result)	\
    ( (This)->lpVtbl -> get_CorrectSkewByHorizontalLines(This,Result) ) 

#define IPrepareImageMode_put_CorrectSkewByHorizontalLines(This,Value)	\
    ( (This)->lpVtbl -> put_CorrectSkewByHorizontalLines(This,Value) ) 

#define IPrepareImageMode_get_CorrectSkewByVerticalLines(This,Result)	\
    ( (This)->lpVtbl -> get_CorrectSkewByVerticalLines(This,Result) ) 

#define IPrepareImageMode_put_CorrectSkewByVerticalLines(This,Value)	\
    ( (This)->lpVtbl -> put_CorrectSkewByVerticalLines(This,Value) ) 

#define IPrepareImageMode_get_CorrectSkewByHorizontalText(This,Result)	\
    ( (This)->lpVtbl -> get_CorrectSkewByHorizontalText(This,Result) ) 

#define IPrepareImageMode_put_CorrectSkewByHorizontalText(This,Value)	\
    ( (This)->lpVtbl -> put_CorrectSkewByHorizontalText(This,Value) ) 

#define IPrepareImageMode_get_CorrectSkewByVerticalText(This,Result)	\
    ( (This)->lpVtbl -> get_CorrectSkewByVerticalText(This,Result) ) 

#define IPrepareImageMode_put_CorrectSkewByVerticalText(This,Value)	\
    ( (This)->lpVtbl -> put_CorrectSkewByVerticalText(This,Value) ) 

#define IPrepareImageMode_get_InvertImage(This,Result)	\
    ( (This)->lpVtbl -> get_InvertImage(This,Result) ) 

#define IPrepareImageMode_put_InvertImage(This,Value)	\
    ( (This)->lpVtbl -> put_InvertImage(This,Value) ) 

#define IPrepareImageMode_get_MirrorImage(This,Result)	\
    ( (This)->lpVtbl -> get_MirrorImage(This,Result) ) 

#define IPrepareImageMode_put_MirrorImage(This,Value)	\
    ( (This)->lpVtbl -> put_MirrorImage(This,Value) ) 

#define IPrepareImageMode_get_Rotation(This,Result)	\
    ( (This)->lpVtbl -> get_Rotation(This,Result) ) 

#define IPrepareImageMode_put_Rotation(This,Value)	\
    ( (This)->lpVtbl -> put_Rotation(This,Value) ) 

#define IPrepareImageMode_get_DiscardColorImage(This,Result)	\
    ( (This)->lpVtbl -> get_DiscardColorImage(This,Result) ) 

#define IPrepareImageMode_put_DiscardColorImage(This,Value)	\
    ( (This)->lpVtbl -> put_DiscardColorImage(This,Value) ) 

#define IPrepareImageMode_get_OverwriteResolution(This,Result)	\
    ( (This)->lpVtbl -> get_OverwriteResolution(This,Result) ) 

#define IPrepareImageMode_put_OverwriteResolution(This,Value)	\
    ( (This)->lpVtbl -> put_OverwriteResolution(This,Value) ) 

#define IPrepareImageMode_get_XResolutionToOverwrite(This,Result)	\
    ( (This)->lpVtbl -> get_XResolutionToOverwrite(This,Result) ) 

#define IPrepareImageMode_put_XResolutionToOverwrite(This,Value)	\
    ( (This)->lpVtbl -> put_XResolutionToOverwrite(This,Value) ) 

#define IPrepareImageMode_get_YResolutionToOverwrite(This,Result)	\
    ( (This)->lpVtbl -> get_YResolutionToOverwrite(This,Result) ) 

#define IPrepareImageMode_put_YResolutionToOverwrite(This,Value)	\
    ( (This)->lpVtbl -> put_YResolutionToOverwrite(This,Value) ) 

#define IPrepareImageMode_get_CreatePreview(This,Result)	\
    ( (This)->lpVtbl -> get_CreatePreview(This,Result) ) 

#define IPrepareImageMode_put_CreatePreview(This,Value)	\
    ( (This)->lpVtbl -> put_CreatePreview(This,Value) ) 

#define IPrepareImageMode_get_PreviewWidth(This,Result)	\
    ( (This)->lpVtbl -> get_PreviewWidth(This,Result) ) 

#define IPrepareImageMode_put_PreviewWidth(This,Value)	\
    ( (This)->lpVtbl -> put_PreviewWidth(This,Value) ) 

#define IPrepareImageMode_get_PreviewHeight(This,Result)	\
    ( (This)->lpVtbl -> get_PreviewHeight(This,Result) ) 

#define IPrepareImageMode_put_PreviewHeight(This,Value)	\
    ( (This)->lpVtbl -> put_PreviewHeight(This,Value) ) 

#define IPrepareImageMode_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IPrepareImageMode_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define IPrepareImageMode_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define IPrepareImageMode_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IPrepareImageMode_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#define IPrepareImageMode_get_ImageCompression(This,Result)	\
    ( (This)->lpVtbl -> get_ImageCompression(This,Result) ) 

#define IPrepareImageMode_put_ImageCompression(This,Value)	\
    ( (This)->lpVtbl -> put_ImageCompression(This,Value) ) 

#define IPrepareImageMode_get_AutoOverwriteResolution(This,Result)	\
    ( (This)->lpVtbl -> get_AutoOverwriteResolution(This,Result) ) 

#define IPrepareImageMode_put_AutoOverwriteResolution(This,Value)	\
    ( (This)->lpVtbl -> put_AutoOverwriteResolution(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPrepareImageMode_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_PrepareImageMode;

#ifdef __cplusplus

class DECLSPEC_UUID("10002027-0000-1056-976E-008048D53AE3")
PrepareImageMode;
#endif

#ifndef __DIImageDocumentEvents_DISPINTERFACE_DEFINED__
#define __DIImageDocumentEvents_DISPINTERFACE_DEFINED__

/* dispinterface DIImageDocumentEvents */
/* [helpstring][helpcontext][uuid] */ 


EXTERN_C const IID DIID_DIImageDocumentEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("1000103d-0000-1056-976E-008048D53AE3")
    DIImageDocumentEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DIImageDocumentEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DIImageDocumentEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DIImageDocumentEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DIImageDocumentEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DIImageDocumentEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DIImageDocumentEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DIImageDocumentEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DIImageDocumentEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DIImageDocumentEventsVtbl;

    interface DIImageDocumentEvents
    {
        CONST_VTBL struct DIImageDocumentEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DIImageDocumentEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DIImageDocumentEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DIImageDocumentEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DIImageDocumentEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DIImageDocumentEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DIImageDocumentEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DIImageDocumentEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DIImageDocumentEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IImageDocumentEvents_INTERFACE_DEFINED__
#define __IImageDocumentEvents_INTERFACE_DEFINED__

/* interface IImageDocumentEvents */
/* [object][helpstring][helpcontext][uuid] */ 


EXTERN_C const IID IID_IImageDocumentEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000103e-0000-1056-976E-008048D53AE3")
    IImageDocumentEvents : public IUnknown
    {
    public:
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TransformationMade( 
            /* [in] */ RotationTypeEnum Rotation,
            /* [in] */ VARIANT_BOOL WasMirrored,
            /* [in] */ VARIANT_BOOL WasInverted) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IImageDocumentEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IImageDocumentEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IImageDocumentEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IImageDocumentEvents * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TransformationMade )( 
            IImageDocumentEvents * This,
            /* [in] */ RotationTypeEnum Rotation,
            /* [in] */ VARIANT_BOOL WasMirrored,
            /* [in] */ VARIANT_BOOL WasInverted);
        
        END_INTERFACE
    } IImageDocumentEventsVtbl;

    interface IImageDocumentEvents
    {
        CONST_VTBL struct IImageDocumentEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IImageDocumentEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IImageDocumentEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IImageDocumentEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IImageDocumentEvents_TransformationMade(This,Rotation,WasMirrored,WasInverted)	\
    ( (This)->lpVtbl -> TransformationMade(This,Rotation,WasMirrored,WasInverted) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IImageDocumentEvents_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_ImageDocument;

#ifdef __cplusplus

class DECLSPEC_UUID("10002024-0000-1056-976E-008048D53AE3")
ImageDocument;
#endif

#ifndef __IMultipageImageWriter_INTERFACE_DEFINED__
#define __IMultipageImageWriter_INTERFACE_DEFINED__

/* interface IMultipageImageWriter */
/* [helpcontext][helpstring][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IMultipageImageWriter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001028-0000-1056-976E-008048D53AE3")
    IMultipageImageWriter : public IDispatch
    {
    public:
        virtual /* [helpcontext][helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddPage( 
            /* [in] */ IImage *ImagePage) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMultipageImageWriterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMultipageImageWriter * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMultipageImageWriter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMultipageImageWriter * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMultipageImageWriter * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMultipageImageWriter * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMultipageImageWriter * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMultipageImageWriter * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IMultipageImageWriter * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddPage )( 
            IMultipageImageWriter * This,
            /* [in] */ IImage *ImagePage);
        
        END_INTERFACE
    } IMultipageImageWriterVtbl;

    interface IMultipageImageWriter
    {
        CONST_VTBL struct IMultipageImageWriterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMultipageImageWriter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMultipageImageWriter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMultipageImageWriter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMultipageImageWriter_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMultipageImageWriter_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMultipageImageWriter_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMultipageImageWriter_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMultipageImageWriter_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IMultipageImageWriter_AddPage(This,ImagePage)	\
    ( (This)->lpVtbl -> AddPage(This,ImagePage) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMultipageImageWriter_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_MultipageImageWriter;

#ifdef __cplusplus

class DECLSPEC_UUID("10002029-0000-1056-976E-008048D53AE3")
MultipageImageWriter;
#endif

#ifndef __IJpegExtendedParams_INTERFACE_DEFINED__
#define __IJpegExtendedParams_INTERFACE_DEFINED__

/* interface IJpegExtendedParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IJpegExtendedParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001027-0000-1056-976E-008048D53AE3")
    IJpegExtendedParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IJpegExtendedParams *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UseJpeg6Compression( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_UseJpeg6Compression( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Quality( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Quality( 
            /* [in] */ long Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IJpegExtendedParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IJpegExtendedParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IJpegExtendedParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IJpegExtendedParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IJpegExtendedParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IJpegExtendedParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IJpegExtendedParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IJpegExtendedParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IJpegExtendedParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IJpegExtendedParams * This,
            /* [in] */ IJpegExtendedParams *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IJpegExtendedParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            IJpegExtendedParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IJpegExtendedParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            IJpegExtendedParams * This,
            /* [in] */ long HGlobal);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UseJpeg6Compression )( 
            IJpegExtendedParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UseJpeg6Compression )( 
            IJpegExtendedParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Quality )( 
            IJpegExtendedParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Quality )( 
            IJpegExtendedParams * This,
            /* [in] */ long Value);
        
        END_INTERFACE
    } IJpegExtendedParamsVtbl;

    interface IJpegExtendedParams
    {
        CONST_VTBL struct IJpegExtendedParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IJpegExtendedParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IJpegExtendedParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IJpegExtendedParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IJpegExtendedParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IJpegExtendedParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IJpegExtendedParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IJpegExtendedParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IJpegExtendedParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IJpegExtendedParams_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IJpegExtendedParams_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define IJpegExtendedParams_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define IJpegExtendedParams_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IJpegExtendedParams_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#define IJpegExtendedParams_get_UseJpeg6Compression(This,Result)	\
    ( (This)->lpVtbl -> get_UseJpeg6Compression(This,Result) ) 

#define IJpegExtendedParams_put_UseJpeg6Compression(This,Value)	\
    ( (This)->lpVtbl -> put_UseJpeg6Compression(This,Value) ) 

#define IJpegExtendedParams_get_Quality(This,Result)	\
    ( (This)->lpVtbl -> get_Quality(This,Result) ) 

#define IJpegExtendedParams_put_Quality(This,Value)	\
    ( (This)->lpVtbl -> put_Quality(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IJpegExtendedParams_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_JpegExtendedParams;

#ifdef __cplusplus

class DECLSPEC_UUID("10002028-0000-1056-976E-008048D53AE3")
JpegExtendedParams;
#endif

#ifndef __IPdfExtendedParams_INTERFACE_DEFINED__
#define __IPdfExtendedParams_INTERFACE_DEFINED__

/* interface IPdfExtendedParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IPdfExtendedParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010D8-0000-1056-976E-008048D53AE3")
    IPdfExtendedParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Author( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Author( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Creator( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Title( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Title( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EncryptionInfo( 
            /* [retval][out] */ IPDFEncryptionInfo **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_EncryptionInfo( 
            /* [in] */ IPDFEncryptionInfo *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Keywords( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Keywords( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Producer( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Producer( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Subject( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Subject( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PDFVersion( 
            /* [retval][out] */ PDFVersionEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PDFVersion( 
            /* [in] */ PDFVersionEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IPdfExtendedParams *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPdfExtendedParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPdfExtendedParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPdfExtendedParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPdfExtendedParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPdfExtendedParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPdfExtendedParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPdfExtendedParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPdfExtendedParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPdfExtendedParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Author )( 
            IPdfExtendedParams * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Author )( 
            IPdfExtendedParams * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Creator )( 
            IPdfExtendedParams * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            IPdfExtendedParams * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Title )( 
            IPdfExtendedParams * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Title )( 
            IPdfExtendedParams * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EncryptionInfo )( 
            IPdfExtendedParams * This,
            /* [retval][out] */ IPDFEncryptionInfo **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EncryptionInfo )( 
            IPdfExtendedParams * This,
            /* [in] */ IPDFEncryptionInfo *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Keywords )( 
            IPdfExtendedParams * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Keywords )( 
            IPdfExtendedParams * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Producer )( 
            IPdfExtendedParams * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Producer )( 
            IPdfExtendedParams * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Subject )( 
            IPdfExtendedParams * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Subject )( 
            IPdfExtendedParams * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PDFVersion )( 
            IPdfExtendedParams * This,
            /* [retval][out] */ PDFVersionEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PDFVersion )( 
            IPdfExtendedParams * This,
            /* [in] */ PDFVersionEnum Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IPdfExtendedParams * This,
            /* [in] */ IPdfExtendedParams *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IPdfExtendedParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            IPdfExtendedParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IPdfExtendedParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            IPdfExtendedParams * This,
            /* [in] */ long HGlobal);
        
        END_INTERFACE
    } IPdfExtendedParamsVtbl;

    interface IPdfExtendedParams
    {
        CONST_VTBL struct IPdfExtendedParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPdfExtendedParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPdfExtendedParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPdfExtendedParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPdfExtendedParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPdfExtendedParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPdfExtendedParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPdfExtendedParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPdfExtendedParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IPdfExtendedParams_put_Author(This,Value)	\
    ( (This)->lpVtbl -> put_Author(This,Value) ) 

#define IPdfExtendedParams_get_Author(This,Result)	\
    ( (This)->lpVtbl -> get_Author(This,Result) ) 

#define IPdfExtendedParams_put_Creator(This,Value)	\
    ( (This)->lpVtbl -> put_Creator(This,Value) ) 

#define IPdfExtendedParams_get_Creator(This,Result)	\
    ( (This)->lpVtbl -> get_Creator(This,Result) ) 

#define IPdfExtendedParams_put_Title(This,Value)	\
    ( (This)->lpVtbl -> put_Title(This,Value) ) 

#define IPdfExtendedParams_get_Title(This,Result)	\
    ( (This)->lpVtbl -> get_Title(This,Result) ) 

#define IPdfExtendedParams_get_EncryptionInfo(This,Result)	\
    ( (This)->lpVtbl -> get_EncryptionInfo(This,Result) ) 

#define IPdfExtendedParams_put_EncryptionInfo(This,Value)	\
    ( (This)->lpVtbl -> put_EncryptionInfo(This,Value) ) 

#define IPdfExtendedParams_get_Keywords(This,Result)	\
    ( (This)->lpVtbl -> get_Keywords(This,Result) ) 

#define IPdfExtendedParams_put_Keywords(This,Value)	\
    ( (This)->lpVtbl -> put_Keywords(This,Value) ) 

#define IPdfExtendedParams_get_Producer(This,Result)	\
    ( (This)->lpVtbl -> get_Producer(This,Result) ) 

#define IPdfExtendedParams_put_Producer(This,Value)	\
    ( (This)->lpVtbl -> put_Producer(This,Value) ) 

#define IPdfExtendedParams_get_Subject(This,Result)	\
    ( (This)->lpVtbl -> get_Subject(This,Result) ) 

#define IPdfExtendedParams_put_Subject(This,Value)	\
    ( (This)->lpVtbl -> put_Subject(This,Value) ) 

#define IPdfExtendedParams_get_PDFVersion(This,Result)	\
    ( (This)->lpVtbl -> get_PDFVersion(This,Result) ) 

#define IPdfExtendedParams_put_PDFVersion(This,Value)	\
    ( (This)->lpVtbl -> put_PDFVersion(This,Value) ) 

#define IPdfExtendedParams_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IPdfExtendedParams_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define IPdfExtendedParams_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define IPdfExtendedParams_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IPdfExtendedParams_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPdfExtendedParams_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_PdfExtendedParams;

#ifdef __cplusplus

class DECLSPEC_UUID("100020C2-0000-1056-976E-008048D53AE3")
PdfExtendedParams;
#endif

#ifndef __ITrainingImage_INTERFACE_DEFINED__
#define __ITrainingImage_INTERFACE_DEFINED__

/* interface ITrainingImage */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ITrainingImage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010A0-0000-1056-976E-008048D53AE3")
    ITrainingImage : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SmallCharsHeight( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SmallCharsHeight( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BaseLine( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BaseLine( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetImageData( 
            /* [in] */ long RawDataPointer) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITrainingImageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITrainingImage * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITrainingImage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITrainingImage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITrainingImage * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITrainingImage * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITrainingImage * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITrainingImage * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ITrainingImage * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            ITrainingImage * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            ITrainingImage * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            ITrainingImage * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            ITrainingImage * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SmallCharsHeight )( 
            ITrainingImage * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SmallCharsHeight )( 
            ITrainingImage * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BaseLine )( 
            ITrainingImage * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BaseLine )( 
            ITrainingImage * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetImageData )( 
            ITrainingImage * This,
            /* [in] */ long RawDataPointer);
        
        END_INTERFACE
    } ITrainingImageVtbl;

    interface ITrainingImage
    {
        CONST_VTBL struct ITrainingImageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITrainingImage_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITrainingImage_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITrainingImage_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITrainingImage_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITrainingImage_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITrainingImage_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITrainingImage_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITrainingImage_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ITrainingImage_put_Width(This,Value)	\
    ( (This)->lpVtbl -> put_Width(This,Value) ) 

#define ITrainingImage_get_Width(This,Result)	\
    ( (This)->lpVtbl -> get_Width(This,Result) ) 

#define ITrainingImage_put_Height(This,Value)	\
    ( (This)->lpVtbl -> put_Height(This,Value) ) 

#define ITrainingImage_get_Height(This,Result)	\
    ( (This)->lpVtbl -> get_Height(This,Result) ) 

#define ITrainingImage_put_SmallCharsHeight(This,Value)	\
    ( (This)->lpVtbl -> put_SmallCharsHeight(This,Value) ) 

#define ITrainingImage_get_SmallCharsHeight(This,Result)	\
    ( (This)->lpVtbl -> get_SmallCharsHeight(This,Result) ) 

#define ITrainingImage_put_BaseLine(This,Value)	\
    ( (This)->lpVtbl -> put_BaseLine(This,Value) ) 

#define ITrainingImage_get_BaseLine(This,Result)	\
    ( (This)->lpVtbl -> get_BaseLine(This,Result) ) 

#define ITrainingImage_SetImageData(This,RawDataPointer)	\
    ( (This)->lpVtbl -> SetImageData(This,RawDataPointer) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITrainingImage_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_TrainingImage;

#ifdef __cplusplus

class DECLSPEC_UUID("10002090-0000-1056-976E-008048D53AE3")
TrainingImage;
#endif

#ifndef __IObjectsExtractionParams_INTERFACE_DEFINED__
#define __IObjectsExtractionParams_INTERFACE_DEFINED__

/* interface IObjectsExtractionParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IObjectsExtractionParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010A3-0000-1056-976E-008048D53AE3")
    IObjectsExtractionParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ProhibitColorImage( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ProhibitColorImage( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FastObjectsExtraction( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FastObjectsExtraction( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FlexiFormsDA( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FlexiFormsDA( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FullTextIndexDA( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FullTextIndexDA( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RemoveTexture( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RemoveTexture( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RemoveGarbage( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RemoveGarbage( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DetectPorousText( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DetectPorousText( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DetectMatrixPrinter( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DetectMatrixPrinter( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IObjectsExtractionParams *From) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IObjectsExtractionParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IObjectsExtractionParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IObjectsExtractionParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IObjectsExtractionParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IObjectsExtractionParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IObjectsExtractionParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IObjectsExtractionParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IObjectsExtractionParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IObjectsExtractionParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProhibitColorImage )( 
            IObjectsExtractionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ProhibitColorImage )( 
            IObjectsExtractionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FastObjectsExtraction )( 
            IObjectsExtractionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FastObjectsExtraction )( 
            IObjectsExtractionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FlexiFormsDA )( 
            IObjectsExtractionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FlexiFormsDA )( 
            IObjectsExtractionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FullTextIndexDA )( 
            IObjectsExtractionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FullTextIndexDA )( 
            IObjectsExtractionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RemoveTexture )( 
            IObjectsExtractionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RemoveTexture )( 
            IObjectsExtractionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RemoveGarbage )( 
            IObjectsExtractionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RemoveGarbage )( 
            IObjectsExtractionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DetectPorousText )( 
            IObjectsExtractionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DetectPorousText )( 
            IObjectsExtractionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DetectMatrixPrinter )( 
            IObjectsExtractionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DetectMatrixPrinter )( 
            IObjectsExtractionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IObjectsExtractionParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            IObjectsExtractionParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IObjectsExtractionParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            IObjectsExtractionParams * This,
            /* [in] */ long HGlobal);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IObjectsExtractionParams * This,
            /* [in] */ IObjectsExtractionParams *From);
        
        END_INTERFACE
    } IObjectsExtractionParamsVtbl;

    interface IObjectsExtractionParams
    {
        CONST_VTBL struct IObjectsExtractionParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IObjectsExtractionParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IObjectsExtractionParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IObjectsExtractionParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IObjectsExtractionParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IObjectsExtractionParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IObjectsExtractionParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IObjectsExtractionParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IObjectsExtractionParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IObjectsExtractionParams_get_ProhibitColorImage(This,Result)	\
    ( (This)->lpVtbl -> get_ProhibitColorImage(This,Result) ) 

#define IObjectsExtractionParams_put_ProhibitColorImage(This,Value)	\
    ( (This)->lpVtbl -> put_ProhibitColorImage(This,Value) ) 

#define IObjectsExtractionParams_get_FastObjectsExtraction(This,Result)	\
    ( (This)->lpVtbl -> get_FastObjectsExtraction(This,Result) ) 

#define IObjectsExtractionParams_put_FastObjectsExtraction(This,Value)	\
    ( (This)->lpVtbl -> put_FastObjectsExtraction(This,Value) ) 

#define IObjectsExtractionParams_get_FlexiFormsDA(This,Result)	\
    ( (This)->lpVtbl -> get_FlexiFormsDA(This,Result) ) 

#define IObjectsExtractionParams_put_FlexiFormsDA(This,Value)	\
    ( (This)->lpVtbl -> put_FlexiFormsDA(This,Value) ) 

#define IObjectsExtractionParams_get_FullTextIndexDA(This,Result)	\
    ( (This)->lpVtbl -> get_FullTextIndexDA(This,Result) ) 

#define IObjectsExtractionParams_put_FullTextIndexDA(This,Value)	\
    ( (This)->lpVtbl -> put_FullTextIndexDA(This,Value) ) 

#define IObjectsExtractionParams_get_RemoveTexture(This,Result)	\
    ( (This)->lpVtbl -> get_RemoveTexture(This,Result) ) 

#define IObjectsExtractionParams_put_RemoveTexture(This,Value)	\
    ( (This)->lpVtbl -> put_RemoveTexture(This,Value) ) 

#define IObjectsExtractionParams_get_RemoveGarbage(This,Result)	\
    ( (This)->lpVtbl -> get_RemoveGarbage(This,Result) ) 

#define IObjectsExtractionParams_put_RemoveGarbage(This,Value)	\
    ( (This)->lpVtbl -> put_RemoveGarbage(This,Value) ) 

#define IObjectsExtractionParams_get_DetectPorousText(This,Result)	\
    ( (This)->lpVtbl -> get_DetectPorousText(This,Result) ) 

#define IObjectsExtractionParams_put_DetectPorousText(This,Value)	\
    ( (This)->lpVtbl -> put_DetectPorousText(This,Value) ) 

#define IObjectsExtractionParams_get_DetectMatrixPrinter(This,Result)	\
    ( (This)->lpVtbl -> get_DetectMatrixPrinter(This,Result) ) 

#define IObjectsExtractionParams_put_DetectMatrixPrinter(This,Value)	\
    ( (This)->lpVtbl -> put_DetectMatrixPrinter(This,Value) ) 

#define IObjectsExtractionParams_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define IObjectsExtractionParams_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define IObjectsExtractionParams_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IObjectsExtractionParams_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#define IObjectsExtractionParams_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IObjectsExtractionParams_INTERFACE_DEFINED__ */


#ifndef __IBarcodeParams_INTERFACE_DEFINED__
#define __IBarcodeParams_INTERFACE_DEFINED__

/* interface IBarcodeParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IBarcodeParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000101f-0000-1056-976E-008048D53AE3")
    IBarcodeParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Orientation( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Orientation( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IBarcodeParams *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HasChecksum( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_HasChecksum( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsCode39WithoutAsterisk( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsCode39WithoutAsterisk( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PDF417CodePage( 
            /* [retval][out] */ CodePageEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PDF417CodePage( 
            /* [in] */ CodePageEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SupplementType( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SupplementType( 
            /* [in] */ long Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IBarcodeParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IBarcodeParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IBarcodeParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IBarcodeParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IBarcodeParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IBarcodeParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IBarcodeParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IBarcodeParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IBarcodeParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IBarcodeParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            IBarcodeParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Orientation )( 
            IBarcodeParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Orientation )( 
            IBarcodeParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IBarcodeParams * This,
            /* [in] */ IBarcodeParams *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IBarcodeParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            IBarcodeParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IBarcodeParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            IBarcodeParams * This,
            /* [in] */ long HGlobal);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasChecksum )( 
            IBarcodeParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HasChecksum )( 
            IBarcodeParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsCode39WithoutAsterisk )( 
            IBarcodeParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsCode39WithoutAsterisk )( 
            IBarcodeParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PDF417CodePage )( 
            IBarcodeParams * This,
            /* [retval][out] */ CodePageEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PDF417CodePage )( 
            IBarcodeParams * This,
            /* [in] */ CodePageEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SupplementType )( 
            IBarcodeParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SupplementType )( 
            IBarcodeParams * This,
            /* [in] */ long Value);
        
        END_INTERFACE
    } IBarcodeParamsVtbl;

    interface IBarcodeParams
    {
        CONST_VTBL struct IBarcodeParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IBarcodeParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IBarcodeParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IBarcodeParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IBarcodeParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IBarcodeParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IBarcodeParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IBarcodeParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IBarcodeParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IBarcodeParams_get_Type(This,Result)	\
    ( (This)->lpVtbl -> get_Type(This,Result) ) 

#define IBarcodeParams_put_Type(This,Value)	\
    ( (This)->lpVtbl -> put_Type(This,Value) ) 

#define IBarcodeParams_get_Orientation(This,Result)	\
    ( (This)->lpVtbl -> get_Orientation(This,Result) ) 

#define IBarcodeParams_put_Orientation(This,Value)	\
    ( (This)->lpVtbl -> put_Orientation(This,Value) ) 

#define IBarcodeParams_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IBarcodeParams_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define IBarcodeParams_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define IBarcodeParams_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IBarcodeParams_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#define IBarcodeParams_get_HasChecksum(This,Result)	\
    ( (This)->lpVtbl -> get_HasChecksum(This,Result) ) 

#define IBarcodeParams_put_HasChecksum(This,Value)	\
    ( (This)->lpVtbl -> put_HasChecksum(This,Value) ) 

#define IBarcodeParams_get_IsCode39WithoutAsterisk(This,Result)	\
    ( (This)->lpVtbl -> get_IsCode39WithoutAsterisk(This,Result) ) 

#define IBarcodeParams_put_IsCode39WithoutAsterisk(This,Value)	\
    ( (This)->lpVtbl -> put_IsCode39WithoutAsterisk(This,Value) ) 

#define IBarcodeParams_get_PDF417CodePage(This,Result)	\
    ( (This)->lpVtbl -> get_PDF417CodePage(This,Result) ) 

#define IBarcodeParams_put_PDF417CodePage(This,Value)	\
    ( (This)->lpVtbl -> put_PDF417CodePage(This,Value) ) 

#define IBarcodeParams_get_SupplementType(This,Result)	\
    ( (This)->lpVtbl -> get_SupplementType(This,Result) ) 

#define IBarcodeParams_put_SupplementType(This,Value)	\
    ( (This)->lpVtbl -> put_SupplementType(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IBarcodeParams_INTERFACE_DEFINED__ */


#ifndef __ITextLanguage_INTERFACE_DEFINED__
#define __ITextLanguage_INTERFACE_DEFINED__

/* interface ITextLanguage */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ITextLanguage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000100d-0000-1056-976E-008048D53AE3")
    ITextLanguage : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_InternalName( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_InternalName( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LetterSet( 
            /* [in] */ TextLanguageLetterSetEnum Type,
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_LetterSet( 
            /* [in] */ TextLanguageLetterSetEnum Type,
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BaseLanguages( 
            /* [retval][out] */ IBaseLanguages **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ProhibitingDictionaries( 
            /* [retval][out] */ IDictionaryDescriptions **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ImpliedTextCategory( 
            /* [retval][out] */ TextCategoryEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ImpliedTextCategory( 
            /* [in] */ TextCategoryEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UserProperty( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ VARIANT *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_UserProperty( 
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ ITextLanguage *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITextLanguageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITextLanguage * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITextLanguage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITextLanguage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITextLanguage * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITextLanguage * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITextLanguage * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITextLanguage * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ITextLanguage * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_InternalName )( 
            ITextLanguage * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_InternalName )( 
            ITextLanguage * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LetterSet )( 
            ITextLanguage * This,
            /* [in] */ TextLanguageLetterSetEnum Type,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LetterSet )( 
            ITextLanguage * This,
            /* [in] */ TextLanguageLetterSetEnum Type,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BaseLanguages )( 
            ITextLanguage * This,
            /* [retval][out] */ IBaseLanguages **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProhibitingDictionaries )( 
            ITextLanguage * This,
            /* [retval][out] */ IDictionaryDescriptions **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ImpliedTextCategory )( 
            ITextLanguage * This,
            /* [retval][out] */ TextCategoryEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ImpliedTextCategory )( 
            ITextLanguage * This,
            /* [in] */ TextCategoryEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserProperty )( 
            ITextLanguage * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ VARIANT *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UserProperty )( 
            ITextLanguage * This,
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            ITextLanguage * This,
            /* [in] */ ITextLanguage *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            ITextLanguage * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            ITextLanguage * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            ITextLanguage * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            ITextLanguage * This,
            /* [in] */ long HGlobal);
        
        END_INTERFACE
    } ITextLanguageVtbl;

    interface ITextLanguage
    {
        CONST_VTBL struct ITextLanguageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITextLanguage_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITextLanguage_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITextLanguage_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITextLanguage_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITextLanguage_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITextLanguage_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITextLanguage_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITextLanguage_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ITextLanguage_get_InternalName(This,Result)	\
    ( (This)->lpVtbl -> get_InternalName(This,Result) ) 

#define ITextLanguage_put_InternalName(This,Value)	\
    ( (This)->lpVtbl -> put_InternalName(This,Value) ) 

#define ITextLanguage_get_LetterSet(This,Type,Result)	\
    ( (This)->lpVtbl -> get_LetterSet(This,Type,Result) ) 

#define ITextLanguage_put_LetterSet(This,Type,Value)	\
    ( (This)->lpVtbl -> put_LetterSet(This,Type,Value) ) 

#define ITextLanguage_get_BaseLanguages(This,Result)	\
    ( (This)->lpVtbl -> get_BaseLanguages(This,Result) ) 

#define ITextLanguage_get_ProhibitingDictionaries(This,Result)	\
    ( (This)->lpVtbl -> get_ProhibitingDictionaries(This,Result) ) 

#define ITextLanguage_get_ImpliedTextCategory(This,Result)	\
    ( (This)->lpVtbl -> get_ImpliedTextCategory(This,Result) ) 

#define ITextLanguage_put_ImpliedTextCategory(This,Value)	\
    ( (This)->lpVtbl -> put_ImpliedTextCategory(This,Value) ) 

#define ITextLanguage_get_UserProperty(This,Name,Result)	\
    ( (This)->lpVtbl -> get_UserProperty(This,Name,Result) ) 

#define ITextLanguage_put_UserProperty(This,Name,Value)	\
    ( (This)->lpVtbl -> put_UserProperty(This,Name,Value) ) 

#define ITextLanguage_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define ITextLanguage_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define ITextLanguage_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define ITextLanguage_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define ITextLanguage_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITextLanguage_INTERFACE_DEFINED__ */


#ifndef __ILongsCollection_INTERFACE_DEFINED__
#define __ILongsCollection_INTERFACE_DEFINED__

/* interface ILongsCollection */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ILongsCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001037-0000-1056-976E-008048D53AE3")
    ILongsCollection : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Element( 
            /* [in] */ long Index,
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ long Value,
            /* [in] */ long Index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ long Index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveAll( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ ILongsCollection *From) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ILongsCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ILongsCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ILongsCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ILongsCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ILongsCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ILongsCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ILongsCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ILongsCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            ILongsCollection * This,
            /* [in] */ long Index,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Element )( 
            ILongsCollection * This,
            /* [in] */ long Index,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ILongsCollection * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ILongsCollection * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ILongsCollection * This,
            /* [in] */ long Index,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            ILongsCollection * This,
            /* [in] */ long Value,
            /* [in] */ long Index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            ILongsCollection * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            ILongsCollection * This,
            /* [in] */ long Index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAll )( 
            ILongsCollection * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            ILongsCollection * This,
            /* [in] */ ILongsCollection *From);
        
        END_INTERFACE
    } ILongsCollectionVtbl;

    interface ILongsCollection
    {
        CONST_VTBL struct ILongsCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ILongsCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ILongsCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ILongsCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ILongsCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ILongsCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ILongsCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ILongsCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ILongsCollection_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define ILongsCollection_put_Element(This,Index,Value)	\
    ( (This)->lpVtbl -> put_Element(This,Index,Value) ) 

#define ILongsCollection_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ILongsCollection_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define ILongsCollection_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#define ILongsCollection_Insert(This,Value,Index)	\
    ( (This)->lpVtbl -> Insert(This,Value,Index) ) 

#define ILongsCollection_Add(This,Value)	\
    ( (This)->lpVtbl -> Add(This,Value) ) 

#define ILongsCollection_Remove(This,Index)	\
    ( (This)->lpVtbl -> Remove(This,Index) ) 

#define ILongsCollection_RemoveAll(This)	\
    ( (This)->lpVtbl -> RemoveAll(This) ) 

#define ILongsCollection_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ILongsCollection_INTERFACE_DEFINED__ */


#ifndef __ITableAnalysisParams_INTERFACE_DEFINED__
#define __ITableAnalysisParams_INTERFACE_DEFINED__

/* interface ITableAnalysisParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ITableAnalysisParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000101d-0000-1056-976E-008048D53AE3")
    ITableAnalysisParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SingleLinePerCell( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SingleLinePerCell( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SplitOnlyBySeparators( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SplitOnlyBySeparators( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ ITableAnalysisParams *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DetectCellsOrientation( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DetectCellsOrientation( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DetectCellsInversion( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DetectCellsInversion( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITableAnalysisParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITableAnalysisParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITableAnalysisParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITableAnalysisParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITableAnalysisParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITableAnalysisParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITableAnalysisParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITableAnalysisParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ITableAnalysisParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SingleLinePerCell )( 
            ITableAnalysisParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SingleLinePerCell )( 
            ITableAnalysisParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SplitOnlyBySeparators )( 
            ITableAnalysisParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SplitOnlyBySeparators )( 
            ITableAnalysisParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            ITableAnalysisParams * This,
            /* [in] */ ITableAnalysisParams *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            ITableAnalysisParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            ITableAnalysisParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            ITableAnalysisParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            ITableAnalysisParams * This,
            /* [in] */ long HGlobal);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DetectCellsOrientation )( 
            ITableAnalysisParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DetectCellsOrientation )( 
            ITableAnalysisParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DetectCellsInversion )( 
            ITableAnalysisParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DetectCellsInversion )( 
            ITableAnalysisParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        END_INTERFACE
    } ITableAnalysisParamsVtbl;

    interface ITableAnalysisParams
    {
        CONST_VTBL struct ITableAnalysisParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITableAnalysisParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITableAnalysisParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITableAnalysisParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITableAnalysisParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITableAnalysisParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITableAnalysisParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITableAnalysisParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITableAnalysisParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ITableAnalysisParams_get_SingleLinePerCell(This,Result)	\
    ( (This)->lpVtbl -> get_SingleLinePerCell(This,Result) ) 

#define ITableAnalysisParams_put_SingleLinePerCell(This,Value)	\
    ( (This)->lpVtbl -> put_SingleLinePerCell(This,Value) ) 

#define ITableAnalysisParams_get_SplitOnlyBySeparators(This,Result)	\
    ( (This)->lpVtbl -> get_SplitOnlyBySeparators(This,Result) ) 

#define ITableAnalysisParams_put_SplitOnlyBySeparators(This,Value)	\
    ( (This)->lpVtbl -> put_SplitOnlyBySeparators(This,Value) ) 

#define ITableAnalysisParams_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define ITableAnalysisParams_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define ITableAnalysisParams_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define ITableAnalysisParams_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define ITableAnalysisParams_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#define ITableAnalysisParams_get_DetectCellsOrientation(This,Result)	\
    ( (This)->lpVtbl -> get_DetectCellsOrientation(This,Result) ) 

#define ITableAnalysisParams_put_DetectCellsOrientation(This,Value)	\
    ( (This)->lpVtbl -> put_DetectCellsOrientation(This,Value) ) 

#define ITableAnalysisParams_get_DetectCellsInversion(This,Result)	\
    ( (This)->lpVtbl -> get_DetectCellsInversion(This,Result) ) 

#define ITableAnalysisParams_put_DetectCellsInversion(This,Value)	\
    ( (This)->lpVtbl -> put_DetectCellsInversion(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITableAnalysisParams_INTERFACE_DEFINED__ */


#ifndef __IOrientationDetectionParams_INTERFACE_DEFINED__
#define __IOrientationDetectionParams_INTERFACE_DEFINED__

/* interface IOrientationDetectionParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IOrientationDetectionParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010D7-0000-1056-976E-008048D53AE3")
    IOrientationDetectionParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_OrientationDetectionMode( 
            /* [retval][out] */ OrientationDetectionModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_OrientationDetectionMode( 
            /* [in] */ OrientationDetectionModeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ProhibitClockwiseRotation( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ProhibitClockwiseRotation( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ProhibitCounterclockwiseRotation( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ProhibitCounterclockwiseRotation( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ProhibitUpsidedownRotation( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ProhibitUpsidedownRotation( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IOrientationDetectionParams *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOrientationDetectionParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IOrientationDetectionParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IOrientationDetectionParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IOrientationDetectionParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IOrientationDetectionParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IOrientationDetectionParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IOrientationDetectionParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IOrientationDetectionParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IOrientationDetectionParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OrientationDetectionMode )( 
            IOrientationDetectionParams * This,
            /* [retval][out] */ OrientationDetectionModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OrientationDetectionMode )( 
            IOrientationDetectionParams * This,
            /* [in] */ OrientationDetectionModeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProhibitClockwiseRotation )( 
            IOrientationDetectionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ProhibitClockwiseRotation )( 
            IOrientationDetectionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProhibitCounterclockwiseRotation )( 
            IOrientationDetectionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ProhibitCounterclockwiseRotation )( 
            IOrientationDetectionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProhibitUpsidedownRotation )( 
            IOrientationDetectionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ProhibitUpsidedownRotation )( 
            IOrientationDetectionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IOrientationDetectionParams * This,
            /* [in] */ IOrientationDetectionParams *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IOrientationDetectionParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            IOrientationDetectionParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IOrientationDetectionParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            IOrientationDetectionParams * This,
            /* [in] */ long HGlobal);
        
        END_INTERFACE
    } IOrientationDetectionParamsVtbl;

    interface IOrientationDetectionParams
    {
        CONST_VTBL struct IOrientationDetectionParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOrientationDetectionParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IOrientationDetectionParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IOrientationDetectionParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IOrientationDetectionParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IOrientationDetectionParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IOrientationDetectionParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IOrientationDetectionParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IOrientationDetectionParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IOrientationDetectionParams_get_OrientationDetectionMode(This,Result)	\
    ( (This)->lpVtbl -> get_OrientationDetectionMode(This,Result) ) 

#define IOrientationDetectionParams_put_OrientationDetectionMode(This,Value)	\
    ( (This)->lpVtbl -> put_OrientationDetectionMode(This,Value) ) 

#define IOrientationDetectionParams_get_ProhibitClockwiseRotation(This,Result)	\
    ( (This)->lpVtbl -> get_ProhibitClockwiseRotation(This,Result) ) 

#define IOrientationDetectionParams_put_ProhibitClockwiseRotation(This,Value)	\
    ( (This)->lpVtbl -> put_ProhibitClockwiseRotation(This,Value) ) 

#define IOrientationDetectionParams_get_ProhibitCounterclockwiseRotation(This,Result)	\
    ( (This)->lpVtbl -> get_ProhibitCounterclockwiseRotation(This,Result) ) 

#define IOrientationDetectionParams_put_ProhibitCounterclockwiseRotation(This,Value)	\
    ( (This)->lpVtbl -> put_ProhibitCounterclockwiseRotation(This,Value) ) 

#define IOrientationDetectionParams_get_ProhibitUpsidedownRotation(This,Result)	\
    ( (This)->lpVtbl -> get_ProhibitUpsidedownRotation(This,Result) ) 

#define IOrientationDetectionParams_put_ProhibitUpsidedownRotation(This,Value)	\
    ( (This)->lpVtbl -> put_ProhibitUpsidedownRotation(This,Value) ) 

#define IOrientationDetectionParams_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IOrientationDetectionParams_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define IOrientationDetectionParams_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define IOrientationDetectionParams_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IOrientationDetectionParams_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IOrientationDetectionParams_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_OrientationDetectionParams;

#ifdef __cplusplus

class DECLSPEC_UUID("100020C1-0000-1056-976E-008048D53AE3")
OrientationDetectionParams;
#endif

#ifndef __IPageAnalysisParams_INTERFACE_DEFINED__
#define __IPageAnalysisParams_INTERFACE_DEFINED__

/* interface IPageAnalysisParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IPageAnalysisParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000101c-0000-1056-976E-008048D53AE3")
    IPageAnalysisParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DetectTables( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DetectTables( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TableAnalysisParams( 
            /* [retval][out] */ ITableAnalysisParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TableAnalysisParams( 
            /* [in] */ ITableAnalysisParams *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DetectPictures( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DetectPictures( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DetectSeparators( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DetectSeparators( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DetectVectorGraphics( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DetectVectorGraphics( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ProhibitModelAnalysis( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ProhibitModelAnalysis( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SingleColumnMode( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SingleColumnMode( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NoShadowsMode( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_NoShadowsMode( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ProhibitDoublePageMode( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ProhibitDoublePageMode( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IPageAnalysisParams *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_CollectPdfExportData( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput][hidden] */ HRESULT STDMETHODCALLTYPE put_CollectPdfExportData( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPageAnalysisParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPageAnalysisParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPageAnalysisParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPageAnalysisParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPageAnalysisParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPageAnalysisParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPageAnalysisParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPageAnalysisParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPageAnalysisParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DetectTables )( 
            IPageAnalysisParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DetectTables )( 
            IPageAnalysisParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TableAnalysisParams )( 
            IPageAnalysisParams * This,
            /* [retval][out] */ ITableAnalysisParams **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TableAnalysisParams )( 
            IPageAnalysisParams * This,
            /* [in] */ ITableAnalysisParams *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DetectPictures )( 
            IPageAnalysisParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DetectPictures )( 
            IPageAnalysisParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DetectSeparators )( 
            IPageAnalysisParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DetectSeparators )( 
            IPageAnalysisParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DetectVectorGraphics )( 
            IPageAnalysisParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DetectVectorGraphics )( 
            IPageAnalysisParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProhibitModelAnalysis )( 
            IPageAnalysisParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ProhibitModelAnalysis )( 
            IPageAnalysisParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SingleColumnMode )( 
            IPageAnalysisParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SingleColumnMode )( 
            IPageAnalysisParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NoShadowsMode )( 
            IPageAnalysisParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NoShadowsMode )( 
            IPageAnalysisParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProhibitDoublePageMode )( 
            IPageAnalysisParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ProhibitDoublePageMode )( 
            IPageAnalysisParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IPageAnalysisParams * This,
            /* [in] */ IPageAnalysisParams *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IPageAnalysisParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            IPageAnalysisParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IPageAnalysisParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            IPageAnalysisParams * This,
            /* [in] */ long HGlobal);
        
        /* [helpstring][helpcontext][id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_CollectPdfExportData )( 
            IPageAnalysisParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput][hidden] */ HRESULT ( STDMETHODCALLTYPE *put_CollectPdfExportData )( 
            IPageAnalysisParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        END_INTERFACE
    } IPageAnalysisParamsVtbl;

    interface IPageAnalysisParams
    {
        CONST_VTBL struct IPageAnalysisParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPageAnalysisParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPageAnalysisParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPageAnalysisParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPageAnalysisParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPageAnalysisParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPageAnalysisParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPageAnalysisParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPageAnalysisParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IPageAnalysisParams_get_DetectTables(This,Result)	\
    ( (This)->lpVtbl -> get_DetectTables(This,Result) ) 

#define IPageAnalysisParams_put_DetectTables(This,Value)	\
    ( (This)->lpVtbl -> put_DetectTables(This,Value) ) 

#define IPageAnalysisParams_get_TableAnalysisParams(This,Result)	\
    ( (This)->lpVtbl -> get_TableAnalysisParams(This,Result) ) 

#define IPageAnalysisParams_put_TableAnalysisParams(This,Value)	\
    ( (This)->lpVtbl -> put_TableAnalysisParams(This,Value) ) 

#define IPageAnalysisParams_get_DetectPictures(This,Result)	\
    ( (This)->lpVtbl -> get_DetectPictures(This,Result) ) 

#define IPageAnalysisParams_put_DetectPictures(This,Value)	\
    ( (This)->lpVtbl -> put_DetectPictures(This,Value) ) 

#define IPageAnalysisParams_get_DetectSeparators(This,Result)	\
    ( (This)->lpVtbl -> get_DetectSeparators(This,Result) ) 

#define IPageAnalysisParams_put_DetectSeparators(This,Value)	\
    ( (This)->lpVtbl -> put_DetectSeparators(This,Value) ) 

#define IPageAnalysisParams_get_DetectVectorGraphics(This,Result)	\
    ( (This)->lpVtbl -> get_DetectVectorGraphics(This,Result) ) 

#define IPageAnalysisParams_put_DetectVectorGraphics(This,Value)	\
    ( (This)->lpVtbl -> put_DetectVectorGraphics(This,Value) ) 

#define IPageAnalysisParams_get_ProhibitModelAnalysis(This,Result)	\
    ( (This)->lpVtbl -> get_ProhibitModelAnalysis(This,Result) ) 

#define IPageAnalysisParams_put_ProhibitModelAnalysis(This,Value)	\
    ( (This)->lpVtbl -> put_ProhibitModelAnalysis(This,Value) ) 

#define IPageAnalysisParams_get_SingleColumnMode(This,Result)	\
    ( (This)->lpVtbl -> get_SingleColumnMode(This,Result) ) 

#define IPageAnalysisParams_put_SingleColumnMode(This,Value)	\
    ( (This)->lpVtbl -> put_SingleColumnMode(This,Value) ) 

#define IPageAnalysisParams_get_NoShadowsMode(This,Result)	\
    ( (This)->lpVtbl -> get_NoShadowsMode(This,Result) ) 

#define IPageAnalysisParams_put_NoShadowsMode(This,Value)	\
    ( (This)->lpVtbl -> put_NoShadowsMode(This,Value) ) 

#define IPageAnalysisParams_get_ProhibitDoublePageMode(This,Result)	\
    ( (This)->lpVtbl -> get_ProhibitDoublePageMode(This,Result) ) 

#define IPageAnalysisParams_put_ProhibitDoublePageMode(This,Value)	\
    ( (This)->lpVtbl -> put_ProhibitDoublePageMode(This,Value) ) 

#define IPageAnalysisParams_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IPageAnalysisParams_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define IPageAnalysisParams_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define IPageAnalysisParams_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IPageAnalysisParams_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#define IPageAnalysisParams_get_CollectPdfExportData(This,Result)	\
    ( (This)->lpVtbl -> get_CollectPdfExportData(This,Result) ) 

#define IPageAnalysisParams_put_CollectPdfExportData(This,Value)	\
    ( (This)->lpVtbl -> put_CollectPdfExportData(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPageAnalysisParams_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_PageAnalysisParams;

#ifdef __cplusplus

class DECLSPEC_UUID("1000201d-0000-1056-976E-008048D53AE3")
PageAnalysisParams;
#endif

EXTERN_C const CLSID CLSID_TableAnalysisParams;

#ifdef __cplusplus

class DECLSPEC_UUID("1000201e-0000-1056-976E-008048D53AE3")
TableAnalysisParams;
#endif

#ifndef __IRecognizerExtendedParams_INTERFACE_DEFINED__
#define __IRecognizerExtendedParams_INTERFACE_DEFINED__

/* interface IRecognizerExtendedParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IRecognizerExtendedParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010DD-0000-1056-976E-008048D53AE3")
    IRecognizerExtendedParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IRecognizerExtendedParams *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
        virtual /* [helpstring][helpcontext][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_SaveLinearDivisionGraphs( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_SaveLinearDivisionGraphs( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_Version6Mode( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_Version6Mode( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_UsePureCjkAlphabets( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_UsePureCjkAlphabets( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_DisableLineAgreement( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_DisableLineAgreement( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_DisableContextSuggest( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_DisableContextSuggest( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_DisableLeftContextTranslations( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_DisableLeftContextTranslations( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_DisableDeepContextVariantsGeneration( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_DisableDeepContextVariantsGeneration( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_DisableSecondStageRecognizer( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_DisableSecondStageRecognizer( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_SimpleItalicProcessing( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_SimpleItalicProcessing( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_DisableStructClassifier( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_DisableStructClassifier( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_LimitStructClassifier( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_LimitStructClassifier( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_DisableOpenBoundProcessing( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_DisableOpenBoundProcessing( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_LimitOmnifontClassifier( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_LimitOmnifontClassifier( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_LimitCharGLD( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_LimitCharGLD( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_DisableGrayImage( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_DisableGrayImage( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_DisableBinarizationHypothesis( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_DisableBinarizationHypothesis( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_DisableStrokeCorrectionHypothesis( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_DisableStrokeCorrectionHypothesis( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_DisableFatGLDHypothesis( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_DisableFatGLDHypothesis( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_LimitFatGLDHypothesis( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_LimitFatGLDHypothesis( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_DisableStretchHypothesis( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_DisableStretchHypothesis( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_DisableMultifragmentHypothesis( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_DisableMultifragmentHypothesis( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_DisableContextItalicDetection( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_DisableContextItalicDetection( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_KeepCacheBetweenPages( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_KeepCacheBetweenPages( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRecognizerExtendedParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRecognizerExtendedParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRecognizerExtendedParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRecognizerExtendedParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRecognizerExtendedParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRecognizerExtendedParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRecognizerExtendedParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRecognizerExtendedParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IRecognizerExtendedParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IRecognizerExtendedParams * This,
            /* [in] */ IRecognizerExtendedParams *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IRecognizerExtendedParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            IRecognizerExtendedParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IRecognizerExtendedParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            IRecognizerExtendedParams * This,
            /* [in] */ long HGlobal);
        
        /* [helpstring][helpcontext][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SaveLinearDivisionGraphs )( 
            IRecognizerExtendedParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SaveLinearDivisionGraphs )( 
            IRecognizerExtendedParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Version6Mode )( 
            IRecognizerExtendedParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Version6Mode )( 
            IRecognizerExtendedParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UsePureCjkAlphabets )( 
            IRecognizerExtendedParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UsePureCjkAlphabets )( 
            IRecognizerExtendedParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DisableLineAgreement )( 
            IRecognizerExtendedParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DisableLineAgreement )( 
            IRecognizerExtendedParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DisableContextSuggest )( 
            IRecognizerExtendedParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DisableContextSuggest )( 
            IRecognizerExtendedParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DisableLeftContextTranslations )( 
            IRecognizerExtendedParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DisableLeftContextTranslations )( 
            IRecognizerExtendedParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DisableDeepContextVariantsGeneration )( 
            IRecognizerExtendedParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DisableDeepContextVariantsGeneration )( 
            IRecognizerExtendedParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DisableSecondStageRecognizer )( 
            IRecognizerExtendedParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DisableSecondStageRecognizer )( 
            IRecognizerExtendedParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SimpleItalicProcessing )( 
            IRecognizerExtendedParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SimpleItalicProcessing )( 
            IRecognizerExtendedParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DisableStructClassifier )( 
            IRecognizerExtendedParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DisableStructClassifier )( 
            IRecognizerExtendedParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LimitStructClassifier )( 
            IRecognizerExtendedParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LimitStructClassifier )( 
            IRecognizerExtendedParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DisableOpenBoundProcessing )( 
            IRecognizerExtendedParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DisableOpenBoundProcessing )( 
            IRecognizerExtendedParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LimitOmnifontClassifier )( 
            IRecognizerExtendedParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LimitOmnifontClassifier )( 
            IRecognizerExtendedParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LimitCharGLD )( 
            IRecognizerExtendedParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LimitCharGLD )( 
            IRecognizerExtendedParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DisableGrayImage )( 
            IRecognizerExtendedParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DisableGrayImage )( 
            IRecognizerExtendedParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DisableBinarizationHypothesis )( 
            IRecognizerExtendedParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DisableBinarizationHypothesis )( 
            IRecognizerExtendedParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DisableStrokeCorrectionHypothesis )( 
            IRecognizerExtendedParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DisableStrokeCorrectionHypothesis )( 
            IRecognizerExtendedParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DisableFatGLDHypothesis )( 
            IRecognizerExtendedParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DisableFatGLDHypothesis )( 
            IRecognizerExtendedParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LimitFatGLDHypothesis )( 
            IRecognizerExtendedParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LimitFatGLDHypothesis )( 
            IRecognizerExtendedParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DisableStretchHypothesis )( 
            IRecognizerExtendedParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DisableStretchHypothesis )( 
            IRecognizerExtendedParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DisableMultifragmentHypothesis )( 
            IRecognizerExtendedParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DisableMultifragmentHypothesis )( 
            IRecognizerExtendedParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DisableContextItalicDetection )( 
            IRecognizerExtendedParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DisableContextItalicDetection )( 
            IRecognizerExtendedParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_KeepCacheBetweenPages )( 
            IRecognizerExtendedParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_KeepCacheBetweenPages )( 
            IRecognizerExtendedParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        END_INTERFACE
    } IRecognizerExtendedParamsVtbl;

    interface IRecognizerExtendedParams
    {
        CONST_VTBL struct IRecognizerExtendedParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRecognizerExtendedParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRecognizerExtendedParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRecognizerExtendedParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRecognizerExtendedParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRecognizerExtendedParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRecognizerExtendedParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRecognizerExtendedParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRecognizerExtendedParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IRecognizerExtendedParams_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IRecognizerExtendedParams_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define IRecognizerExtendedParams_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define IRecognizerExtendedParams_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IRecognizerExtendedParams_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#define IRecognizerExtendedParams_get_SaveLinearDivisionGraphs(This,Result)	\
    ( (This)->lpVtbl -> get_SaveLinearDivisionGraphs(This,Result) ) 

#define IRecognizerExtendedParams_put_SaveLinearDivisionGraphs(This,Value)	\
    ( (This)->lpVtbl -> put_SaveLinearDivisionGraphs(This,Value) ) 

#define IRecognizerExtendedParams_get_Version6Mode(This,Result)	\
    ( (This)->lpVtbl -> get_Version6Mode(This,Result) ) 

#define IRecognizerExtendedParams_put_Version6Mode(This,Value)	\
    ( (This)->lpVtbl -> put_Version6Mode(This,Value) ) 

#define IRecognizerExtendedParams_get_UsePureCjkAlphabets(This,Result)	\
    ( (This)->lpVtbl -> get_UsePureCjkAlphabets(This,Result) ) 

#define IRecognizerExtendedParams_put_UsePureCjkAlphabets(This,Value)	\
    ( (This)->lpVtbl -> put_UsePureCjkAlphabets(This,Value) ) 

#define IRecognizerExtendedParams_put_DisableLineAgreement(This,Value)	\
    ( (This)->lpVtbl -> put_DisableLineAgreement(This,Value) ) 

#define IRecognizerExtendedParams_get_DisableLineAgreement(This,Result)	\
    ( (This)->lpVtbl -> get_DisableLineAgreement(This,Result) ) 

#define IRecognizerExtendedParams_put_DisableContextSuggest(This,Value)	\
    ( (This)->lpVtbl -> put_DisableContextSuggest(This,Value) ) 

#define IRecognizerExtendedParams_get_DisableContextSuggest(This,Result)	\
    ( (This)->lpVtbl -> get_DisableContextSuggest(This,Result) ) 

#define IRecognizerExtendedParams_put_DisableLeftContextTranslations(This,Value)	\
    ( (This)->lpVtbl -> put_DisableLeftContextTranslations(This,Value) ) 

#define IRecognizerExtendedParams_get_DisableLeftContextTranslations(This,Result)	\
    ( (This)->lpVtbl -> get_DisableLeftContextTranslations(This,Result) ) 

#define IRecognizerExtendedParams_put_DisableDeepContextVariantsGeneration(This,Value)	\
    ( (This)->lpVtbl -> put_DisableDeepContextVariantsGeneration(This,Value) ) 

#define IRecognizerExtendedParams_get_DisableDeepContextVariantsGeneration(This,Result)	\
    ( (This)->lpVtbl -> get_DisableDeepContextVariantsGeneration(This,Result) ) 

#define IRecognizerExtendedParams_put_DisableSecondStageRecognizer(This,Value)	\
    ( (This)->lpVtbl -> put_DisableSecondStageRecognizer(This,Value) ) 

#define IRecognizerExtendedParams_get_DisableSecondStageRecognizer(This,Result)	\
    ( (This)->lpVtbl -> get_DisableSecondStageRecognizer(This,Result) ) 

#define IRecognizerExtendedParams_put_SimpleItalicProcessing(This,Value)	\
    ( (This)->lpVtbl -> put_SimpleItalicProcessing(This,Value) ) 

#define IRecognizerExtendedParams_get_SimpleItalicProcessing(This,Result)	\
    ( (This)->lpVtbl -> get_SimpleItalicProcessing(This,Result) ) 

#define IRecognizerExtendedParams_put_DisableStructClassifier(This,Value)	\
    ( (This)->lpVtbl -> put_DisableStructClassifier(This,Value) ) 

#define IRecognizerExtendedParams_get_DisableStructClassifier(This,Result)	\
    ( (This)->lpVtbl -> get_DisableStructClassifier(This,Result) ) 

#define IRecognizerExtendedParams_put_LimitStructClassifier(This,Value)	\
    ( (This)->lpVtbl -> put_LimitStructClassifier(This,Value) ) 

#define IRecognizerExtendedParams_get_LimitStructClassifier(This,Result)	\
    ( (This)->lpVtbl -> get_LimitStructClassifier(This,Result) ) 

#define IRecognizerExtendedParams_put_DisableOpenBoundProcessing(This,Value)	\
    ( (This)->lpVtbl -> put_DisableOpenBoundProcessing(This,Value) ) 

#define IRecognizerExtendedParams_get_DisableOpenBoundProcessing(This,Result)	\
    ( (This)->lpVtbl -> get_DisableOpenBoundProcessing(This,Result) ) 

#define IRecognizerExtendedParams_put_LimitOmnifontClassifier(This,Value)	\
    ( (This)->lpVtbl -> put_LimitOmnifontClassifier(This,Value) ) 

#define IRecognizerExtendedParams_get_LimitOmnifontClassifier(This,Result)	\
    ( (This)->lpVtbl -> get_LimitOmnifontClassifier(This,Result) ) 

#define IRecognizerExtendedParams_put_LimitCharGLD(This,Value)	\
    ( (This)->lpVtbl -> put_LimitCharGLD(This,Value) ) 

#define IRecognizerExtendedParams_get_LimitCharGLD(This,Result)	\
    ( (This)->lpVtbl -> get_LimitCharGLD(This,Result) ) 

#define IRecognizerExtendedParams_put_DisableGrayImage(This,Value)	\
    ( (This)->lpVtbl -> put_DisableGrayImage(This,Value) ) 

#define IRecognizerExtendedParams_get_DisableGrayImage(This,Result)	\
    ( (This)->lpVtbl -> get_DisableGrayImage(This,Result) ) 

#define IRecognizerExtendedParams_put_DisableBinarizationHypothesis(This,Value)	\
    ( (This)->lpVtbl -> put_DisableBinarizationHypothesis(This,Value) ) 

#define IRecognizerExtendedParams_get_DisableBinarizationHypothesis(This,Result)	\
    ( (This)->lpVtbl -> get_DisableBinarizationHypothesis(This,Result) ) 

#define IRecognizerExtendedParams_put_DisableStrokeCorrectionHypothesis(This,Value)	\
    ( (This)->lpVtbl -> put_DisableStrokeCorrectionHypothesis(This,Value) ) 

#define IRecognizerExtendedParams_get_DisableStrokeCorrectionHypothesis(This,Result)	\
    ( (This)->lpVtbl -> get_DisableStrokeCorrectionHypothesis(This,Result) ) 

#define IRecognizerExtendedParams_put_DisableFatGLDHypothesis(This,Value)	\
    ( (This)->lpVtbl -> put_DisableFatGLDHypothesis(This,Value) ) 

#define IRecognizerExtendedParams_get_DisableFatGLDHypothesis(This,Result)	\
    ( (This)->lpVtbl -> get_DisableFatGLDHypothesis(This,Result) ) 

#define IRecognizerExtendedParams_put_LimitFatGLDHypothesis(This,Value)	\
    ( (This)->lpVtbl -> put_LimitFatGLDHypothesis(This,Value) ) 

#define IRecognizerExtendedParams_get_LimitFatGLDHypothesis(This,Result)	\
    ( (This)->lpVtbl -> get_LimitFatGLDHypothesis(This,Result) ) 

#define IRecognizerExtendedParams_put_DisableStretchHypothesis(This,Value)	\
    ( (This)->lpVtbl -> put_DisableStretchHypothesis(This,Value) ) 

#define IRecognizerExtendedParams_get_DisableStretchHypothesis(This,Result)	\
    ( (This)->lpVtbl -> get_DisableStretchHypothesis(This,Result) ) 

#define IRecognizerExtendedParams_put_DisableMultifragmentHypothesis(This,Value)	\
    ( (This)->lpVtbl -> put_DisableMultifragmentHypothesis(This,Value) ) 

#define IRecognizerExtendedParams_get_DisableMultifragmentHypothesis(This,Result)	\
    ( (This)->lpVtbl -> get_DisableMultifragmentHypothesis(This,Result) ) 

#define IRecognizerExtendedParams_put_DisableContextItalicDetection(This,Value)	\
    ( (This)->lpVtbl -> put_DisableContextItalicDetection(This,Value) ) 

#define IRecognizerExtendedParams_get_DisableContextItalicDetection(This,Result)	\
    ( (This)->lpVtbl -> get_DisableContextItalicDetection(This,Result) ) 

#define IRecognizerExtendedParams_put_KeepCacheBetweenPages(This,Value)	\
    ( (This)->lpVtbl -> put_KeepCacheBetweenPages(This,Value) ) 

#define IRecognizerExtendedParams_get_KeepCacheBetweenPages(This,Result)	\
    ( (This)->lpVtbl -> get_KeepCacheBetweenPages(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRecognizerExtendedParams_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_RecognizerExtendedParams;

#ifdef __cplusplus

class DECLSPEC_UUID("100020C5-0000-1056-976E-008048D53AE3")
RecognizerExtendedParams;
#endif

#ifndef __IRecognizerParams_INTERFACE_DEFINED__
#define __IRecognizerParams_INTERFACE_DEFINED__

/* interface IRecognizerParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IRecognizerParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000101e-0000-1056-976E-008048D53AE3")
    IRecognizerParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_OneWordPerLine( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_OneWordPerLine( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_OneLinePerBlock( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_OneLinePerBlock( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ProhibitSuperscript( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ProhibitSuperscript( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ProhibitSubscript( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ProhibitSubscript( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ProhibitItalic( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ProhibitItalic( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ProhibitHyphenation( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ProhibitHyphenation( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FastMode( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FastMode( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UseBuiltInPatterns( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_UseBuiltInPatterns( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ProhibitInterblockHyphenation( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ProhibitInterblockHyphenation( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TextType( 
            /* [retval][out] */ TextTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TextType( 
            /* [in] */ TextTypeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TextLanguage( 
            /* [retval][out] */ ITextLanguage **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propputref] */ HRESULT STDMETHODCALLTYPE putref_TextLanguage( 
            /* [in] */ ITextLanguage *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CaseRecognitionMode( 
            /* [retval][out] */ CaseRecognitionModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CaseRecognitionMode( 
            /* [in] */ CaseRecognitionModeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FieldMarkingType( 
            /* [retval][out] */ FieldMarkingTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FieldMarkingType( 
            /* [in] */ FieldMarkingTypeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CellsCount( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CellsCount( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WritingStyle( 
            /* [retval][out] */ WritingStyleEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WritingStyle( 
            /* [in] */ WritingStyleEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UserPatternsFile( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_UserPatternsFile( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ErrorHiliteLevel( 
            /* [retval][out] */ ErrorHiliteLevelEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ErrorHiliteLevel( 
            /* [in] */ ErrorHiliteLevelEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IRecognizerParams *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetPredefinedTextLanguage( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TrainUserPatterns( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TrainUserPatterns( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PossibleTextTypes( 
            /* [retval][out] */ ILongsCollection **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PossibleTextTypes( 
            /* [in] */ ILongsCollection *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CJKTextDirection( 
            /* [retval][out] */ CJKTextDirectionEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CJKTextDirection( 
            /* [in] */ CJKTextDirectionEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SaveCharacterRecognitionVariants( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SaveCharacterRecognitionVariants( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SaveWordRecognitionVariants( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SaveWordRecognitionVariants( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BalancedMode( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BalancedMode( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ExactConfidenceCalculation( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ExactConfidenceCalculation( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SaveCharacterRegions( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SaveCharacterRegions( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TextTypes( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TextTypes( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LowResolutionMode( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_LowResolutionMode( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_RecognizerExtendedParams( 
            /* [retval][out] */ IRecognizerExtendedParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_RecognizerExtendedParams( 
            /* [in] */ IRecognizerExtendedParams *Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRecognizerParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRecognizerParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRecognizerParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRecognizerParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRecognizerParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRecognizerParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRecognizerParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRecognizerParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IRecognizerParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OneWordPerLine )( 
            IRecognizerParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OneWordPerLine )( 
            IRecognizerParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OneLinePerBlock )( 
            IRecognizerParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OneLinePerBlock )( 
            IRecognizerParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProhibitSuperscript )( 
            IRecognizerParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ProhibitSuperscript )( 
            IRecognizerParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProhibitSubscript )( 
            IRecognizerParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ProhibitSubscript )( 
            IRecognizerParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProhibitItalic )( 
            IRecognizerParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ProhibitItalic )( 
            IRecognizerParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProhibitHyphenation )( 
            IRecognizerParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ProhibitHyphenation )( 
            IRecognizerParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FastMode )( 
            IRecognizerParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FastMode )( 
            IRecognizerParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UseBuiltInPatterns )( 
            IRecognizerParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UseBuiltInPatterns )( 
            IRecognizerParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProhibitInterblockHyphenation )( 
            IRecognizerParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ProhibitInterblockHyphenation )( 
            IRecognizerParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TextType )( 
            IRecognizerParams * This,
            /* [retval][out] */ TextTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TextType )( 
            IRecognizerParams * This,
            /* [in] */ TextTypeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TextLanguage )( 
            IRecognizerParams * This,
            /* [retval][out] */ ITextLanguage **Result);
        
        /* [helpstring][helpcontext][id][propputref] */ HRESULT ( STDMETHODCALLTYPE *putref_TextLanguage )( 
            IRecognizerParams * This,
            /* [in] */ ITextLanguage *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CaseRecognitionMode )( 
            IRecognizerParams * This,
            /* [retval][out] */ CaseRecognitionModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CaseRecognitionMode )( 
            IRecognizerParams * This,
            /* [in] */ CaseRecognitionModeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FieldMarkingType )( 
            IRecognizerParams * This,
            /* [retval][out] */ FieldMarkingTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FieldMarkingType )( 
            IRecognizerParams * This,
            /* [in] */ FieldMarkingTypeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CellsCount )( 
            IRecognizerParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CellsCount )( 
            IRecognizerParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WritingStyle )( 
            IRecognizerParams * This,
            /* [retval][out] */ WritingStyleEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WritingStyle )( 
            IRecognizerParams * This,
            /* [in] */ WritingStyleEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserPatternsFile )( 
            IRecognizerParams * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UserPatternsFile )( 
            IRecognizerParams * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ErrorHiliteLevel )( 
            IRecognizerParams * This,
            /* [retval][out] */ ErrorHiliteLevelEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ErrorHiliteLevel )( 
            IRecognizerParams * This,
            /* [in] */ ErrorHiliteLevelEnum Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IRecognizerParams * This,
            /* [in] */ IRecognizerParams *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetPredefinedTextLanguage )( 
            IRecognizerParams * This,
            /* [in] */ BSTR Name);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IRecognizerParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            IRecognizerParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IRecognizerParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            IRecognizerParams * This,
            /* [in] */ long HGlobal);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TrainUserPatterns )( 
            IRecognizerParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TrainUserPatterns )( 
            IRecognizerParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PossibleTextTypes )( 
            IRecognizerParams * This,
            /* [retval][out] */ ILongsCollection **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PossibleTextTypes )( 
            IRecognizerParams * This,
            /* [in] */ ILongsCollection *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CJKTextDirection )( 
            IRecognizerParams * This,
            /* [retval][out] */ CJKTextDirectionEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CJKTextDirection )( 
            IRecognizerParams * This,
            /* [in] */ CJKTextDirectionEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SaveCharacterRecognitionVariants )( 
            IRecognizerParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SaveCharacterRecognitionVariants )( 
            IRecognizerParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SaveWordRecognitionVariants )( 
            IRecognizerParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SaveWordRecognitionVariants )( 
            IRecognizerParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BalancedMode )( 
            IRecognizerParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BalancedMode )( 
            IRecognizerParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExactConfidenceCalculation )( 
            IRecognizerParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ExactConfidenceCalculation )( 
            IRecognizerParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SaveCharacterRegions )( 
            IRecognizerParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SaveCharacterRegions )( 
            IRecognizerParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TextTypes )( 
            IRecognizerParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TextTypes )( 
            IRecognizerParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LowResolutionMode )( 
            IRecognizerParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LowResolutionMode )( 
            IRecognizerParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RecognizerExtendedParams )( 
            IRecognizerParams * This,
            /* [retval][out] */ IRecognizerExtendedParams **Result);
        
        /* [helpstring][helpcontext][hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RecognizerExtendedParams )( 
            IRecognizerParams * This,
            /* [in] */ IRecognizerExtendedParams *Value);
        
        END_INTERFACE
    } IRecognizerParamsVtbl;

    interface IRecognizerParams
    {
        CONST_VTBL struct IRecognizerParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRecognizerParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRecognizerParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRecognizerParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRecognizerParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRecognizerParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRecognizerParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRecognizerParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRecognizerParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IRecognizerParams_get_OneWordPerLine(This,Result)	\
    ( (This)->lpVtbl -> get_OneWordPerLine(This,Result) ) 

#define IRecognizerParams_put_OneWordPerLine(This,Value)	\
    ( (This)->lpVtbl -> put_OneWordPerLine(This,Value) ) 

#define IRecognizerParams_get_OneLinePerBlock(This,Result)	\
    ( (This)->lpVtbl -> get_OneLinePerBlock(This,Result) ) 

#define IRecognizerParams_put_OneLinePerBlock(This,Value)	\
    ( (This)->lpVtbl -> put_OneLinePerBlock(This,Value) ) 

#define IRecognizerParams_get_ProhibitSuperscript(This,Result)	\
    ( (This)->lpVtbl -> get_ProhibitSuperscript(This,Result) ) 

#define IRecognizerParams_put_ProhibitSuperscript(This,Value)	\
    ( (This)->lpVtbl -> put_ProhibitSuperscript(This,Value) ) 

#define IRecognizerParams_get_ProhibitSubscript(This,Result)	\
    ( (This)->lpVtbl -> get_ProhibitSubscript(This,Result) ) 

#define IRecognizerParams_put_ProhibitSubscript(This,Value)	\
    ( (This)->lpVtbl -> put_ProhibitSubscript(This,Value) ) 

#define IRecognizerParams_get_ProhibitItalic(This,Result)	\
    ( (This)->lpVtbl -> get_ProhibitItalic(This,Result) ) 

#define IRecognizerParams_put_ProhibitItalic(This,Value)	\
    ( (This)->lpVtbl -> put_ProhibitItalic(This,Value) ) 

#define IRecognizerParams_get_ProhibitHyphenation(This,Result)	\
    ( (This)->lpVtbl -> get_ProhibitHyphenation(This,Result) ) 

#define IRecognizerParams_put_ProhibitHyphenation(This,Value)	\
    ( (This)->lpVtbl -> put_ProhibitHyphenation(This,Value) ) 

#define IRecognizerParams_get_FastMode(This,Result)	\
    ( (This)->lpVtbl -> get_FastMode(This,Result) ) 

#define IRecognizerParams_put_FastMode(This,Value)	\
    ( (This)->lpVtbl -> put_FastMode(This,Value) ) 

#define IRecognizerParams_get_UseBuiltInPatterns(This,Result)	\
    ( (This)->lpVtbl -> get_UseBuiltInPatterns(This,Result) ) 

#define IRecognizerParams_put_UseBuiltInPatterns(This,Value)	\
    ( (This)->lpVtbl -> put_UseBuiltInPatterns(This,Value) ) 

#define IRecognizerParams_get_ProhibitInterblockHyphenation(This,Result)	\
    ( (This)->lpVtbl -> get_ProhibitInterblockHyphenation(This,Result) ) 

#define IRecognizerParams_put_ProhibitInterblockHyphenation(This,Value)	\
    ( (This)->lpVtbl -> put_ProhibitInterblockHyphenation(This,Value) ) 

#define IRecognizerParams_get_TextType(This,Result)	\
    ( (This)->lpVtbl -> get_TextType(This,Result) ) 

#define IRecognizerParams_put_TextType(This,Value)	\
    ( (This)->lpVtbl -> put_TextType(This,Value) ) 

#define IRecognizerParams_get_TextLanguage(This,Result)	\
    ( (This)->lpVtbl -> get_TextLanguage(This,Result) ) 

#define IRecognizerParams_putref_TextLanguage(This,Value)	\
    ( (This)->lpVtbl -> putref_TextLanguage(This,Value) ) 

#define IRecognizerParams_get_CaseRecognitionMode(This,Result)	\
    ( (This)->lpVtbl -> get_CaseRecognitionMode(This,Result) ) 

#define IRecognizerParams_put_CaseRecognitionMode(This,Value)	\
    ( (This)->lpVtbl -> put_CaseRecognitionMode(This,Value) ) 

#define IRecognizerParams_get_FieldMarkingType(This,Result)	\
    ( (This)->lpVtbl -> get_FieldMarkingType(This,Result) ) 

#define IRecognizerParams_put_FieldMarkingType(This,Value)	\
    ( (This)->lpVtbl -> put_FieldMarkingType(This,Value) ) 

#define IRecognizerParams_get_CellsCount(This,Result)	\
    ( (This)->lpVtbl -> get_CellsCount(This,Result) ) 

#define IRecognizerParams_put_CellsCount(This,Value)	\
    ( (This)->lpVtbl -> put_CellsCount(This,Value) ) 

#define IRecognizerParams_get_WritingStyle(This,Result)	\
    ( (This)->lpVtbl -> get_WritingStyle(This,Result) ) 

#define IRecognizerParams_put_WritingStyle(This,Value)	\
    ( (This)->lpVtbl -> put_WritingStyle(This,Value) ) 

#define IRecognizerParams_get_UserPatternsFile(This,Result)	\
    ( (This)->lpVtbl -> get_UserPatternsFile(This,Result) ) 

#define IRecognizerParams_put_UserPatternsFile(This,Value)	\
    ( (This)->lpVtbl -> put_UserPatternsFile(This,Value) ) 

#define IRecognizerParams_get_ErrorHiliteLevel(This,Result)	\
    ( (This)->lpVtbl -> get_ErrorHiliteLevel(This,Result) ) 

#define IRecognizerParams_put_ErrorHiliteLevel(This,Value)	\
    ( (This)->lpVtbl -> put_ErrorHiliteLevel(This,Value) ) 

#define IRecognizerParams_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IRecognizerParams_SetPredefinedTextLanguage(This,Name)	\
    ( (This)->lpVtbl -> SetPredefinedTextLanguage(This,Name) ) 

#define IRecognizerParams_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define IRecognizerParams_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define IRecognizerParams_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IRecognizerParams_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#define IRecognizerParams_get_TrainUserPatterns(This,Result)	\
    ( (This)->lpVtbl -> get_TrainUserPatterns(This,Result) ) 

#define IRecognizerParams_put_TrainUserPatterns(This,Value)	\
    ( (This)->lpVtbl -> put_TrainUserPatterns(This,Value) ) 

#define IRecognizerParams_get_PossibleTextTypes(This,Result)	\
    ( (This)->lpVtbl -> get_PossibleTextTypes(This,Result) ) 

#define IRecognizerParams_put_PossibleTextTypes(This,Value)	\
    ( (This)->lpVtbl -> put_PossibleTextTypes(This,Value) ) 

#define IRecognizerParams_get_CJKTextDirection(This,Result)	\
    ( (This)->lpVtbl -> get_CJKTextDirection(This,Result) ) 

#define IRecognizerParams_put_CJKTextDirection(This,Value)	\
    ( (This)->lpVtbl -> put_CJKTextDirection(This,Value) ) 

#define IRecognizerParams_get_SaveCharacterRecognitionVariants(This,Result)	\
    ( (This)->lpVtbl -> get_SaveCharacterRecognitionVariants(This,Result) ) 

#define IRecognizerParams_put_SaveCharacterRecognitionVariants(This,Value)	\
    ( (This)->lpVtbl -> put_SaveCharacterRecognitionVariants(This,Value) ) 

#define IRecognizerParams_get_SaveWordRecognitionVariants(This,Result)	\
    ( (This)->lpVtbl -> get_SaveWordRecognitionVariants(This,Result) ) 

#define IRecognizerParams_put_SaveWordRecognitionVariants(This,Value)	\
    ( (This)->lpVtbl -> put_SaveWordRecognitionVariants(This,Value) ) 

#define IRecognizerParams_get_BalancedMode(This,Result)	\
    ( (This)->lpVtbl -> get_BalancedMode(This,Result) ) 

#define IRecognizerParams_put_BalancedMode(This,Value)	\
    ( (This)->lpVtbl -> put_BalancedMode(This,Value) ) 

#define IRecognizerParams_get_ExactConfidenceCalculation(This,Result)	\
    ( (This)->lpVtbl -> get_ExactConfidenceCalculation(This,Result) ) 

#define IRecognizerParams_put_ExactConfidenceCalculation(This,Value)	\
    ( (This)->lpVtbl -> put_ExactConfidenceCalculation(This,Value) ) 

#define IRecognizerParams_get_SaveCharacterRegions(This,Result)	\
    ( (This)->lpVtbl -> get_SaveCharacterRegions(This,Result) ) 

#define IRecognizerParams_put_SaveCharacterRegions(This,Value)	\
    ( (This)->lpVtbl -> put_SaveCharacterRegions(This,Value) ) 

#define IRecognizerParams_get_TextTypes(This,Result)	\
    ( (This)->lpVtbl -> get_TextTypes(This,Result) ) 

#define IRecognizerParams_put_TextTypes(This,Value)	\
    ( (This)->lpVtbl -> put_TextTypes(This,Value) ) 

#define IRecognizerParams_get_LowResolutionMode(This,Result)	\
    ( (This)->lpVtbl -> get_LowResolutionMode(This,Result) ) 

#define IRecognizerParams_put_LowResolutionMode(This,Value)	\
    ( (This)->lpVtbl -> put_LowResolutionMode(This,Value) ) 

#define IRecognizerParams_get_RecognizerExtendedParams(This,Result)	\
    ( (This)->lpVtbl -> get_RecognizerExtendedParams(This,Result) ) 

#define IRecognizerParams_put_RecognizerExtendedParams(This,Value)	\
    ( (This)->lpVtbl -> put_RecognizerExtendedParams(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRecognizerParams_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_RecognizerParams;

#ifdef __cplusplus

class DECLSPEC_UUID("1000201f-0000-1056-976E-008048D53AE3")
RecognizerParams;
#endif

#ifndef __IImageProcessingParams_INTERFACE_DEFINED__
#define __IImageProcessingParams_INTERFACE_DEFINED__

/* interface IImageProcessingParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IImageProcessingParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001020-0000-1056-976E-008048D53AE3")
    IImageProcessingParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MirrorImage( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_MirrorImage( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_InvertImage( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_InvertImage( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RotationType( 
            /* [retval][out] */ RotationTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RotationType( 
            /* [in] */ RotationTypeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IImageProcessingParams *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IImageProcessingParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IImageProcessingParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IImageProcessingParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IImageProcessingParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IImageProcessingParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IImageProcessingParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IImageProcessingParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IImageProcessingParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IImageProcessingParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MirrorImage )( 
            IImageProcessingParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MirrorImage )( 
            IImageProcessingParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_InvertImage )( 
            IImageProcessingParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_InvertImage )( 
            IImageProcessingParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RotationType )( 
            IImageProcessingParams * This,
            /* [retval][out] */ RotationTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RotationType )( 
            IImageProcessingParams * This,
            /* [in] */ RotationTypeEnum Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IImageProcessingParams * This,
            /* [in] */ IImageProcessingParams *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IImageProcessingParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            IImageProcessingParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IImageProcessingParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            IImageProcessingParams * This,
            /* [in] */ long HGlobal);
        
        END_INTERFACE
    } IImageProcessingParamsVtbl;

    interface IImageProcessingParams
    {
        CONST_VTBL struct IImageProcessingParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IImageProcessingParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IImageProcessingParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IImageProcessingParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IImageProcessingParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IImageProcessingParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IImageProcessingParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IImageProcessingParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IImageProcessingParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IImageProcessingParams_get_MirrorImage(This,Result)	\
    ( (This)->lpVtbl -> get_MirrorImage(This,Result) ) 

#define IImageProcessingParams_put_MirrorImage(This,Value)	\
    ( (This)->lpVtbl -> put_MirrorImage(This,Value) ) 

#define IImageProcessingParams_get_InvertImage(This,Result)	\
    ( (This)->lpVtbl -> get_InvertImage(This,Result) ) 

#define IImageProcessingParams_put_InvertImage(This,Value)	\
    ( (This)->lpVtbl -> put_InvertImage(This,Value) ) 

#define IImageProcessingParams_get_RotationType(This,Result)	\
    ( (This)->lpVtbl -> get_RotationType(This,Result) ) 

#define IImageProcessingParams_put_RotationType(This,Value)	\
    ( (This)->lpVtbl -> put_RotationType(This,Value) ) 

#define IImageProcessingParams_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IImageProcessingParams_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define IImageProcessingParams_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define IImageProcessingParams_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IImageProcessingParams_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IImageProcessingParams_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_ImageProcessingParams;

#ifdef __cplusplus

class DECLSPEC_UUID("10002021-0000-1056-976E-008048D53AE3")
ImageProcessingParams;
#endif

#ifndef __IDocumentStructureDetectionParams_INTERFACE_DEFINED__
#define __IDocumentStructureDetectionParams_INTERFACE_DEFINED__

/* interface IDocumentStructureDetectionParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IDocumentStructureDetectionParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010D6-0000-1056-976E-008048D53AE3")
    IDocumentStructureDetectionParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IDocumentStructureDetectionParams *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DetectRunningTitles( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DetectRunningTitles( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DetectFootnotes( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DetectFootnotes( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DetectCaptions( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DetectCaptions( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DetectColumns( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DetectColumns( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DetectTableOfContents( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DetectTableOfContents( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DetectOverflowingParagraphs( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DetectOverflowingParagraphs( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DetectLists( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DetectLists( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DetectHeadlines( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DetectHeadlines( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ClassifySeparators( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ClassifySeparators( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDocumentStructureDetectionParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDocumentStructureDetectionParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDocumentStructureDetectionParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDocumentStructureDetectionParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDocumentStructureDetectionParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDocumentStructureDetectionParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDocumentStructureDetectionParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDocumentStructureDetectionParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IDocumentStructureDetectionParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IDocumentStructureDetectionParams * This,
            /* [in] */ IDocumentStructureDetectionParams *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IDocumentStructureDetectionParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            IDocumentStructureDetectionParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IDocumentStructureDetectionParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            IDocumentStructureDetectionParams * This,
            /* [in] */ long HGlobal);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DetectRunningTitles )( 
            IDocumentStructureDetectionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DetectRunningTitles )( 
            IDocumentStructureDetectionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DetectFootnotes )( 
            IDocumentStructureDetectionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DetectFootnotes )( 
            IDocumentStructureDetectionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DetectCaptions )( 
            IDocumentStructureDetectionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DetectCaptions )( 
            IDocumentStructureDetectionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DetectColumns )( 
            IDocumentStructureDetectionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DetectColumns )( 
            IDocumentStructureDetectionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DetectTableOfContents )( 
            IDocumentStructureDetectionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DetectTableOfContents )( 
            IDocumentStructureDetectionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DetectOverflowingParagraphs )( 
            IDocumentStructureDetectionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DetectOverflowingParagraphs )( 
            IDocumentStructureDetectionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DetectLists )( 
            IDocumentStructureDetectionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DetectLists )( 
            IDocumentStructureDetectionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DetectHeadlines )( 
            IDocumentStructureDetectionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DetectHeadlines )( 
            IDocumentStructureDetectionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ClassifySeparators )( 
            IDocumentStructureDetectionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ClassifySeparators )( 
            IDocumentStructureDetectionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        END_INTERFACE
    } IDocumentStructureDetectionParamsVtbl;

    interface IDocumentStructureDetectionParams
    {
        CONST_VTBL struct IDocumentStructureDetectionParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDocumentStructureDetectionParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDocumentStructureDetectionParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDocumentStructureDetectionParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDocumentStructureDetectionParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IDocumentStructureDetectionParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IDocumentStructureDetectionParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IDocumentStructureDetectionParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IDocumentStructureDetectionParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IDocumentStructureDetectionParams_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IDocumentStructureDetectionParams_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define IDocumentStructureDetectionParams_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define IDocumentStructureDetectionParams_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IDocumentStructureDetectionParams_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#define IDocumentStructureDetectionParams_get_DetectRunningTitles(This,Result)	\
    ( (This)->lpVtbl -> get_DetectRunningTitles(This,Result) ) 

#define IDocumentStructureDetectionParams_put_DetectRunningTitles(This,Value)	\
    ( (This)->lpVtbl -> put_DetectRunningTitles(This,Value) ) 

#define IDocumentStructureDetectionParams_get_DetectFootnotes(This,Result)	\
    ( (This)->lpVtbl -> get_DetectFootnotes(This,Result) ) 

#define IDocumentStructureDetectionParams_put_DetectFootnotes(This,Value)	\
    ( (This)->lpVtbl -> put_DetectFootnotes(This,Value) ) 

#define IDocumentStructureDetectionParams_get_DetectCaptions(This,Result)	\
    ( (This)->lpVtbl -> get_DetectCaptions(This,Result) ) 

#define IDocumentStructureDetectionParams_put_DetectCaptions(This,Value)	\
    ( (This)->lpVtbl -> put_DetectCaptions(This,Value) ) 

#define IDocumentStructureDetectionParams_get_DetectColumns(This,Result)	\
    ( (This)->lpVtbl -> get_DetectColumns(This,Result) ) 

#define IDocumentStructureDetectionParams_put_DetectColumns(This,Value)	\
    ( (This)->lpVtbl -> put_DetectColumns(This,Value) ) 

#define IDocumentStructureDetectionParams_get_DetectTableOfContents(This,Result)	\
    ( (This)->lpVtbl -> get_DetectTableOfContents(This,Result) ) 

#define IDocumentStructureDetectionParams_put_DetectTableOfContents(This,Value)	\
    ( (This)->lpVtbl -> put_DetectTableOfContents(This,Value) ) 

#define IDocumentStructureDetectionParams_get_DetectOverflowingParagraphs(This,Result)	\
    ( (This)->lpVtbl -> get_DetectOverflowingParagraphs(This,Result) ) 

#define IDocumentStructureDetectionParams_put_DetectOverflowingParagraphs(This,Value)	\
    ( (This)->lpVtbl -> put_DetectOverflowingParagraphs(This,Value) ) 

#define IDocumentStructureDetectionParams_get_DetectLists(This,Result)	\
    ( (This)->lpVtbl -> get_DetectLists(This,Result) ) 

#define IDocumentStructureDetectionParams_put_DetectLists(This,Value)	\
    ( (This)->lpVtbl -> put_DetectLists(This,Value) ) 

#define IDocumentStructureDetectionParams_get_DetectHeadlines(This,Result)	\
    ( (This)->lpVtbl -> get_DetectHeadlines(This,Result) ) 

#define IDocumentStructureDetectionParams_put_DetectHeadlines(This,Value)	\
    ( (This)->lpVtbl -> put_DetectHeadlines(This,Value) ) 

#define IDocumentStructureDetectionParams_get_ClassifySeparators(This,Result)	\
    ( (This)->lpVtbl -> get_ClassifySeparators(This,Result) ) 

#define IDocumentStructureDetectionParams_put_ClassifySeparators(This,Value)	\
    ( (This)->lpVtbl -> put_ClassifySeparators(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDocumentStructureDetectionParams_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_DocumentStructureDetectionParams;

#ifdef __cplusplus

class DECLSPEC_UUID("100020C0-0000-1056-976E-008048D53AE3")
DocumentStructureDetectionParams;
#endif

#ifndef __IFontFormattingDetectionParams_INTERFACE_DEFINED__
#define __IFontFormattingDetectionParams_INTERFACE_DEFINED__

/* interface IFontFormattingDetectionParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IFontFormattingDetectionParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010D5-0000-1056-976E-008048D53AE3")
    IFontFormattingDetectionParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IFontFormattingDetectionParams *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DetectSerifs( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DetectSerifs( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DetectMonospace( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DetectMonospace( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DetectBold( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DetectBold( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DetectItalic( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DetectItalic( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DetectUnderlineStrikeout( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DetectUnderlineStrikeout( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DetectSubscriptsSuperscripts( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DetectSubscriptsSuperscripts( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DetectScaling( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DetectScaling( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DetectSpacing( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DetectSpacing( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DetectSmallCaps( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DetectSmallCaps( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DetectDropCaps( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DetectDropCaps( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DetectFontSize( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DetectFontSize( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DetectFontFamily( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DetectFontFamily( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MonospaceDetectionMode( 
            /* [retval][out] */ MonospaceDetectionModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MonospaceDetectionMode( 
            /* [in] */ MonospaceDetectionModeEnum Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFontFormattingDetectionParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IFontFormattingDetectionParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IFontFormattingDetectionParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IFontFormattingDetectionParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IFontFormattingDetectionParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IFontFormattingDetectionParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IFontFormattingDetectionParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IFontFormattingDetectionParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IFontFormattingDetectionParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IFontFormattingDetectionParams * This,
            /* [in] */ IFontFormattingDetectionParams *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IFontFormattingDetectionParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            IFontFormattingDetectionParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IFontFormattingDetectionParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            IFontFormattingDetectionParams * This,
            /* [in] */ long HGlobal);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DetectSerifs )( 
            IFontFormattingDetectionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DetectSerifs )( 
            IFontFormattingDetectionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DetectMonospace )( 
            IFontFormattingDetectionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DetectMonospace )( 
            IFontFormattingDetectionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DetectBold )( 
            IFontFormattingDetectionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DetectBold )( 
            IFontFormattingDetectionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DetectItalic )( 
            IFontFormattingDetectionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DetectItalic )( 
            IFontFormattingDetectionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DetectUnderlineStrikeout )( 
            IFontFormattingDetectionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DetectUnderlineStrikeout )( 
            IFontFormattingDetectionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DetectSubscriptsSuperscripts )( 
            IFontFormattingDetectionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DetectSubscriptsSuperscripts )( 
            IFontFormattingDetectionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DetectScaling )( 
            IFontFormattingDetectionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DetectScaling )( 
            IFontFormattingDetectionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DetectSpacing )( 
            IFontFormattingDetectionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DetectSpacing )( 
            IFontFormattingDetectionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DetectSmallCaps )( 
            IFontFormattingDetectionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DetectSmallCaps )( 
            IFontFormattingDetectionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DetectDropCaps )( 
            IFontFormattingDetectionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DetectDropCaps )( 
            IFontFormattingDetectionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DetectFontSize )( 
            IFontFormattingDetectionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DetectFontSize )( 
            IFontFormattingDetectionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DetectFontFamily )( 
            IFontFormattingDetectionParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DetectFontFamily )( 
            IFontFormattingDetectionParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MonospaceDetectionMode )( 
            IFontFormattingDetectionParams * This,
            /* [retval][out] */ MonospaceDetectionModeEnum *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MonospaceDetectionMode )( 
            IFontFormattingDetectionParams * This,
            /* [in] */ MonospaceDetectionModeEnum Value);
        
        END_INTERFACE
    } IFontFormattingDetectionParamsVtbl;

    interface IFontFormattingDetectionParams
    {
        CONST_VTBL struct IFontFormattingDetectionParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFontFormattingDetectionParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IFontFormattingDetectionParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IFontFormattingDetectionParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IFontFormattingDetectionParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IFontFormattingDetectionParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IFontFormattingDetectionParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IFontFormattingDetectionParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IFontFormattingDetectionParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IFontFormattingDetectionParams_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IFontFormattingDetectionParams_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define IFontFormattingDetectionParams_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define IFontFormattingDetectionParams_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IFontFormattingDetectionParams_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#define IFontFormattingDetectionParams_get_DetectSerifs(This,Result)	\
    ( (This)->lpVtbl -> get_DetectSerifs(This,Result) ) 

#define IFontFormattingDetectionParams_put_DetectSerifs(This,Value)	\
    ( (This)->lpVtbl -> put_DetectSerifs(This,Value) ) 

#define IFontFormattingDetectionParams_get_DetectMonospace(This,Result)	\
    ( (This)->lpVtbl -> get_DetectMonospace(This,Result) ) 

#define IFontFormattingDetectionParams_put_DetectMonospace(This,Value)	\
    ( (This)->lpVtbl -> put_DetectMonospace(This,Value) ) 

#define IFontFormattingDetectionParams_get_DetectBold(This,Result)	\
    ( (This)->lpVtbl -> get_DetectBold(This,Result) ) 

#define IFontFormattingDetectionParams_put_DetectBold(This,Value)	\
    ( (This)->lpVtbl -> put_DetectBold(This,Value) ) 

#define IFontFormattingDetectionParams_get_DetectItalic(This,Result)	\
    ( (This)->lpVtbl -> get_DetectItalic(This,Result) ) 

#define IFontFormattingDetectionParams_put_DetectItalic(This,Value)	\
    ( (This)->lpVtbl -> put_DetectItalic(This,Value) ) 

#define IFontFormattingDetectionParams_get_DetectUnderlineStrikeout(This,Result)	\
    ( (This)->lpVtbl -> get_DetectUnderlineStrikeout(This,Result) ) 

#define IFontFormattingDetectionParams_put_DetectUnderlineStrikeout(This,Value)	\
    ( (This)->lpVtbl -> put_DetectUnderlineStrikeout(This,Value) ) 

#define IFontFormattingDetectionParams_get_DetectSubscriptsSuperscripts(This,Result)	\
    ( (This)->lpVtbl -> get_DetectSubscriptsSuperscripts(This,Result) ) 

#define IFontFormattingDetectionParams_put_DetectSubscriptsSuperscripts(This,Value)	\
    ( (This)->lpVtbl -> put_DetectSubscriptsSuperscripts(This,Value) ) 

#define IFontFormattingDetectionParams_get_DetectScaling(This,Result)	\
    ( (This)->lpVtbl -> get_DetectScaling(This,Result) ) 

#define IFontFormattingDetectionParams_put_DetectScaling(This,Value)	\
    ( (This)->lpVtbl -> put_DetectScaling(This,Value) ) 

#define IFontFormattingDetectionParams_get_DetectSpacing(This,Result)	\
    ( (This)->lpVtbl -> get_DetectSpacing(This,Result) ) 

#define IFontFormattingDetectionParams_put_DetectSpacing(This,Value)	\
    ( (This)->lpVtbl -> put_DetectSpacing(This,Value) ) 

#define IFontFormattingDetectionParams_get_DetectSmallCaps(This,Result)	\
    ( (This)->lpVtbl -> get_DetectSmallCaps(This,Result) ) 

#define IFontFormattingDetectionParams_put_DetectSmallCaps(This,Value)	\
    ( (This)->lpVtbl -> put_DetectSmallCaps(This,Value) ) 

#define IFontFormattingDetectionParams_get_DetectDropCaps(This,Result)	\
    ( (This)->lpVtbl -> get_DetectDropCaps(This,Result) ) 

#define IFontFormattingDetectionParams_put_DetectDropCaps(This,Value)	\
    ( (This)->lpVtbl -> put_DetectDropCaps(This,Value) ) 

#define IFontFormattingDetectionParams_get_DetectFontSize(This,Result)	\
    ( (This)->lpVtbl -> get_DetectFontSize(This,Result) ) 

#define IFontFormattingDetectionParams_put_DetectFontSize(This,Value)	\
    ( (This)->lpVtbl -> put_DetectFontSize(This,Value) ) 

#define IFontFormattingDetectionParams_get_DetectFontFamily(This,Result)	\
    ( (This)->lpVtbl -> get_DetectFontFamily(This,Result) ) 

#define IFontFormattingDetectionParams_put_DetectFontFamily(This,Value)	\
    ( (This)->lpVtbl -> put_DetectFontFamily(This,Value) ) 

#define IFontFormattingDetectionParams_get_MonospaceDetectionMode(This,Result)	\
    ( (This)->lpVtbl -> get_MonospaceDetectionMode(This,Result) ) 

#define IFontFormattingDetectionParams_put_MonospaceDetectionMode(This,Value)	\
    ( (This)->lpVtbl -> put_MonospaceDetectionMode(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IFontFormattingDetectionParams_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_FontFormattingDetectionParams;

#ifdef __cplusplus

class DECLSPEC_UUID("100020BF-0000-1056-976E-008048D53AE3")
FontFormattingDetectionParams;
#endif

#ifndef __ISynthesisParamsForDocument_INTERFACE_DEFINED__
#define __ISynthesisParamsForDocument_INTERFACE_DEFINED__

/* interface ISynthesisParamsForDocument */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ISynthesisParamsForDocument;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000108C-0000-1056-976E-008048D53AE3")
    ISynthesisParamsForDocument : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ ISynthesisParamsForDocument *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DetectFontFormatting( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DetectFontFormatting( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FontFormattingDetectionParams( 
            /* [retval][out] */ IFontFormattingDetectionParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FontFormattingDetectionParams( 
            /* [in] */ IFontFormattingDetectionParams *Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DetectDocumentStructure( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DetectDocumentStructure( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocumentStructureDetectionParams( 
            /* [retval][out] */ IDocumentStructureDetectionParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DocumentStructureDetectionParams( 
            /* [in] */ IDocumentStructureDetectionParams *Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RecognizedTextFontCount( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetRecognizedTextFontName( 
            long FontNumber,
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddRecognizedTextFontName( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CleanRecognizedTextFontNames( void) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InsertEmptyParagraphsForBigInterlines( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_InsertEmptyParagraphsForBigInterlines( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SaveRecognitionInfo( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SaveRecognitionInfo( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PagePoolSize( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PagePoolSize( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LowMemoryMode( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LowMemoryMode( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISynthesisParamsForDocumentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISynthesisParamsForDocument * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISynthesisParamsForDocument * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISynthesisParamsForDocument * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ISynthesisParamsForDocument * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ISynthesisParamsForDocument * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ISynthesisParamsForDocument * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISynthesisParamsForDocument * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ISynthesisParamsForDocument * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            ISynthesisParamsForDocument * This,
            /* [in] */ ISynthesisParamsForDocument *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            ISynthesisParamsForDocument * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            ISynthesisParamsForDocument * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            ISynthesisParamsForDocument * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            ISynthesisParamsForDocument * This,
            /* [in] */ long HGlobal);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DetectFontFormatting )( 
            ISynthesisParamsForDocument * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DetectFontFormatting )( 
            ISynthesisParamsForDocument * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontFormattingDetectionParams )( 
            ISynthesisParamsForDocument * This,
            /* [retval][out] */ IFontFormattingDetectionParams **Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FontFormattingDetectionParams )( 
            ISynthesisParamsForDocument * This,
            /* [in] */ IFontFormattingDetectionParams *Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DetectDocumentStructure )( 
            ISynthesisParamsForDocument * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DetectDocumentStructure )( 
            ISynthesisParamsForDocument * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocumentStructureDetectionParams )( 
            ISynthesisParamsForDocument * This,
            /* [retval][out] */ IDocumentStructureDetectionParams **Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DocumentStructureDetectionParams )( 
            ISynthesisParamsForDocument * This,
            /* [in] */ IDocumentStructureDetectionParams *Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecognizedTextFontCount )( 
            ISynthesisParamsForDocument * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetRecognizedTextFontName )( 
            ISynthesisParamsForDocument * This,
            long FontNumber,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddRecognizedTextFontName )( 
            ISynthesisParamsForDocument * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CleanRecognizedTextFontNames )( 
            ISynthesisParamsForDocument * This);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsertEmptyParagraphsForBigInterlines )( 
            ISynthesisParamsForDocument * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsertEmptyParagraphsForBigInterlines )( 
            ISynthesisParamsForDocument * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SaveRecognitionInfo )( 
            ISynthesisParamsForDocument * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SaveRecognitionInfo )( 
            ISynthesisParamsForDocument * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PagePoolSize )( 
            ISynthesisParamsForDocument * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PagePoolSize )( 
            ISynthesisParamsForDocument * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LowMemoryMode )( 
            ISynthesisParamsForDocument * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LowMemoryMode )( 
            ISynthesisParamsForDocument * This,
            /* [in] */ VARIANT_BOOL Value);
        
        END_INTERFACE
    } ISynthesisParamsForDocumentVtbl;

    interface ISynthesisParamsForDocument
    {
        CONST_VTBL struct ISynthesisParamsForDocumentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISynthesisParamsForDocument_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISynthesisParamsForDocument_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISynthesisParamsForDocument_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISynthesisParamsForDocument_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISynthesisParamsForDocument_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISynthesisParamsForDocument_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISynthesisParamsForDocument_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISynthesisParamsForDocument_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ISynthesisParamsForDocument_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define ISynthesisParamsForDocument_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define ISynthesisParamsForDocument_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define ISynthesisParamsForDocument_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define ISynthesisParamsForDocument_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#define ISynthesisParamsForDocument_get_DetectFontFormatting(This,Result)	\
    ( (This)->lpVtbl -> get_DetectFontFormatting(This,Result) ) 

#define ISynthesisParamsForDocument_put_DetectFontFormatting(This,Value)	\
    ( (This)->lpVtbl -> put_DetectFontFormatting(This,Value) ) 

#define ISynthesisParamsForDocument_get_FontFormattingDetectionParams(This,Result)	\
    ( (This)->lpVtbl -> get_FontFormattingDetectionParams(This,Result) ) 

#define ISynthesisParamsForDocument_put_FontFormattingDetectionParams(This,Value)	\
    ( (This)->lpVtbl -> put_FontFormattingDetectionParams(This,Value) ) 

#define ISynthesisParamsForDocument_get_DetectDocumentStructure(This,Result)	\
    ( (This)->lpVtbl -> get_DetectDocumentStructure(This,Result) ) 

#define ISynthesisParamsForDocument_put_DetectDocumentStructure(This,Value)	\
    ( (This)->lpVtbl -> put_DetectDocumentStructure(This,Value) ) 

#define ISynthesisParamsForDocument_get_DocumentStructureDetectionParams(This,Result)	\
    ( (This)->lpVtbl -> get_DocumentStructureDetectionParams(This,Result) ) 

#define ISynthesisParamsForDocument_put_DocumentStructureDetectionParams(This,Value)	\
    ( (This)->lpVtbl -> put_DocumentStructureDetectionParams(This,Value) ) 

#define ISynthesisParamsForDocument_get_RecognizedTextFontCount(This,Result)	\
    ( (This)->lpVtbl -> get_RecognizedTextFontCount(This,Result) ) 

#define ISynthesisParamsForDocument_GetRecognizedTextFontName(This,FontNumber,Result)	\
    ( (This)->lpVtbl -> GetRecognizedTextFontName(This,FontNumber,Result) ) 

#define ISynthesisParamsForDocument_AddRecognizedTextFontName(This,Value)	\
    ( (This)->lpVtbl -> AddRecognizedTextFontName(This,Value) ) 

#define ISynthesisParamsForDocument_CleanRecognizedTextFontNames(This)	\
    ( (This)->lpVtbl -> CleanRecognizedTextFontNames(This) ) 

#define ISynthesisParamsForDocument_get_InsertEmptyParagraphsForBigInterlines(This,Result)	\
    ( (This)->lpVtbl -> get_InsertEmptyParagraphsForBigInterlines(This,Result) ) 

#define ISynthesisParamsForDocument_put_InsertEmptyParagraphsForBigInterlines(This,Value)	\
    ( (This)->lpVtbl -> put_InsertEmptyParagraphsForBigInterlines(This,Value) ) 

#define ISynthesisParamsForDocument_get_SaveRecognitionInfo(This,Result)	\
    ( (This)->lpVtbl -> get_SaveRecognitionInfo(This,Result) ) 

#define ISynthesisParamsForDocument_put_SaveRecognitionInfo(This,Value)	\
    ( (This)->lpVtbl -> put_SaveRecognitionInfo(This,Value) ) 

#define ISynthesisParamsForDocument_get_PagePoolSize(This,Result)	\
    ( (This)->lpVtbl -> get_PagePoolSize(This,Result) ) 

#define ISynthesisParamsForDocument_put_PagePoolSize(This,Value)	\
    ( (This)->lpVtbl -> put_PagePoolSize(This,Value) ) 

#define ISynthesisParamsForDocument_get_LowMemoryMode(This,Result)	\
    ( (This)->lpVtbl -> get_LowMemoryMode(This,Result) ) 

#define ISynthesisParamsForDocument_put_LowMemoryMode(This,Value)	\
    ( (This)->lpVtbl -> put_LowMemoryMode(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISynthesisParamsForDocument_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_SynthesisParamsForDocument;

#ifdef __cplusplus

class DECLSPEC_UUID("10002075-0000-1056-976E-008048D53AE3")
SynthesisParamsForDocument;
#endif

#ifndef __IFontFormattingDetectionParamsForPage_INTERFACE_DEFINED__
#define __IFontFormattingDetectionParamsForPage_INTERFACE_DEFINED__

/* interface IFontFormattingDetectionParamsForPage */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IFontFormattingDetectionParamsForPage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010DC-0000-1056-976E-008048D53AE3")
    IFontFormattingDetectionParamsForPage : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IFontFormattingDetectionParamsForPage *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DetectFontFamily( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DetectFontFamily( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DetectBold( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DetectBold( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DetectFontSize( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DetectFontSize( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFontFormattingDetectionParamsForPageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IFontFormattingDetectionParamsForPage * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IFontFormattingDetectionParamsForPage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IFontFormattingDetectionParamsForPage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IFontFormattingDetectionParamsForPage * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IFontFormattingDetectionParamsForPage * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IFontFormattingDetectionParamsForPage * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IFontFormattingDetectionParamsForPage * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IFontFormattingDetectionParamsForPage * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IFontFormattingDetectionParamsForPage * This,
            /* [in] */ IFontFormattingDetectionParamsForPage *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IFontFormattingDetectionParamsForPage * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            IFontFormattingDetectionParamsForPage * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IFontFormattingDetectionParamsForPage * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            IFontFormattingDetectionParamsForPage * This,
            /* [in] */ long HGlobal);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DetectFontFamily )( 
            IFontFormattingDetectionParamsForPage * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DetectFontFamily )( 
            IFontFormattingDetectionParamsForPage * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DetectBold )( 
            IFontFormattingDetectionParamsForPage * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DetectBold )( 
            IFontFormattingDetectionParamsForPage * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DetectFontSize )( 
            IFontFormattingDetectionParamsForPage * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DetectFontSize )( 
            IFontFormattingDetectionParamsForPage * This,
            /* [in] */ VARIANT_BOOL Value);
        
        END_INTERFACE
    } IFontFormattingDetectionParamsForPageVtbl;

    interface IFontFormattingDetectionParamsForPage
    {
        CONST_VTBL struct IFontFormattingDetectionParamsForPageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFontFormattingDetectionParamsForPage_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IFontFormattingDetectionParamsForPage_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IFontFormattingDetectionParamsForPage_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IFontFormattingDetectionParamsForPage_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IFontFormattingDetectionParamsForPage_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IFontFormattingDetectionParamsForPage_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IFontFormattingDetectionParamsForPage_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IFontFormattingDetectionParamsForPage_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IFontFormattingDetectionParamsForPage_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IFontFormattingDetectionParamsForPage_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define IFontFormattingDetectionParamsForPage_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define IFontFormattingDetectionParamsForPage_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IFontFormattingDetectionParamsForPage_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#define IFontFormattingDetectionParamsForPage_get_DetectFontFamily(This,Result)	\
    ( (This)->lpVtbl -> get_DetectFontFamily(This,Result) ) 

#define IFontFormattingDetectionParamsForPage_put_DetectFontFamily(This,Value)	\
    ( (This)->lpVtbl -> put_DetectFontFamily(This,Value) ) 

#define IFontFormattingDetectionParamsForPage_get_DetectBold(This,Result)	\
    ( (This)->lpVtbl -> get_DetectBold(This,Result) ) 

#define IFontFormattingDetectionParamsForPage_put_DetectBold(This,Value)	\
    ( (This)->lpVtbl -> put_DetectBold(This,Value) ) 

#define IFontFormattingDetectionParamsForPage_get_DetectFontSize(This,Result)	\
    ( (This)->lpVtbl -> get_DetectFontSize(This,Result) ) 

#define IFontFormattingDetectionParamsForPage_put_DetectFontSize(This,Value)	\
    ( (This)->lpVtbl -> put_DetectFontSize(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IFontFormattingDetectionParamsForPage_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_FontFormattingDetectionParamsForPage;

#ifdef __cplusplus

class DECLSPEC_UUID("100020C4-0000-1056-976E-008048D53AE3")
FontFormattingDetectionParamsForPage;
#endif

#ifndef __ISynthesisParamsForPage_INTERFACE_DEFINED__
#define __ISynthesisParamsForPage_INTERFACE_DEFINED__

/* interface ISynthesisParamsForPage */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ISynthesisParamsForPage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000108B-0000-1056-976E-008048D53AE3")
    ISynthesisParamsForPage : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ ISynthesisParamsForPage *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DetectTextColor( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DetectTextColor( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DetectBackgroundColor( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DetectBackgroundColor( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllowGrayBackgroundColor( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_AllowGrayBackgroundColor( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllowGrayTextColor( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_AllowGrayTextColor( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CorrectDynamicRange( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CorrectDynamicRange( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DetectHyperlinks( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DetectHyperlinks( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DetectDocumentLinks( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DetectDocumentLinks( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ParagraphExtractionMode( 
            /* [retval][out] */ ParagraphExtractionModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ParagraphExtractionMode( 
            /* [in] */ ParagraphExtractionModeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FontFormattingDetectionParams( 
            /* [retval][out] */ IFontFormattingDetectionParamsForPage **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FontFormattingDetectionParams( 
            /* [in] */ IFontFormattingDetectionParamsForPage *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DetectFontFormattingAtPageLevel( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DetectFontFormattingAtPageLevel( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_InsertEmptyParagraphsForBigInterlines( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_InsertEmptyParagraphsForBigInterlines( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISynthesisParamsForPageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISynthesisParamsForPage * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISynthesisParamsForPage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISynthesisParamsForPage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ISynthesisParamsForPage * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ISynthesisParamsForPage * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ISynthesisParamsForPage * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISynthesisParamsForPage * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ISynthesisParamsForPage * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            ISynthesisParamsForPage * This,
            /* [in] */ ISynthesisParamsForPage *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            ISynthesisParamsForPage * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            ISynthesisParamsForPage * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            ISynthesisParamsForPage * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            ISynthesisParamsForPage * This,
            /* [in] */ long HGlobal);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DetectTextColor )( 
            ISynthesisParamsForPage * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DetectTextColor )( 
            ISynthesisParamsForPage * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DetectBackgroundColor )( 
            ISynthesisParamsForPage * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DetectBackgroundColor )( 
            ISynthesisParamsForPage * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowGrayBackgroundColor )( 
            ISynthesisParamsForPage * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowGrayBackgroundColor )( 
            ISynthesisParamsForPage * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowGrayTextColor )( 
            ISynthesisParamsForPage * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowGrayTextColor )( 
            ISynthesisParamsForPage * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CorrectDynamicRange )( 
            ISynthesisParamsForPage * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CorrectDynamicRange )( 
            ISynthesisParamsForPage * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DetectHyperlinks )( 
            ISynthesisParamsForPage * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DetectHyperlinks )( 
            ISynthesisParamsForPage * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DetectDocumentLinks )( 
            ISynthesisParamsForPage * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DetectDocumentLinks )( 
            ISynthesisParamsForPage * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ParagraphExtractionMode )( 
            ISynthesisParamsForPage * This,
            /* [retval][out] */ ParagraphExtractionModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ParagraphExtractionMode )( 
            ISynthesisParamsForPage * This,
            /* [in] */ ParagraphExtractionModeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FontFormattingDetectionParams )( 
            ISynthesisParamsForPage * This,
            /* [retval][out] */ IFontFormattingDetectionParamsForPage **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FontFormattingDetectionParams )( 
            ISynthesisParamsForPage * This,
            /* [in] */ IFontFormattingDetectionParamsForPage *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DetectFontFormattingAtPageLevel )( 
            ISynthesisParamsForPage * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DetectFontFormattingAtPageLevel )( 
            ISynthesisParamsForPage * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_InsertEmptyParagraphsForBigInterlines )( 
            ISynthesisParamsForPage * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_InsertEmptyParagraphsForBigInterlines )( 
            ISynthesisParamsForPage * This,
            /* [in] */ VARIANT_BOOL Value);
        
        END_INTERFACE
    } ISynthesisParamsForPageVtbl;

    interface ISynthesisParamsForPage
    {
        CONST_VTBL struct ISynthesisParamsForPageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISynthesisParamsForPage_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISynthesisParamsForPage_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISynthesisParamsForPage_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISynthesisParamsForPage_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISynthesisParamsForPage_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISynthesisParamsForPage_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISynthesisParamsForPage_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISynthesisParamsForPage_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ISynthesisParamsForPage_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define ISynthesisParamsForPage_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define ISynthesisParamsForPage_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define ISynthesisParamsForPage_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define ISynthesisParamsForPage_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#define ISynthesisParamsForPage_get_DetectTextColor(This,Result)	\
    ( (This)->lpVtbl -> get_DetectTextColor(This,Result) ) 

#define ISynthesisParamsForPage_put_DetectTextColor(This,Value)	\
    ( (This)->lpVtbl -> put_DetectTextColor(This,Value) ) 

#define ISynthesisParamsForPage_get_DetectBackgroundColor(This,Result)	\
    ( (This)->lpVtbl -> get_DetectBackgroundColor(This,Result) ) 

#define ISynthesisParamsForPage_put_DetectBackgroundColor(This,Value)	\
    ( (This)->lpVtbl -> put_DetectBackgroundColor(This,Value) ) 

#define ISynthesisParamsForPage_get_AllowGrayBackgroundColor(This,Result)	\
    ( (This)->lpVtbl -> get_AllowGrayBackgroundColor(This,Result) ) 

#define ISynthesisParamsForPage_put_AllowGrayBackgroundColor(This,Value)	\
    ( (This)->lpVtbl -> put_AllowGrayBackgroundColor(This,Value) ) 

#define ISynthesisParamsForPage_get_AllowGrayTextColor(This,Result)	\
    ( (This)->lpVtbl -> get_AllowGrayTextColor(This,Result) ) 

#define ISynthesisParamsForPage_put_AllowGrayTextColor(This,Value)	\
    ( (This)->lpVtbl -> put_AllowGrayTextColor(This,Value) ) 

#define ISynthesisParamsForPage_get_CorrectDynamicRange(This,Result)	\
    ( (This)->lpVtbl -> get_CorrectDynamicRange(This,Result) ) 

#define ISynthesisParamsForPage_put_CorrectDynamicRange(This,Value)	\
    ( (This)->lpVtbl -> put_CorrectDynamicRange(This,Value) ) 

#define ISynthesisParamsForPage_get_DetectHyperlinks(This,Result)	\
    ( (This)->lpVtbl -> get_DetectHyperlinks(This,Result) ) 

#define ISynthesisParamsForPage_put_DetectHyperlinks(This,Value)	\
    ( (This)->lpVtbl -> put_DetectHyperlinks(This,Value) ) 

#define ISynthesisParamsForPage_get_DetectDocumentLinks(This,Result)	\
    ( (This)->lpVtbl -> get_DetectDocumentLinks(This,Result) ) 

#define ISynthesisParamsForPage_put_DetectDocumentLinks(This,Value)	\
    ( (This)->lpVtbl -> put_DetectDocumentLinks(This,Value) ) 

#define ISynthesisParamsForPage_get_ParagraphExtractionMode(This,Result)	\
    ( (This)->lpVtbl -> get_ParagraphExtractionMode(This,Result) ) 

#define ISynthesisParamsForPage_put_ParagraphExtractionMode(This,Value)	\
    ( (This)->lpVtbl -> put_ParagraphExtractionMode(This,Value) ) 

#define ISynthesisParamsForPage_get_FontFormattingDetectionParams(This,Result)	\
    ( (This)->lpVtbl -> get_FontFormattingDetectionParams(This,Result) ) 

#define ISynthesisParamsForPage_put_FontFormattingDetectionParams(This,Value)	\
    ( (This)->lpVtbl -> put_FontFormattingDetectionParams(This,Value) ) 

#define ISynthesisParamsForPage_get_DetectFontFormattingAtPageLevel(This,Result)	\
    ( (This)->lpVtbl -> get_DetectFontFormattingAtPageLevel(This,Result) ) 

#define ISynthesisParamsForPage_put_DetectFontFormattingAtPageLevel(This,Value)	\
    ( (This)->lpVtbl -> put_DetectFontFormattingAtPageLevel(This,Value) ) 

#define ISynthesisParamsForPage_get_InsertEmptyParagraphsForBigInterlines(This,Result)	\
    ( (This)->lpVtbl -> get_InsertEmptyParagraphsForBigInterlines(This,Result) ) 

#define ISynthesisParamsForPage_put_InsertEmptyParagraphsForBigInterlines(This,Value)	\
    ( (This)->lpVtbl -> put_InsertEmptyParagraphsForBigInterlines(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISynthesisParamsForPage_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_SynthesisParamsForPage;

#ifdef __cplusplus

class DECLSPEC_UUID("10002074-0000-1056-976E-008048D53AE3")
SynthesisParamsForPage;
#endif

#ifndef __IPageProcessingParams_INTERFACE_DEFINED__
#define __IPageProcessingParams_INTERFACE_DEFINED__

/* interface IPageProcessingParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IPageProcessingParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001021-0000-1056-976E-008048D53AE3")
    IPageProcessingParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PerformPageAnalysis( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PerformPageAnalysis( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PageAnalysisParams( 
            /* [retval][out] */ IPageAnalysisParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PageAnalysisParams( 
            /* [in] */ IPageAnalysisParams *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DetectBarcodes( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DetectBarcodes( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BarcodeParams( 
            /* [retval][out] */ IBarcodeParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BarcodeParams( 
            /* [in] */ IBarcodeParams *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DetectOrientation( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DetectOrientation( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_OrientationDetectionParams( 
            /* [retval][out] */ IOrientationDetectionParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_OrientationDetectionParams( 
            /* [in] */ IOrientationDetectionParams *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DetectInvertedImage( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DetectInvertedImage( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RemoveGeometricalDistortions( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RemoveGeometricalDistortions( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RecognizerParams( 
            /* [retval][out] */ IRecognizerParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RecognizerParams( 
            /* [in] */ IRecognizerParams *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ObjectsExtractionParams( 
            /* [retval][out] */ IObjectsExtractionParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ObjectsExtractionParams( 
            /* [in] */ IObjectsExtractionParams *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IPageProcessingParams *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPageProcessingParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPageProcessingParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPageProcessingParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPageProcessingParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPageProcessingParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPageProcessingParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPageProcessingParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPageProcessingParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPageProcessingParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PerformPageAnalysis )( 
            IPageProcessingParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PerformPageAnalysis )( 
            IPageProcessingParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PageAnalysisParams )( 
            IPageProcessingParams * This,
            /* [retval][out] */ IPageAnalysisParams **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PageAnalysisParams )( 
            IPageProcessingParams * This,
            /* [in] */ IPageAnalysisParams *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DetectBarcodes )( 
            IPageProcessingParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DetectBarcodes )( 
            IPageProcessingParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BarcodeParams )( 
            IPageProcessingParams * This,
            /* [retval][out] */ IBarcodeParams **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BarcodeParams )( 
            IPageProcessingParams * This,
            /* [in] */ IBarcodeParams *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DetectOrientation )( 
            IPageProcessingParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DetectOrientation )( 
            IPageProcessingParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OrientationDetectionParams )( 
            IPageProcessingParams * This,
            /* [retval][out] */ IOrientationDetectionParams **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OrientationDetectionParams )( 
            IPageProcessingParams * This,
            /* [in] */ IOrientationDetectionParams *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DetectInvertedImage )( 
            IPageProcessingParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DetectInvertedImage )( 
            IPageProcessingParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RemoveGeometricalDistortions )( 
            IPageProcessingParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RemoveGeometricalDistortions )( 
            IPageProcessingParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RecognizerParams )( 
            IPageProcessingParams * This,
            /* [retval][out] */ IRecognizerParams **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RecognizerParams )( 
            IPageProcessingParams * This,
            /* [in] */ IRecognizerParams *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectsExtractionParams )( 
            IPageProcessingParams * This,
            /* [retval][out] */ IObjectsExtractionParams **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ObjectsExtractionParams )( 
            IPageProcessingParams * This,
            /* [in] */ IObjectsExtractionParams *Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IPageProcessingParams * This,
            /* [in] */ IPageProcessingParams *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IPageProcessingParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            IPageProcessingParams * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IPageProcessingParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            IPageProcessingParams * This,
            /* [in] */ long HGlobal);
        
        END_INTERFACE
    } IPageProcessingParamsVtbl;

    interface IPageProcessingParams
    {
        CONST_VTBL struct IPageProcessingParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPageProcessingParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPageProcessingParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPageProcessingParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPageProcessingParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPageProcessingParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPageProcessingParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPageProcessingParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPageProcessingParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IPageProcessingParams_get_PerformPageAnalysis(This,Result)	\
    ( (This)->lpVtbl -> get_PerformPageAnalysis(This,Result) ) 

#define IPageProcessingParams_put_PerformPageAnalysis(This,Value)	\
    ( (This)->lpVtbl -> put_PerformPageAnalysis(This,Value) ) 

#define IPageProcessingParams_get_PageAnalysisParams(This,Result)	\
    ( (This)->lpVtbl -> get_PageAnalysisParams(This,Result) ) 

#define IPageProcessingParams_put_PageAnalysisParams(This,Value)	\
    ( (This)->lpVtbl -> put_PageAnalysisParams(This,Value) ) 

#define IPageProcessingParams_get_DetectBarcodes(This,Result)	\
    ( (This)->lpVtbl -> get_DetectBarcodes(This,Result) ) 

#define IPageProcessingParams_put_DetectBarcodes(This,Value)	\
    ( (This)->lpVtbl -> put_DetectBarcodes(This,Value) ) 

#define IPageProcessingParams_get_BarcodeParams(This,Result)	\
    ( (This)->lpVtbl -> get_BarcodeParams(This,Result) ) 

#define IPageProcessingParams_put_BarcodeParams(This,Value)	\
    ( (This)->lpVtbl -> put_BarcodeParams(This,Value) ) 

#define IPageProcessingParams_get_DetectOrientation(This,Result)	\
    ( (This)->lpVtbl -> get_DetectOrientation(This,Result) ) 

#define IPageProcessingParams_put_DetectOrientation(This,Value)	\
    ( (This)->lpVtbl -> put_DetectOrientation(This,Value) ) 

#define IPageProcessingParams_get_OrientationDetectionParams(This,Result)	\
    ( (This)->lpVtbl -> get_OrientationDetectionParams(This,Result) ) 

#define IPageProcessingParams_put_OrientationDetectionParams(This,Value)	\
    ( (This)->lpVtbl -> put_OrientationDetectionParams(This,Value) ) 

#define IPageProcessingParams_get_DetectInvertedImage(This,Result)	\
    ( (This)->lpVtbl -> get_DetectInvertedImage(This,Result) ) 

#define IPageProcessingParams_put_DetectInvertedImage(This,Value)	\
    ( (This)->lpVtbl -> put_DetectInvertedImage(This,Value) ) 

#define IPageProcessingParams_get_RemoveGeometricalDistortions(This,Result)	\
    ( (This)->lpVtbl -> get_RemoveGeometricalDistortions(This,Result) ) 

#define IPageProcessingParams_put_RemoveGeometricalDistortions(This,Value)	\
    ( (This)->lpVtbl -> put_RemoveGeometricalDistortions(This,Value) ) 

#define IPageProcessingParams_get_RecognizerParams(This,Result)	\
    ( (This)->lpVtbl -> get_RecognizerParams(This,Result) ) 

#define IPageProcessingParams_put_RecognizerParams(This,Value)	\
    ( (This)->lpVtbl -> put_RecognizerParams(This,Value) ) 

#define IPageProcessingParams_get_ObjectsExtractionParams(This,Result)	\
    ( (This)->lpVtbl -> get_ObjectsExtractionParams(This,Result) ) 

#define IPageProcessingParams_put_ObjectsExtractionParams(This,Value)	\
    ( (This)->lpVtbl -> put_ObjectsExtractionParams(This,Value) ) 

#define IPageProcessingParams_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IPageProcessingParams_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define IPageProcessingParams_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define IPageProcessingParams_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IPageProcessingParams_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPageProcessingParams_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_PageProcessingParams;

#ifdef __cplusplus

class DECLSPEC_UUID("10002022-0000-1056-976E-008048D53AE3")
PageProcessingParams;
#endif

EXTERN_C const CLSID CLSID_ObjectsExtractionParams;

#ifdef __cplusplus

class DECLSPEC_UUID("10002093-0000-1056-976E-008048D53AE3")
ObjectsExtractionParams;
#endif

#ifndef __ITextBlockAnalysisParams_INTERFACE_DEFINED__
#define __ITextBlockAnalysisParams_INTERFACE_DEFINED__

/* interface ITextBlockAnalysisParams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ITextBlockAnalysisParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010B7-0000-1056-976E-008048D53AE3")
    ITextBlockAnalysisParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AutodetectInversion( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_AutodetectInversion( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SkewCorrectionMode( 
            /* [retval][out] */ SkewCorrectionModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SkewCorrectionMode( 
            /* [in] */ SkewCorrectionModeEnum Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITextBlockAnalysisParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITextBlockAnalysisParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITextBlockAnalysisParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITextBlockAnalysisParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITextBlockAnalysisParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITextBlockAnalysisParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITextBlockAnalysisParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITextBlockAnalysisParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ITextBlockAnalysisParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AutodetectInversion )( 
            ITextBlockAnalysisParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AutodetectInversion )( 
            ITextBlockAnalysisParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SkewCorrectionMode )( 
            ITextBlockAnalysisParams * This,
            /* [retval][out] */ SkewCorrectionModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SkewCorrectionMode )( 
            ITextBlockAnalysisParams * This,
            /* [in] */ SkewCorrectionModeEnum Value);
        
        END_INTERFACE
    } ITextBlockAnalysisParamsVtbl;

    interface ITextBlockAnalysisParams
    {
        CONST_VTBL struct ITextBlockAnalysisParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITextBlockAnalysisParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITextBlockAnalysisParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITextBlockAnalysisParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITextBlockAnalysisParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITextBlockAnalysisParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITextBlockAnalysisParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITextBlockAnalysisParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITextBlockAnalysisParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ITextBlockAnalysisParams_get_AutodetectInversion(This,Result)	\
    ( (This)->lpVtbl -> get_AutodetectInversion(This,Result) ) 

#define ITextBlockAnalysisParams_put_AutodetectInversion(This,Value)	\
    ( (This)->lpVtbl -> put_AutodetectInversion(This,Value) ) 

#define ITextBlockAnalysisParams_get_SkewCorrectionMode(This,Result)	\
    ( (This)->lpVtbl -> get_SkewCorrectionMode(This,Result) ) 

#define ITextBlockAnalysisParams_put_SkewCorrectionMode(This,Value)	\
    ( (This)->lpVtbl -> put_SkewCorrectionMode(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITextBlockAnalysisParams_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_TextBlockAnalysisParams;

#ifdef __cplusplus

class DECLSPEC_UUID("100020A4-0000-1056-976E-008048D53AE3")
TextBlockAnalysisParams;
#endif

#ifndef __IStringsCollection_INTERFACE_DEFINED__
#define __IStringsCollection_INTERFACE_DEFINED__

/* interface IStringsCollection */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IStringsCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001036-0000-1056-976E-008048D53AE3")
    IStringsCollection : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Element( 
            /* [in] */ long Index,
            /* [in] */ BSTR Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ BSTR Value,
            /* [in] */ long Index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ long Index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveAll( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IStringsCollection *From) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IStringsCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IStringsCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IStringsCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IStringsCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IStringsCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IStringsCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IStringsCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IStringsCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            IStringsCollection * This,
            /* [in] */ long Index,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Element )( 
            IStringsCollection * This,
            /* [in] */ long Index,
            /* [in] */ BSTR Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IStringsCollection * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IStringsCollection * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IStringsCollection * This,
            /* [in] */ long Index,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            IStringsCollection * This,
            /* [in] */ BSTR Value,
            /* [in] */ long Index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IStringsCollection * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IStringsCollection * This,
            /* [in] */ long Index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAll )( 
            IStringsCollection * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IStringsCollection * This,
            /* [in] */ IStringsCollection *From);
        
        END_INTERFACE
    } IStringsCollectionVtbl;

    interface IStringsCollection
    {
        CONST_VTBL struct IStringsCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IStringsCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IStringsCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IStringsCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IStringsCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IStringsCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IStringsCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IStringsCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IStringsCollection_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define IStringsCollection_put_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> put_Element(This,Index,Result) ) 

#define IStringsCollection_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IStringsCollection_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define IStringsCollection_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#define IStringsCollection_Insert(This,Value,Index)	\
    ( (This)->lpVtbl -> Insert(This,Value,Index) ) 

#define IStringsCollection_Add(This,Value)	\
    ( (This)->lpVtbl -> Add(This,Value) ) 

#define IStringsCollection_Remove(This,Index)	\
    ( (This)->lpVtbl -> Remove(This,Index) ) 

#define IStringsCollection_RemoveAll(This)	\
    ( (This)->lpVtbl -> RemoveAll(This) ) 

#define IStringsCollection_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IStringsCollection_INTERFACE_DEFINED__ */


#ifndef __IEnumDictionaryWords_INTERFACE_DEFINED__
#define __IEnumDictionaryWords_INTERFACE_DEFINED__

/* interface IEnumDictionaryWords */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IEnumDictionaryWords;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001030-0000-1056-976E-008048D53AE3")
    IEnumDictionaryWords : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Dictionary( 
            /* [retval][out] */ IDictionary **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Next( 
            /* [out] */ long *Confidence,
            /* [retval][out] */ BSTR *Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumDictionaryWordsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumDictionaryWords * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumDictionaryWords * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumDictionaryWords * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IEnumDictionaryWords * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IEnumDictionaryWords * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IEnumDictionaryWords * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IEnumDictionaryWords * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IEnumDictionaryWords * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Dictionary )( 
            IEnumDictionaryWords * This,
            /* [retval][out] */ IDictionary **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumDictionaryWords * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumDictionaryWords * This,
            /* [out] */ long *Confidence,
            /* [retval][out] */ BSTR *Result);
        
        END_INTERFACE
    } IEnumDictionaryWordsVtbl;

    interface IEnumDictionaryWords
    {
        CONST_VTBL struct IEnumDictionaryWordsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumDictionaryWords_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IEnumDictionaryWords_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IEnumDictionaryWords_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IEnumDictionaryWords_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IEnumDictionaryWords_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IEnumDictionaryWords_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IEnumDictionaryWords_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IEnumDictionaryWords_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IEnumDictionaryWords_get_Dictionary(This,Result)	\
    ( (This)->lpVtbl -> get_Dictionary(This,Result) ) 

#define IEnumDictionaryWords_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IEnumDictionaryWords_Next(This,Confidence,Result)	\
    ( (This)->lpVtbl -> Next(This,Confidence,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IEnumDictionaryWords_INTERFACE_DEFINED__ */


#ifndef __IDictionary_INTERFACE_DEFINED__
#define __IDictionary_INTERFACE_DEFINED__

/* interface IDictionary */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IDictionary;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000102f-0000-1056-976E-008048D53AE3")
    IDictionary : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Edit( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddWord( 
            /* [in] */ BSTR Word,
            /* [defaultvalue][in] */ long Weight = 100) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddWords( 
            /* [in] */ IStringsCollection *Words,
            /* [defaultvalue][in] */ ILongsCollection *Weights = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteWord( 
            /* [in] */ BSTR Word) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteWords( 
            /* [in] */ IStringsCollection *Words) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteAllWords( void) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WordsCount( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EnumWords( 
            /* [retval][out] */ IEnumDictionaryWords **Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDictionaryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDictionary * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDictionary * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDictionary * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDictionary * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDictionary * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDictionary * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDictionary * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IDictionary * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IDictionary * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IDictionary * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Edit )( 
            IDictionary * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddWord )( 
            IDictionary * This,
            /* [in] */ BSTR Word,
            /* [defaultvalue][in] */ long Weight);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddWords )( 
            IDictionary * This,
            /* [in] */ IStringsCollection *Words,
            /* [defaultvalue][in] */ ILongsCollection *Weights);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteWord )( 
            IDictionary * This,
            /* [in] */ BSTR Word);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteWords )( 
            IDictionary * This,
            /* [in] */ IStringsCollection *Words);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteAllWords )( 
            IDictionary * This);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WordsCount )( 
            IDictionary * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EnumWords )( 
            IDictionary * This,
            /* [retval][out] */ IEnumDictionaryWords **Result);
        
        END_INTERFACE
    } IDictionaryVtbl;

    interface IDictionary
    {
        CONST_VTBL struct IDictionaryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDictionary_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDictionary_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDictionary_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDictionary_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IDictionary_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IDictionary_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IDictionary_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IDictionary_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IDictionary_get_Name(This,Result)	\
    ( (This)->lpVtbl -> get_Name(This,Result) ) 

#define IDictionary_put_Name(This,Value)	\
    ( (This)->lpVtbl -> put_Name(This,Value) ) 

#define IDictionary_Edit(This)	\
    ( (This)->lpVtbl -> Edit(This) ) 

#define IDictionary_AddWord(This,Word,Weight)	\
    ( (This)->lpVtbl -> AddWord(This,Word,Weight) ) 

#define IDictionary_AddWords(This,Words,Weights)	\
    ( (This)->lpVtbl -> AddWords(This,Words,Weights) ) 

#define IDictionary_DeleteWord(This,Word)	\
    ( (This)->lpVtbl -> DeleteWord(This,Word) ) 

#define IDictionary_DeleteWords(This,Words)	\
    ( (This)->lpVtbl -> DeleteWords(This,Words) ) 

#define IDictionary_DeleteAllWords(This)	\
    ( (This)->lpVtbl -> DeleteAllWords(This) ) 

#define IDictionary_get_WordsCount(This,Result)	\
    ( (This)->lpVtbl -> get_WordsCount(This,Result) ) 

#define IDictionary_EnumWords(This,Result)	\
    ( (This)->lpVtbl -> EnumWords(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDictionary_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_Dictionary;

#ifdef __cplusplus

class DECLSPEC_UUID("10002030-0000-1056-976E-008048D53AE3")
Dictionary;
#endif

EXTERN_C const CLSID CLSID_EnumDictionaryWords;

#ifdef __cplusplus

class DECLSPEC_UUID("10002031-0000-1056-976E-008048D53AE3")
EnumDictionaryWords;
#endif

#ifndef __IDictionaryDescriptions_INTERFACE_DEFINED__
#define __IDictionaryDescriptions_INTERFACE_DEFINED__

/* interface IDictionaryDescriptions */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IDictionaryDescriptions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001061-0000-1056-976E-008048D53AE3")
    IDictionaryDescriptions : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ IDictionaryDescription **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ IDictionaryDescription **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ IDictionaryDescription *description) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ long Index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveAll( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDictionaryDescriptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDictionaryDescriptions * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDictionaryDescriptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDictionaryDescriptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDictionaryDescriptions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDictionaryDescriptions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDictionaryDescriptions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDictionaryDescriptions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            IDictionaryDescriptions * This,
            /* [in] */ long Index,
            /* [retval][out] */ IDictionaryDescription **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IDictionaryDescriptions * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IDictionaryDescriptions * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IDictionaryDescriptions * This,
            /* [in] */ long Index,
            /* [retval][out] */ IDictionaryDescription **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IDictionaryDescriptions * This,
            /* [in] */ IDictionaryDescription *description);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IDictionaryDescriptions * This,
            /* [in] */ long Index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAll )( 
            IDictionaryDescriptions * This);
        
        END_INTERFACE
    } IDictionaryDescriptionsVtbl;

    interface IDictionaryDescriptions
    {
        CONST_VTBL struct IDictionaryDescriptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDictionaryDescriptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDictionaryDescriptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDictionaryDescriptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDictionaryDescriptions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IDictionaryDescriptions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IDictionaryDescriptions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IDictionaryDescriptions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IDictionaryDescriptions_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define IDictionaryDescriptions_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IDictionaryDescriptions_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define IDictionaryDescriptions_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#define IDictionaryDescriptions_Add(This,description)	\
    ( (This)->lpVtbl -> Add(This,description) ) 

#define IDictionaryDescriptions_Remove(This,Index)	\
    ( (This)->lpVtbl -> Remove(This,Index) ) 

#define IDictionaryDescriptions_RemoveAll(This)	\
    ( (This)->lpVtbl -> RemoveAll(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDictionaryDescriptions_INTERFACE_DEFINED__ */


#ifndef __IBaseLanguage_INTERFACE_DEFINED__
#define __IBaseLanguage_INTERFACE_DEFINED__

/* interface IBaseLanguage */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IBaseLanguage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000100f-0000-1056-976E-008048D53AE3")
    IBaseLanguage : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsNaturalLanguage( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsNaturalLanguage( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllowWordsFromDictionaryOnly( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_AllowWordsFromDictionaryOnly( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_InternalName( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_InternalName( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LetterSet( 
            /* [in] */ BaseLanguageLetterSetEnum Type,
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_LetterSet( 
            /* [in] */ BaseLanguageLetterSetEnum Type,
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LanguageId( 
            /* [retval][out] */ LanguageIdEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_LanguageId( 
            /* [in] */ LanguageIdEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UserProperty( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ VARIANT *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_UserProperty( 
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IBaseLanguage *From) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DictionaryDescriptions( 
            /* [retval][out] */ IDictionaryDescriptions **Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IBaseLanguageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IBaseLanguage * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IBaseLanguage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IBaseLanguage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IBaseLanguage * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IBaseLanguage * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IBaseLanguage * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IBaseLanguage * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IBaseLanguage * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsNaturalLanguage )( 
            IBaseLanguage * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsNaturalLanguage )( 
            IBaseLanguage * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowWordsFromDictionaryOnly )( 
            IBaseLanguage * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowWordsFromDictionaryOnly )( 
            IBaseLanguage * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_InternalName )( 
            IBaseLanguage * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_InternalName )( 
            IBaseLanguage * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LetterSet )( 
            IBaseLanguage * This,
            /* [in] */ BaseLanguageLetterSetEnum Type,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LetterSet )( 
            IBaseLanguage * This,
            /* [in] */ BaseLanguageLetterSetEnum Type,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageId )( 
            IBaseLanguage * This,
            /* [retval][out] */ LanguageIdEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LanguageId )( 
            IBaseLanguage * This,
            /* [in] */ LanguageIdEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserProperty )( 
            IBaseLanguage * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ VARIANT *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UserProperty )( 
            IBaseLanguage * This,
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IBaseLanguage * This,
            /* [in] */ IBaseLanguage *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            IBaseLanguage * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            IBaseLanguage * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            IBaseLanguage * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            IBaseLanguage * This,
            /* [in] */ long HGlobal);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DictionaryDescriptions )( 
            IBaseLanguage * This,
            /* [retval][out] */ IDictionaryDescriptions **Result);
        
        END_INTERFACE
    } IBaseLanguageVtbl;

    interface IBaseLanguage
    {
        CONST_VTBL struct IBaseLanguageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IBaseLanguage_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IBaseLanguage_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IBaseLanguage_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IBaseLanguage_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IBaseLanguage_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IBaseLanguage_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IBaseLanguage_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IBaseLanguage_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IBaseLanguage_get_IsNaturalLanguage(This,Result)	\
    ( (This)->lpVtbl -> get_IsNaturalLanguage(This,Result) ) 

#define IBaseLanguage_put_IsNaturalLanguage(This,Value)	\
    ( (This)->lpVtbl -> put_IsNaturalLanguage(This,Value) ) 

#define IBaseLanguage_get_AllowWordsFromDictionaryOnly(This,Result)	\
    ( (This)->lpVtbl -> get_AllowWordsFromDictionaryOnly(This,Result) ) 

#define IBaseLanguage_put_AllowWordsFromDictionaryOnly(This,Value)	\
    ( (This)->lpVtbl -> put_AllowWordsFromDictionaryOnly(This,Value) ) 

#define IBaseLanguage_get_InternalName(This,Result)	\
    ( (This)->lpVtbl -> get_InternalName(This,Result) ) 

#define IBaseLanguage_put_InternalName(This,Value)	\
    ( (This)->lpVtbl -> put_InternalName(This,Value) ) 

#define IBaseLanguage_get_LetterSet(This,Type,Result)	\
    ( (This)->lpVtbl -> get_LetterSet(This,Type,Result) ) 

#define IBaseLanguage_put_LetterSet(This,Type,Value)	\
    ( (This)->lpVtbl -> put_LetterSet(This,Type,Value) ) 

#define IBaseLanguage_get_LanguageId(This,Result)	\
    ( (This)->lpVtbl -> get_LanguageId(This,Result) ) 

#define IBaseLanguage_put_LanguageId(This,Value)	\
    ( (This)->lpVtbl -> put_LanguageId(This,Value) ) 

#define IBaseLanguage_get_UserProperty(This,Name,Result)	\
    ( (This)->lpVtbl -> get_UserProperty(This,Name,Result) ) 

#define IBaseLanguage_put_UserProperty(This,Name,Value)	\
    ( (This)->lpVtbl -> put_UserProperty(This,Name,Value) ) 

#define IBaseLanguage_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IBaseLanguage_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define IBaseLanguage_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define IBaseLanguage_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define IBaseLanguage_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#define IBaseLanguage_get_DictionaryDescriptions(This,Result)	\
    ( (This)->lpVtbl -> get_DictionaryDescriptions(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IBaseLanguage_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_BaseLanguage;

#ifdef __cplusplus

class DECLSPEC_UUID("1000200f-0000-1056-976E-008048D53AE3")
BaseLanguage;
#endif

#ifndef __IBaseLanguages_INTERFACE_DEFINED__
#define __IBaseLanguages_INTERFACE_DEFINED__

/* interface IBaseLanguages */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IBaseLanguages;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000100e-0000-1056-976E-008048D53AE3")
    IBaseLanguages : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ IBaseLanguage **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ IBaseLanguage **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ IBaseLanguage *Language) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ long Index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveAll( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IBaseLanguagesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IBaseLanguages * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IBaseLanguages * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IBaseLanguages * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IBaseLanguages * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IBaseLanguages * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IBaseLanguages * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IBaseLanguages * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            IBaseLanguages * This,
            /* [in] */ long Index,
            /* [retval][out] */ IBaseLanguage **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IBaseLanguages * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IBaseLanguages * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IBaseLanguages * This,
            /* [in] */ long Index,
            /* [retval][out] */ IBaseLanguage **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IBaseLanguages * This,
            /* [in] */ IBaseLanguage *Language);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IBaseLanguages * This,
            /* [in] */ long Index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAll )( 
            IBaseLanguages * This);
        
        END_INTERFACE
    } IBaseLanguagesVtbl;

    interface IBaseLanguages
    {
        CONST_VTBL struct IBaseLanguagesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IBaseLanguages_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IBaseLanguages_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IBaseLanguages_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IBaseLanguages_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IBaseLanguages_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IBaseLanguages_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IBaseLanguages_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IBaseLanguages_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define IBaseLanguages_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IBaseLanguages_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define IBaseLanguages_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#define IBaseLanguages_Add(This,Language)	\
    ( (This)->lpVtbl -> Add(This,Language) ) 

#define IBaseLanguages_Remove(This,Index)	\
    ( (This)->lpVtbl -> Remove(This,Index) ) 

#define IBaseLanguages_RemoveAll(This)	\
    ( (This)->lpVtbl -> RemoveAll(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IBaseLanguages_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_BaseLanguages;

#ifdef __cplusplus

class DECLSPEC_UUID("1000200e-0000-1056-976E-008048D53AE3")
BaseLanguages;
#endif

EXTERN_C const CLSID CLSID_TextLanguage;

#ifdef __cplusplus

class DECLSPEC_UUID("1000200d-0000-1056-976E-008048D53AE3")
TextLanguage;
#endif

#ifndef __IPredefinedLanguage_INTERFACE_DEFINED__
#define __IPredefinedLanguage_INTERFACE_DEFINED__

/* interface IPredefinedLanguage */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IPredefinedLanguage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001011-0000-1056-976E-008048D53AE3")
    IPredefinedLanguage : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TextLanguage( 
            /* [retval][out] */ ITextLanguage **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_InternalName( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ExternalName( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LanguageCategory( 
            /* [retval][out] */ LanguageCategoryEnum *Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPredefinedLanguageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPredefinedLanguage * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPredefinedLanguage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPredefinedLanguage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPredefinedLanguage * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPredefinedLanguage * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPredefinedLanguage * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPredefinedLanguage * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPredefinedLanguage * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TextLanguage )( 
            IPredefinedLanguage * This,
            /* [retval][out] */ ITextLanguage **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_InternalName )( 
            IPredefinedLanguage * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExternalName )( 
            IPredefinedLanguage * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageCategory )( 
            IPredefinedLanguage * This,
            /* [retval][out] */ LanguageCategoryEnum *Result);
        
        END_INTERFACE
    } IPredefinedLanguageVtbl;

    interface IPredefinedLanguage
    {
        CONST_VTBL struct IPredefinedLanguageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPredefinedLanguage_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPredefinedLanguage_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPredefinedLanguage_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPredefinedLanguage_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPredefinedLanguage_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPredefinedLanguage_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPredefinedLanguage_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPredefinedLanguage_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IPredefinedLanguage_get_TextLanguage(This,Result)	\
    ( (This)->lpVtbl -> get_TextLanguage(This,Result) ) 

#define IPredefinedLanguage_get_InternalName(This,Result)	\
    ( (This)->lpVtbl -> get_InternalName(This,Result) ) 

#define IPredefinedLanguage_get_ExternalName(This,Result)	\
    ( (This)->lpVtbl -> get_ExternalName(This,Result) ) 

#define IPredefinedLanguage_get_LanguageCategory(This,Result)	\
    ( (This)->lpVtbl -> get_LanguageCategory(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPredefinedLanguage_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_PredefinedLanguage;

#ifdef __cplusplus

class DECLSPEC_UUID("10002011-0000-1056-976E-008048D53AE3")
PredefinedLanguage;
#endif

#ifndef __IPredefinedLanguages_INTERFACE_DEFINED__
#define __IPredefinedLanguages_INTERFACE_DEFINED__

/* interface IPredefinedLanguages */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IPredefinedLanguages;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001010-0000-1056-976E-008048D53AE3")
    IPredefinedLanguages : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ IPredefinedLanguage **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ IPredefinedLanguage **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindLanguage( 
            /* [in] */ BSTR InternalName,
            /* [retval][out] */ IPredefinedLanguage **Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPredefinedLanguagesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPredefinedLanguages * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPredefinedLanguages * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPredefinedLanguages * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPredefinedLanguages * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPredefinedLanguages * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPredefinedLanguages * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPredefinedLanguages * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            IPredefinedLanguages * This,
            /* [in] */ long Index,
            /* [retval][out] */ IPredefinedLanguage **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPredefinedLanguages * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IPredefinedLanguages * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IPredefinedLanguages * This,
            /* [in] */ long Index,
            /* [retval][out] */ IPredefinedLanguage **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindLanguage )( 
            IPredefinedLanguages * This,
            /* [in] */ BSTR InternalName,
            /* [retval][out] */ IPredefinedLanguage **Result);
        
        END_INTERFACE
    } IPredefinedLanguagesVtbl;

    interface IPredefinedLanguages
    {
        CONST_VTBL struct IPredefinedLanguagesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPredefinedLanguages_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPredefinedLanguages_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPredefinedLanguages_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPredefinedLanguages_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPredefinedLanguages_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPredefinedLanguages_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPredefinedLanguages_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPredefinedLanguages_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define IPredefinedLanguages_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IPredefinedLanguages_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define IPredefinedLanguages_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#define IPredefinedLanguages_FindLanguage(This,InternalName,Result)	\
    ( (This)->lpVtbl -> FindLanguage(This,InternalName,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPredefinedLanguages_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_PredefinedLanguages;

#ifdef __cplusplus

class DECLSPEC_UUID("10002010-0000-1056-976E-008048D53AE3")
PredefinedLanguages;
#endif

#ifndef __ILanguageDatabase_INTERFACE_DEFINED__
#define __ILanguageDatabase_INTERFACE_DEFINED__

/* interface ILanguageDatabase */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ILanguageDatabase;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000103c-0000-1056-976E-008048D53AE3")
    ILanguageDatabase : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFrom( 
            /* [in] */ BSTR FolderPath) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateTextLanguage( 
            /* [in] */ BSTR LanguageNames,
            /* [retval][out] */ ITextLanguage **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateCompoundTextLanguage( 
            /* [in] */ IStringsCollection *LanguageNames,
            /* [retval][out] */ ITextLanguage **Result) = 0;
        
        virtual /* [helpstring][id][helpcontext] */ HRESULT STDMETHODCALLTYPE OpenDictionaryExtension( 
            /* [in] */ LanguageIdEnum LanguageId,
            /* [retval][out] */ IDictionary **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DictionaryExtensionsPath( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DictionaryExtensionsPath( 
            /* [in] */ BSTR Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ILanguageDatabaseVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ILanguageDatabase * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ILanguageDatabase * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ILanguageDatabase * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ILanguageDatabase * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ILanguageDatabase * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ILanguageDatabase * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ILanguageDatabase * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ILanguageDatabase * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFrom )( 
            ILanguageDatabase * This,
            /* [in] */ BSTR FolderPath);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateTextLanguage )( 
            ILanguageDatabase * This,
            /* [in] */ BSTR LanguageNames,
            /* [retval][out] */ ITextLanguage **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateCompoundTextLanguage )( 
            ILanguageDatabase * This,
            /* [in] */ IStringsCollection *LanguageNames,
            /* [retval][out] */ ITextLanguage **Result);
        
        /* [helpstring][id][helpcontext] */ HRESULT ( STDMETHODCALLTYPE *OpenDictionaryExtension )( 
            ILanguageDatabase * This,
            /* [in] */ LanguageIdEnum LanguageId,
            /* [retval][out] */ IDictionary **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DictionaryExtensionsPath )( 
            ILanguageDatabase * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DictionaryExtensionsPath )( 
            ILanguageDatabase * This,
            /* [in] */ BSTR Value);
        
        END_INTERFACE
    } ILanguageDatabaseVtbl;

    interface ILanguageDatabase
    {
        CONST_VTBL struct ILanguageDatabaseVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ILanguageDatabase_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ILanguageDatabase_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ILanguageDatabase_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ILanguageDatabase_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ILanguageDatabase_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ILanguageDatabase_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ILanguageDatabase_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ILanguageDatabase_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ILanguageDatabase_LoadFrom(This,FolderPath)	\
    ( (This)->lpVtbl -> LoadFrom(This,FolderPath) ) 

#define ILanguageDatabase_CreateTextLanguage(This,LanguageNames,Result)	\
    ( (This)->lpVtbl -> CreateTextLanguage(This,LanguageNames,Result) ) 

#define ILanguageDatabase_CreateCompoundTextLanguage(This,LanguageNames,Result)	\
    ( (This)->lpVtbl -> CreateCompoundTextLanguage(This,LanguageNames,Result) ) 

#define ILanguageDatabase_OpenDictionaryExtension(This,LanguageId,Result)	\
    ( (This)->lpVtbl -> OpenDictionaryExtension(This,LanguageId,Result) ) 

#define ILanguageDatabase_get_DictionaryExtensionsPath(This,Result)	\
    ( (This)->lpVtbl -> get_DictionaryExtensionsPath(This,Result) ) 

#define ILanguageDatabase_put_DictionaryExtensionsPath(This,Value)	\
    ( (This)->lpVtbl -> put_DictionaryExtensionsPath(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ILanguageDatabase_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_LanguageDatabase;

#ifdef __cplusplus

class DECLSPEC_UUID("1000203b-0000-1056-976E-008048D53AE3")
LanguageDatabase;
#endif

#ifndef __IFuzzyStringsCollection_INTERFACE_DEFINED__
#define __IFuzzyStringsCollection_INTERFACE_DEFINED__

/* interface IFuzzyStringsCollection */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IFuzzyStringsCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001074-0000-1056-976E-008048D53AE3")
    IFuzzyStringsCollection : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ IFuzzyString **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Element( 
            /* [in] */ long Index,
            /* [in] */ IFuzzyString *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ IFuzzyString **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ IFuzzyString *Value,
            /* [in] */ long Index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ IFuzzyString *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ long Index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveAll( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IFuzzyStringsCollection *From) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFuzzyStringsCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IFuzzyStringsCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IFuzzyStringsCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IFuzzyStringsCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IFuzzyStringsCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IFuzzyStringsCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IFuzzyStringsCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IFuzzyStringsCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            IFuzzyStringsCollection * This,
            /* [in] */ long Index,
            /* [retval][out] */ IFuzzyString **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Element )( 
            IFuzzyStringsCollection * This,
            /* [in] */ long Index,
            /* [in] */ IFuzzyString *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IFuzzyStringsCollection * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IFuzzyStringsCollection * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IFuzzyStringsCollection * This,
            /* [in] */ long Index,
            /* [retval][out] */ IFuzzyString **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            IFuzzyStringsCollection * This,
            /* [in] */ IFuzzyString *Value,
            /* [in] */ long Index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IFuzzyStringsCollection * This,
            /* [in] */ IFuzzyString *Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IFuzzyStringsCollection * This,
            /* [in] */ long Index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAll )( 
            IFuzzyStringsCollection * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IFuzzyStringsCollection * This,
            /* [in] */ IFuzzyStringsCollection *From);
        
        END_INTERFACE
    } IFuzzyStringsCollectionVtbl;

    interface IFuzzyStringsCollection
    {
        CONST_VTBL struct IFuzzyStringsCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFuzzyStringsCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IFuzzyStringsCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IFuzzyStringsCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IFuzzyStringsCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IFuzzyStringsCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IFuzzyStringsCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IFuzzyStringsCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IFuzzyStringsCollection_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define IFuzzyStringsCollection_put_Element(This,Index,Value)	\
    ( (This)->lpVtbl -> put_Element(This,Index,Value) ) 

#define IFuzzyStringsCollection_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IFuzzyStringsCollection_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define IFuzzyStringsCollection_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#define IFuzzyStringsCollection_Insert(This,Value,Index)	\
    ( (This)->lpVtbl -> Insert(This,Value,Index) ) 

#define IFuzzyStringsCollection_Add(This,Value)	\
    ( (This)->lpVtbl -> Add(This,Value) ) 

#define IFuzzyStringsCollection_Remove(This,Index)	\
    ( (This)->lpVtbl -> Remove(This,Index) ) 

#define IFuzzyStringsCollection_RemoveAll(This)	\
    ( (This)->lpVtbl -> RemoveAll(This) ) 

#define IFuzzyStringsCollection_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IFuzzyStringsCollection_INTERFACE_DEFINED__ */


#ifndef __IDictionaryDescription_INTERFACE_DEFINED__
#define __IDictionaryDescription_INTERFACE_DEFINED__

/* interface IDictionaryDescription */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IDictionaryDescription;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000105D-0000-1056-976E-008048D53AE3")
    IDictionaryDescription : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ DictionaryTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Weight( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Weight( 
            /* [in] */ long newValue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDictionaryDescriptionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDictionaryDescription * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDictionaryDescription * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDictionaryDescription * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDictionaryDescription * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDictionaryDescription * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDictionaryDescription * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDictionaryDescription * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IDictionaryDescription * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IDictionaryDescription * This,
            /* [retval][out] */ DictionaryTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Weight )( 
            IDictionaryDescription * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Weight )( 
            IDictionaryDescription * This,
            /* [in] */ long newValue);
        
        END_INTERFACE
    } IDictionaryDescriptionVtbl;

    interface IDictionaryDescription
    {
        CONST_VTBL struct IDictionaryDescriptionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDictionaryDescription_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDictionaryDescription_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDictionaryDescription_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDictionaryDescription_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IDictionaryDescription_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IDictionaryDescription_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IDictionaryDescription_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IDictionaryDescription_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IDictionaryDescription_get_Type(This,Result)	\
    ( (This)->lpVtbl -> get_Type(This,Result) ) 

#define IDictionaryDescription_get_Weight(This,Result)	\
    ( (This)->lpVtbl -> get_Weight(This,Result) ) 

#define IDictionaryDescription_put_Weight(This,newValue)	\
    ( (This)->lpVtbl -> put_Weight(This,newValue) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDictionaryDescription_INTERFACE_DEFINED__ */


#ifndef __IStandardDictionaryDescription_INTERFACE_DEFINED__
#define __IStandardDictionaryDescription_INTERFACE_DEFINED__

/* interface IStandardDictionaryDescription */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IStandardDictionaryDescription;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000105E-0000-1056-976E-008048D53AE3")
    IStandardDictionaryDescription : public IDictionaryDescription
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LanguageId( 
            /* [retval][out] */ LanguageIdEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_LanguageId( 
            /* [in] */ LanguageIdEnum newValue) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CanUseTrigrams( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CanUseTrigrams( 
            /* [in] */ VARIANT_BOOL newValue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IStandardDictionaryDescriptionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IStandardDictionaryDescription * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IStandardDictionaryDescription * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IStandardDictionaryDescription * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IStandardDictionaryDescription * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IStandardDictionaryDescription * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IStandardDictionaryDescription * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IStandardDictionaryDescription * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IStandardDictionaryDescription * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IStandardDictionaryDescription * This,
            /* [retval][out] */ DictionaryTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Weight )( 
            IStandardDictionaryDescription * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Weight )( 
            IStandardDictionaryDescription * This,
            /* [in] */ long newValue);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageId )( 
            IStandardDictionaryDescription * This,
            /* [retval][out] */ LanguageIdEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LanguageId )( 
            IStandardDictionaryDescription * This,
            /* [in] */ LanguageIdEnum newValue);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CanUseTrigrams )( 
            IStandardDictionaryDescription * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CanUseTrigrams )( 
            IStandardDictionaryDescription * This,
            /* [in] */ VARIANT_BOOL newValue);
        
        END_INTERFACE
    } IStandardDictionaryDescriptionVtbl;

    interface IStandardDictionaryDescription
    {
        CONST_VTBL struct IStandardDictionaryDescriptionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IStandardDictionaryDescription_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IStandardDictionaryDescription_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IStandardDictionaryDescription_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IStandardDictionaryDescription_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IStandardDictionaryDescription_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IStandardDictionaryDescription_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IStandardDictionaryDescription_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IStandardDictionaryDescription_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IStandardDictionaryDescription_get_Type(This,Result)	\
    ( (This)->lpVtbl -> get_Type(This,Result) ) 

#define IStandardDictionaryDescription_get_Weight(This,Result)	\
    ( (This)->lpVtbl -> get_Weight(This,Result) ) 

#define IStandardDictionaryDescription_put_Weight(This,newValue)	\
    ( (This)->lpVtbl -> put_Weight(This,newValue) ) 


#define IStandardDictionaryDescription_get_LanguageId(This,Result)	\
    ( (This)->lpVtbl -> get_LanguageId(This,Result) ) 

#define IStandardDictionaryDescription_put_LanguageId(This,newValue)	\
    ( (This)->lpVtbl -> put_LanguageId(This,newValue) ) 

#define IStandardDictionaryDescription_get_CanUseTrigrams(This,Result)	\
    ( (This)->lpVtbl -> get_CanUseTrigrams(This,Result) ) 

#define IStandardDictionaryDescription_put_CanUseTrigrams(This,newValue)	\
    ( (This)->lpVtbl -> put_CanUseTrigrams(This,newValue) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IStandardDictionaryDescription_INTERFACE_DEFINED__ */


#ifndef __IUserDictionaryDescription_INTERFACE_DEFINED__
#define __IUserDictionaryDescription_INTERFACE_DEFINED__

/* interface IUserDictionaryDescription */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IUserDictionaryDescription;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000105F-0000-1056-976E-008048D53AE3")
    IUserDictionaryDescription : public IDictionaryDescription
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FileName( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FileName( 
            /* [in] */ BSTR newValue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUserDictionaryDescriptionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IUserDictionaryDescription * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IUserDictionaryDescription * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IUserDictionaryDescription * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IUserDictionaryDescription * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IUserDictionaryDescription * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IUserDictionaryDescription * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IUserDictionaryDescription * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IUserDictionaryDescription * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IUserDictionaryDescription * This,
            /* [retval][out] */ DictionaryTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Weight )( 
            IUserDictionaryDescription * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Weight )( 
            IUserDictionaryDescription * This,
            /* [in] */ long newValue);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileName )( 
            IUserDictionaryDescription * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FileName )( 
            IUserDictionaryDescription * This,
            /* [in] */ BSTR newValue);
        
        END_INTERFACE
    } IUserDictionaryDescriptionVtbl;

    interface IUserDictionaryDescription
    {
        CONST_VTBL struct IUserDictionaryDescriptionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUserDictionaryDescription_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IUserDictionaryDescription_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IUserDictionaryDescription_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IUserDictionaryDescription_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IUserDictionaryDescription_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IUserDictionaryDescription_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IUserDictionaryDescription_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IUserDictionaryDescription_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IUserDictionaryDescription_get_Type(This,Result)	\
    ( (This)->lpVtbl -> get_Type(This,Result) ) 

#define IUserDictionaryDescription_get_Weight(This,Result)	\
    ( (This)->lpVtbl -> get_Weight(This,Result) ) 

#define IUserDictionaryDescription_put_Weight(This,newValue)	\
    ( (This)->lpVtbl -> put_Weight(This,newValue) ) 


#define IUserDictionaryDescription_get_FileName(This,Result)	\
    ( (This)->lpVtbl -> get_FileName(This,Result) ) 

#define IUserDictionaryDescription_put_FileName(This,newValue)	\
    ( (This)->lpVtbl -> put_FileName(This,newValue) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUserDictionaryDescription_INTERFACE_DEFINED__ */


#ifndef __IRegExpDictionaryDescription_INTERFACE_DEFINED__
#define __IRegExpDictionaryDescription_INTERFACE_DEFINED__

/* interface IRegExpDictionaryDescription */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IRegExpDictionaryDescription;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001060-0000-1056-976E-008048D53AE3")
    IRegExpDictionaryDescription : public IDictionaryDescription
    {
    public:
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetText( 
            /* [in] */ BSTR newValue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRegExpDictionaryDescriptionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRegExpDictionaryDescription * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRegExpDictionaryDescription * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRegExpDictionaryDescription * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRegExpDictionaryDescription * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRegExpDictionaryDescription * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRegExpDictionaryDescription * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRegExpDictionaryDescription * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IRegExpDictionaryDescription * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IRegExpDictionaryDescription * This,
            /* [retval][out] */ DictionaryTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Weight )( 
            IRegExpDictionaryDescription * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Weight )( 
            IRegExpDictionaryDescription * This,
            /* [in] */ long newValue);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetText )( 
            IRegExpDictionaryDescription * This,
            /* [in] */ BSTR newValue);
        
        END_INTERFACE
    } IRegExpDictionaryDescriptionVtbl;

    interface IRegExpDictionaryDescription
    {
        CONST_VTBL struct IRegExpDictionaryDescriptionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRegExpDictionaryDescription_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRegExpDictionaryDescription_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRegExpDictionaryDescription_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRegExpDictionaryDescription_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRegExpDictionaryDescription_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRegExpDictionaryDescription_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRegExpDictionaryDescription_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRegExpDictionaryDescription_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IRegExpDictionaryDescription_get_Type(This,Result)	\
    ( (This)->lpVtbl -> get_Type(This,Result) ) 

#define IRegExpDictionaryDescription_get_Weight(This,Result)	\
    ( (This)->lpVtbl -> get_Weight(This,Result) ) 

#define IRegExpDictionaryDescription_put_Weight(This,newValue)	\
    ( (This)->lpVtbl -> put_Weight(This,newValue) ) 


#define IRegExpDictionaryDescription_SetText(This,newValue)	\
    ( (This)->lpVtbl -> SetText(This,newValue) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRegExpDictionaryDescription_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_DictionaryDescriptions;

#ifdef __cplusplus

class DECLSPEC_UUID("1000205F-0000-1056-976E-008048D53AE3")
DictionaryDescriptions;
#endif

EXTERN_C const CLSID CLSID_DictionaryDescription;

#ifdef __cplusplus

class DECLSPEC_UUID("10002050-0000-1056-976E-008048D53AE3")
DictionaryDescription;
#endif

EXTERN_C const CLSID CLSID_RegExpDictionaryDescription;

#ifdef __cplusplus

class DECLSPEC_UUID("10002053-0000-1056-976E-008048D53AE3")
RegExpDictionaryDescription;
#endif

EXTERN_C const CLSID CLSID_UserDictionaryDescription;

#ifdef __cplusplus

class DECLSPEC_UUID("10002052-0000-1056-976E-008048D53AE3")
UserDictionaryDescription;
#endif

EXTERN_C const CLSID CLSID_StandardDictionaryDescription;

#ifdef __cplusplus

class DECLSPEC_UUID("10002051-0000-1056-976E-008048D53AE3")
StandardDictionaryDescription;
#endif

#ifndef __IFuzzyString_INTERFACE_DEFINED__
#define __IFuzzyString_INTERFACE_DEFINED__

/* interface IFuzzyString */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IFuzzyString;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001073-0000-1056-976E-008048D53AE3")
    IFuzzyString : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Length( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CharacterVariants( 
            /* [in] */ long Position,
            /* [retval][out] */ BSTR *Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFuzzyStringVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IFuzzyString * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IFuzzyString * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IFuzzyString * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IFuzzyString * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IFuzzyString * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IFuzzyString * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IFuzzyString * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            IFuzzyString * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CharacterVariants )( 
            IFuzzyString * This,
            /* [in] */ long Position,
            /* [retval][out] */ BSTR *Result);
        
        END_INTERFACE
    } IFuzzyStringVtbl;

    interface IFuzzyString
    {
        CONST_VTBL struct IFuzzyStringVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFuzzyString_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IFuzzyString_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IFuzzyString_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IFuzzyString_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IFuzzyString_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IFuzzyString_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IFuzzyString_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IFuzzyString_get_Length(This,Result)	\
    ( (This)->lpVtbl -> get_Length(This,Result) ) 

#define IFuzzyString_get_CharacterVariants(This,Position,Result)	\
    ( (This)->lpVtbl -> get_CharacterVariants(This,Position,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IFuzzyString_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_FuzzyString;

#ifdef __cplusplus

class DECLSPEC_UUID("10002062-0000-1056-976E-008048D53AE3")
FuzzyString;
#endif

#ifndef __IExternalDictionaryCallback_INTERFACE_DEFINED__
#define __IExternalDictionaryCallback_INTERFACE_DEFINED__

/* interface IExternalDictionaryCallback */
/* [helpstring][helpcontext][oleautomation][uuid][object] */ 


EXTERN_C const IID IID_IExternalDictionaryCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001075-0000-1056-976E-008048D53AE3")
    IExternalDictionaryCallback : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ExternalDictionaryResult( 
            /* [in] */ BSTR Word,
            /* [in] */ long Confidence,
            /* [in] */ long RequestIndex) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IExternalDictionaryCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IExternalDictionaryCallback * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IExternalDictionaryCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IExternalDictionaryCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IExternalDictionaryCallback * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IExternalDictionaryCallback * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IExternalDictionaryCallback * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IExternalDictionaryCallback * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ExternalDictionaryResult )( 
            IExternalDictionaryCallback * This,
            /* [in] */ BSTR Word,
            /* [in] */ long Confidence,
            /* [in] */ long RequestIndex);
        
        END_INTERFACE
    } IExternalDictionaryCallbackVtbl;

    interface IExternalDictionaryCallback
    {
        CONST_VTBL struct IExternalDictionaryCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IExternalDictionaryCallback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IExternalDictionaryCallback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IExternalDictionaryCallback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IExternalDictionaryCallback_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IExternalDictionaryCallback_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IExternalDictionaryCallback_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IExternalDictionaryCallback_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IExternalDictionaryCallback_ExternalDictionaryResult(This,Word,Confidence,RequestIndex)	\
    ( (This)->lpVtbl -> ExternalDictionaryResult(This,Word,Confidence,RequestIndex) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IExternalDictionaryCallback_INTERFACE_DEFINED__ */


#ifndef __IExternalDictionary_INTERFACE_DEFINED__
#define __IExternalDictionary_INTERFACE_DEFINED__

/* interface IExternalDictionary */
/* [helpstring][helpcontext][oleautomation][nonextensible][uuid][object] */ 


EXTERN_C const IID IID_IExternalDictionary;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001071-0000-1056-976E-008048D53AE3")
    IExternalDictionary : public IUnknown
    {
    public:
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CheckWords( 
            /* [in] */ IFuzzyStringsCollection *Request,
            /* [in] */ IExternalDictionaryCallback *Callback) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CheckPrefix( 
            /* [in] */ IFuzzyString *Prefix,
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IExternalDictionaryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IExternalDictionary * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IExternalDictionary * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IExternalDictionary * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CheckWords )( 
            IExternalDictionary * This,
            /* [in] */ IFuzzyStringsCollection *Request,
            /* [in] */ IExternalDictionaryCallback *Callback);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CheckPrefix )( 
            IExternalDictionary * This,
            /* [in] */ IFuzzyString *Prefix,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        END_INTERFACE
    } IExternalDictionaryVtbl;

    interface IExternalDictionary
    {
        CONST_VTBL struct IExternalDictionaryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IExternalDictionary_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IExternalDictionary_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IExternalDictionary_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IExternalDictionary_CheckWords(This,Request,Callback)	\
    ( (This)->lpVtbl -> CheckWords(This,Request,Callback) ) 

#define IExternalDictionary_CheckPrefix(This,Prefix,Result)	\
    ( (This)->lpVtbl -> CheckPrefix(This,Prefix,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IExternalDictionary_INTERFACE_DEFINED__ */


#ifndef __IExternalDictionaryDescription_INTERFACE_DEFINED__
#define __IExternalDictionaryDescription_INTERFACE_DEFINED__

/* interface IExternalDictionaryDescription */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IExternalDictionaryDescription;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001072-0000-1056-976E-008048D53AE3")
    IExternalDictionaryDescription : public IDictionaryDescription
    {
    public:
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetDictionary( 
            /* [in] */ IExternalDictionary *Dictionary) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CheckPrefixes( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CheckPrefixes( 
            /* [in] */ VARIANT_BOOL newValue) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FullFuzzySupport( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FullFuzzySupport( 
            /* [in] */ VARIANT_BOOL newValue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IExternalDictionaryDescriptionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IExternalDictionaryDescription * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IExternalDictionaryDescription * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IExternalDictionaryDescription * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IExternalDictionaryDescription * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IExternalDictionaryDescription * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IExternalDictionaryDescription * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IExternalDictionaryDescription * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IExternalDictionaryDescription * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IExternalDictionaryDescription * This,
            /* [retval][out] */ DictionaryTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Weight )( 
            IExternalDictionaryDescription * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Weight )( 
            IExternalDictionaryDescription * This,
            /* [in] */ long newValue);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetDictionary )( 
            IExternalDictionaryDescription * This,
            /* [in] */ IExternalDictionary *Dictionary);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CheckPrefixes )( 
            IExternalDictionaryDescription * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CheckPrefixes )( 
            IExternalDictionaryDescription * This,
            /* [in] */ VARIANT_BOOL newValue);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FullFuzzySupport )( 
            IExternalDictionaryDescription * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FullFuzzySupport )( 
            IExternalDictionaryDescription * This,
            /* [in] */ VARIANT_BOOL newValue);
        
        END_INTERFACE
    } IExternalDictionaryDescriptionVtbl;

    interface IExternalDictionaryDescription
    {
        CONST_VTBL struct IExternalDictionaryDescriptionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IExternalDictionaryDescription_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IExternalDictionaryDescription_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IExternalDictionaryDescription_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IExternalDictionaryDescription_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IExternalDictionaryDescription_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IExternalDictionaryDescription_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IExternalDictionaryDescription_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IExternalDictionaryDescription_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IExternalDictionaryDescription_get_Type(This,Result)	\
    ( (This)->lpVtbl -> get_Type(This,Result) ) 

#define IExternalDictionaryDescription_get_Weight(This,Result)	\
    ( (This)->lpVtbl -> get_Weight(This,Result) ) 

#define IExternalDictionaryDescription_put_Weight(This,newValue)	\
    ( (This)->lpVtbl -> put_Weight(This,newValue) ) 


#define IExternalDictionaryDescription_SetDictionary(This,Dictionary)	\
    ( (This)->lpVtbl -> SetDictionary(This,Dictionary) ) 

#define IExternalDictionaryDescription_get_CheckPrefixes(This,Result)	\
    ( (This)->lpVtbl -> get_CheckPrefixes(This,Result) ) 

#define IExternalDictionaryDescription_put_CheckPrefixes(This,newValue)	\
    ( (This)->lpVtbl -> put_CheckPrefixes(This,newValue) ) 

#define IExternalDictionaryDescription_get_FullFuzzySupport(This,Result)	\
    ( (This)->lpVtbl -> get_FullFuzzySupport(This,Result) ) 

#define IExternalDictionaryDescription_put_FullFuzzySupport(This,newValue)	\
    ( (This)->lpVtbl -> put_FullFuzzySupport(This,newValue) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IExternalDictionaryDescription_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_ExternalDictionaryDescription;

#ifdef __cplusplus

class DECLSPEC_UUID("10002064-0000-1056-976E-008048D53AE3")
ExternalDictionaryDescription;
#endif

EXTERN_C const CLSID CLSID_BarcodeParams;

#ifdef __cplusplus

class DECLSPEC_UUID("10002020-0000-1056-976E-008048D53AE3")
BarcodeParams;
#endif

#ifndef __IBarcodeSymbol_INTERFACE_DEFINED__
#define __IBarcodeSymbol_INTERFACE_DEFINED__

/* interface IBarcodeSymbol */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IBarcodeSymbol;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010C5-0000-1056-976E-008048D53AE3")
    IBarcodeSymbol : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Character( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Character( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Right( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Right( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Bottom( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Bottom( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CharConfidence( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CharConfidence( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsBinaryData( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsBinaryData( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsStartStopSymbol( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsStartStopSymbol( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IBarcodeSymbol *From) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IBarcodeSymbolVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IBarcodeSymbol * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IBarcodeSymbol * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IBarcodeSymbol * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IBarcodeSymbol * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IBarcodeSymbol * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IBarcodeSymbol * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IBarcodeSymbol * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IBarcodeSymbol * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Character )( 
            IBarcodeSymbol * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Character )( 
            IBarcodeSymbol * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            IBarcodeSymbol * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            IBarcodeSymbol * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            IBarcodeSymbol * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            IBarcodeSymbol * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Right )( 
            IBarcodeSymbol * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Right )( 
            IBarcodeSymbol * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Bottom )( 
            IBarcodeSymbol * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Bottom )( 
            IBarcodeSymbol * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CharConfidence )( 
            IBarcodeSymbol * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CharConfidence )( 
            IBarcodeSymbol * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsBinaryData )( 
            IBarcodeSymbol * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsBinaryData )( 
            IBarcodeSymbol * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsStartStopSymbol )( 
            IBarcodeSymbol * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsStartStopSymbol )( 
            IBarcodeSymbol * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IBarcodeSymbol * This,
            /* [in] */ IBarcodeSymbol *From);
        
        END_INTERFACE
    } IBarcodeSymbolVtbl;

    interface IBarcodeSymbol
    {
        CONST_VTBL struct IBarcodeSymbolVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IBarcodeSymbol_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IBarcodeSymbol_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IBarcodeSymbol_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IBarcodeSymbol_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IBarcodeSymbol_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IBarcodeSymbol_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IBarcodeSymbol_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IBarcodeSymbol_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IBarcodeSymbol_get_Character(This,Result)	\
    ( (This)->lpVtbl -> get_Character(This,Result) ) 

#define IBarcodeSymbol_put_Character(This,Value)	\
    ( (This)->lpVtbl -> put_Character(This,Value) ) 

#define IBarcodeSymbol_get_Left(This,Result)	\
    ( (This)->lpVtbl -> get_Left(This,Result) ) 

#define IBarcodeSymbol_put_Left(This,Value)	\
    ( (This)->lpVtbl -> put_Left(This,Value) ) 

#define IBarcodeSymbol_get_Top(This,Result)	\
    ( (This)->lpVtbl -> get_Top(This,Result) ) 

#define IBarcodeSymbol_put_Top(This,Value)	\
    ( (This)->lpVtbl -> put_Top(This,Value) ) 

#define IBarcodeSymbol_get_Right(This,Result)	\
    ( (This)->lpVtbl -> get_Right(This,Result) ) 

#define IBarcodeSymbol_put_Right(This,Value)	\
    ( (This)->lpVtbl -> put_Right(This,Value) ) 

#define IBarcodeSymbol_get_Bottom(This,Result)	\
    ( (This)->lpVtbl -> get_Bottom(This,Result) ) 

#define IBarcodeSymbol_put_Bottom(This,Value)	\
    ( (This)->lpVtbl -> put_Bottom(This,Value) ) 

#define IBarcodeSymbol_get_CharConfidence(This,Result)	\
    ( (This)->lpVtbl -> get_CharConfidence(This,Result) ) 

#define IBarcodeSymbol_put_CharConfidence(This,Value)	\
    ( (This)->lpVtbl -> put_CharConfidence(This,Value) ) 

#define IBarcodeSymbol_get_IsBinaryData(This,Result)	\
    ( (This)->lpVtbl -> get_IsBinaryData(This,Result) ) 

#define IBarcodeSymbol_put_IsBinaryData(This,Value)	\
    ( (This)->lpVtbl -> put_IsBinaryData(This,Value) ) 

#define IBarcodeSymbol_get_IsStartStopSymbol(This,Result)	\
    ( (This)->lpVtbl -> get_IsStartStopSymbol(This,Result) ) 

#define IBarcodeSymbol_put_IsStartStopSymbol(This,Value)	\
    ( (This)->lpVtbl -> put_IsStartStopSymbol(This,Value) ) 

#define IBarcodeSymbol_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IBarcodeSymbol_INTERFACE_DEFINED__ */


#ifndef __IBarcodeText_INTERFACE_DEFINED__
#define __IBarcodeText_INTERFACE_DEFINED__

/* interface IBarcodeText */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IBarcodeText;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010C6-0000-1056-976E-008048D53AE3")
    IBarcodeText : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ IBarcodeSymbol **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ IBarcodeSymbol **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ IBarcodeSymbol *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveAll( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateBarcodeSymbol( 
            /* [retval][out] */ IBarcodeSymbol **Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IBarcodeTextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IBarcodeText * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IBarcodeText * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IBarcodeText * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IBarcodeText * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IBarcodeText * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IBarcodeText * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IBarcodeText * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            IBarcodeText * This,
            /* [in] */ long Index,
            /* [retval][out] */ IBarcodeSymbol **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IBarcodeText * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IBarcodeText * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IBarcodeText * This,
            /* [in] */ long Index,
            /* [retval][out] */ IBarcodeSymbol **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IBarcodeText * This,
            /* [in] */ IBarcodeSymbol *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAll )( 
            IBarcodeText * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateBarcodeSymbol )( 
            IBarcodeText * This,
            /* [retval][out] */ IBarcodeSymbol **Result);
        
        END_INTERFACE
    } IBarcodeTextVtbl;

    interface IBarcodeText
    {
        CONST_VTBL struct IBarcodeTextVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IBarcodeText_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IBarcodeText_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IBarcodeText_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IBarcodeText_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IBarcodeText_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IBarcodeText_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IBarcodeText_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IBarcodeText_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define IBarcodeText_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IBarcodeText_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define IBarcodeText_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#define IBarcodeText_Add(This,Result)	\
    ( (This)->lpVtbl -> Add(This,Result) ) 

#define IBarcodeText_RemoveAll(This)	\
    ( (This)->lpVtbl -> RemoveAll(This) ) 

#define IBarcodeText_CreateBarcodeSymbol(This,Result)	\
    ( (This)->lpVtbl -> CreateBarcodeSymbol(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IBarcodeText_INTERFACE_DEFINED__ */


#ifndef __IBlock_INTERFACE_DEFINED__
#define __IBlock_INTERFACE_DEFINED__

/* interface IBlock */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IBlock;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001003-0000-1056-976E-008048D53AE3")
    IBlock : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;

		virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RecognitionStatus( 
            /* [retval][out] */ BlockRecognitionStatusEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RecognitionStatus( 
            /* [in] */ BlockRecognitionStatusEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Region( 
            /* [retval][out] */ IRegion **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Region( 
            /* [in] */ IRegion *Value) = 0;

		  virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR Value) = 0;
        
		  virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ BlockTypeEnum *Result) = 0;

		   
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Move( 
            /* [in] */ long DeltaX,
            /* [in] */ long DeltaY) = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE get_TextBlockProperties(ITextBlockProperties **Result) = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE get_BarcodeBlockProperties(IBarcodeBlockProperties **Result) = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE get_PictureBlockProperties(void **Result) = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE get_AutoAnalysisBlockProperties(void **Result) = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE get_TableBlockProperties(void **Result) = 0;


        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UserProperty( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ VARIANT *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_UserProperty( 
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT Value) = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE get_CheckmarkBlockProperties(void **Result) = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE get_CheckmarkGroupProperties(void **Result) = 0;

        
        //virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BackgroundColor( 
        //    /* [retval][out] */ long *Result) = 0;
        //
        //virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BackgroundColor( 
        //    long Value) = 0;      
      
        //
        //virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Description( 
        //    /* [retval][out] */ BSTR *Result) = 0;
        //
        //virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Description( 
        //    BSTR Value) = 0;
        //
        //virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BlockLayerType( 
        //    /* [retval][out] */ BlockLayerTypeEnum *Result) = 0;
        //
        //virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BlockLayerType( 
        //    BlockLayerTypeEnum Value) = 0;
       
        //
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetAsTextBlock( 
        //    /* [retval][out] */ ITextBlock **Result) = 0;
        //
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetAsBarcodeBlock( 
        //    /* [retval][out] */ IBarcodeBlock **Result) = 0;
        //
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetAsRasterPictureBlock( 
        //    /* [retval][out] */ IRasterPictureBlock **Result) = 0;
        //
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetAsTableBlock( 
        //    /* [retval][out] */ ITableBlock **Result) = 0;
        //
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetAsCheckmarkBlock( 
        //    /* [retval][out] */ ICheckmarkBlock **Result) = 0;
        //
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetAsCheckmarkGroup( 
        //    /* [retval][out] */ ICheckmarkGroup **Result) = 0;
        //
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetAsSeparatorBlock( 
        //    /* [retval][out] */ ISeparatorBlock **Result) = 0;
        //
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetAsSeparatorGroup( 
        //    /* [retval][out] */ ISeparatorGroup **Result) = 0;
        //
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetAsVectorPictureBlock( 
        //    /* [retval][out] */ IVectorPictureBlock **Result) = 0;

		
        
    };
    
#else 	/* C style interface */

    typedef struct IBlockVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IBlock * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IBlock * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IBlock * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IBlock * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IBlock * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IBlock * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IBlock * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IBlock * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IBlock * This,
            /* [retval][out] */ BlockTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Region )( 
            IBlock * This,
            /* [retval][out] */ IRegion **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Region )( 
            IBlock * This,
            /* [in] */ IRegion *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserProperty )( 
            IBlock * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ VARIANT *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UserProperty )( 
            IBlock * This,
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundColor )( 
            IBlock * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundColor )( 
            IBlock * This,
            long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IBlock * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IBlock * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IBlock * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IBlock * This,
            BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlockLayerType )( 
            IBlock * This,
            /* [retval][out] */ BlockLayerTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlockLayerType )( 
            IBlock * This,
            BlockLayerTypeEnum Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IBlock * This,
            /* [in] */ long DeltaX,
            /* [in] */ long DeltaY);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsTextBlock )( 
            IBlock * This,
            /* [retval][out] */ ITextBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsBarcodeBlock )( 
            IBlock * This,
            /* [retval][out] */ IBarcodeBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsRasterPictureBlock )( 
            IBlock * This,
            /* [retval][out] */ IRasterPictureBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsTableBlock )( 
            IBlock * This,
            /* [retval][out] */ ITableBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsCheckmarkBlock )( 
            IBlock * This,
            /* [retval][out] */ ICheckmarkBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsCheckmarkGroup )( 
            IBlock * This,
            /* [retval][out] */ ICheckmarkGroup **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsSeparatorBlock )( 
            IBlock * This,
            /* [retval][out] */ ISeparatorBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsSeparatorGroup )( 
            IBlock * This,
            /* [retval][out] */ ISeparatorGroup **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsVectorPictureBlock )( 
            IBlock * This,
            /* [retval][out] */ IVectorPictureBlock **Result);
        
        END_INTERFACE
    } IBlockVtbl;

    interface IBlock
    {
        CONST_VTBL struct IBlockVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IBlock_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IBlock_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IBlock_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IBlock_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IBlock_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IBlock_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IBlock_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IBlock_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IBlock_get_Type(This,Result)	\
    ( (This)->lpVtbl -> get_Type(This,Result) ) 

#define IBlock_get_Region(This,Result)	\
    ( (This)->lpVtbl -> get_Region(This,Result) ) 

#define IBlock_put_Region(This,Value)	\
    ( (This)->lpVtbl -> put_Region(This,Value) ) 

#define IBlock_get_UserProperty(This,Name,Result)	\
    ( (This)->lpVtbl -> get_UserProperty(This,Name,Result) ) 

#define IBlock_put_UserProperty(This,Name,Value)	\
    ( (This)->lpVtbl -> put_UserProperty(This,Name,Value) ) 

#define IBlock_get_BackgroundColor(This,Result)	\
    ( (This)->lpVtbl -> get_BackgroundColor(This,Result) ) 

#define IBlock_put_BackgroundColor(This,Value)	\
    ( (This)->lpVtbl -> put_BackgroundColor(This,Value) ) 

#define IBlock_get_Name(This,Result)	\
    ( (This)->lpVtbl -> get_Name(This,Result) ) 

#define IBlock_put_Name(This,Value)	\
    ( (This)->lpVtbl -> put_Name(This,Value) ) 

#define IBlock_get_Description(This,Result)	\
    ( (This)->lpVtbl -> get_Description(This,Result) ) 

#define IBlock_put_Description(This,Value)	\
    ( (This)->lpVtbl -> put_Description(This,Value) ) 

#define IBlock_get_BlockLayerType(This,Result)	\
    ( (This)->lpVtbl -> get_BlockLayerType(This,Result) ) 

#define IBlock_put_BlockLayerType(This,Value)	\
    ( (This)->lpVtbl -> put_BlockLayerType(This,Value) ) 

#define IBlock_Move(This,DeltaX,DeltaY)	\
    ( (This)->lpVtbl -> Move(This,DeltaX,DeltaY) ) 

#define IBlock_GetAsTextBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsTextBlock(This,Result) ) 

#define IBlock_GetAsBarcodeBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsBarcodeBlock(This,Result) ) 

#define IBlock_GetAsRasterPictureBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsRasterPictureBlock(This,Result) ) 

#define IBlock_GetAsTableBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsTableBlock(This,Result) ) 

#define IBlock_GetAsCheckmarkBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsCheckmarkBlock(This,Result) ) 

#define IBlock_GetAsCheckmarkGroup(This,Result)	\
    ( (This)->lpVtbl -> GetAsCheckmarkGroup(This,Result) ) 

#define IBlock_GetAsSeparatorBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsSeparatorBlock(This,Result) ) 

#define IBlock_GetAsSeparatorGroup(This,Result)	\
    ( (This)->lpVtbl -> GetAsSeparatorGroup(This,Result) ) 

#define IBlock_GetAsVectorPictureBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsVectorPictureBlock(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IBlock_INTERFACE_DEFINED__ */



#ifndef __IBarcodeBlockProperties_INTERFACE_DEFINED__
#define __IBarcodeBlockProperties_INTERFACE_DEFINED__

/* interface IBarcodeBlock */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IBarcodeBlockProperties;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001005-0000-1056-976E-008048D53AE3")
    IBarcodeBlockProperties : public IDispatch
    {
    public:
		virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
		virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ImageProcessingParams( 
            /* [retval][out] */ IImageProcessingParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ImageProcessingParams( 
            /* [in] */ IImageProcessingParams *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BarcodeParams( 
            /* [retval][out] */ IBarcodeParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BarcodeParams( 
            /* [in] */ IBarcodeParams *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BarcodeType( 
            /* [retval][out] */ BarcodeTypeEnum *Result) = 0;

		virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BarcodeOrientation( 
            /* [retval][out] */ BarcodeOrientationEnum *Result) = 0;	
		        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BarcodeText( 
            /* [retval][out] */ IText **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BarcodeText( 
            /* [in] */ IText *Value) = 0;             
        
    };
    
#endif
#endif



#ifndef __IBarcodeBlock_INTERFACE_DEFINED__
#define __IBarcodeBlock_INTERFACE_DEFINED__

/* interface IBarcodeBlock */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IBarcodeBlock;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001005-0000-1056-976E-008048D53AE3")
    IBarcodeBlock : public IBlock
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ImageProcessingParams( 
            /* [retval][out] */ IImageProcessingParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ImageProcessingParams( 
            /* [in] */ IImageProcessingParams *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BarcodeParams( 
            /* [retval][out] */ IBarcodeParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BarcodeParams( 
            /* [in] */ IBarcodeParams *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BarcodeType( 
            /* [retval][out] */ BarcodeTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BarcodeText( 
            /* [retval][out] */ IBarcodeText **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BarcodeText( 
            /* [in] */ IBarcodeText *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SupplementType( 
            /* [retval][out] */ BarcodeSupplementTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SupplementValue( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IBarcodeBlock *From) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IBarcodeBlockVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IBarcodeBlock * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IBarcodeBlock * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IBarcodeBlock * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IBarcodeBlock * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IBarcodeBlock * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IBarcodeBlock * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IBarcodeBlock * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IBarcodeBlock * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IBarcodeBlock * This,
            /* [retval][out] */ BlockTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Region )( 
            IBarcodeBlock * This,
            /* [retval][out] */ IRegion **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Region )( 
            IBarcodeBlock * This,
            /* [in] */ IRegion *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserProperty )( 
            IBarcodeBlock * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ VARIANT *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UserProperty )( 
            IBarcodeBlock * This,
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundColor )( 
            IBarcodeBlock * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundColor )( 
            IBarcodeBlock * This,
            long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IBarcodeBlock * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IBarcodeBlock * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IBarcodeBlock * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IBarcodeBlock * This,
            BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlockLayerType )( 
            IBarcodeBlock * This,
            /* [retval][out] */ BlockLayerTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlockLayerType )( 
            IBarcodeBlock * This,
            BlockLayerTypeEnum Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IBarcodeBlock * This,
            /* [in] */ long DeltaX,
            /* [in] */ long DeltaY);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsTextBlock )( 
            IBarcodeBlock * This,
            /* [retval][out] */ ITextBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsBarcodeBlock )( 
            IBarcodeBlock * This,
            /* [retval][out] */ IBarcodeBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsRasterPictureBlock )( 
            IBarcodeBlock * This,
            /* [retval][out] */ IRasterPictureBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsTableBlock )( 
            IBarcodeBlock * This,
            /* [retval][out] */ ITableBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsCheckmarkBlock )( 
            IBarcodeBlock * This,
            /* [retval][out] */ ICheckmarkBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsCheckmarkGroup )( 
            IBarcodeBlock * This,
            /* [retval][out] */ ICheckmarkGroup **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsSeparatorBlock )( 
            IBarcodeBlock * This,
            /* [retval][out] */ ISeparatorBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsSeparatorGroup )( 
            IBarcodeBlock * This,
            /* [retval][out] */ ISeparatorGroup **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsVectorPictureBlock )( 
            IBarcodeBlock * This,
            /* [retval][out] */ IVectorPictureBlock **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ImageProcessingParams )( 
            IBarcodeBlock * This,
            /* [retval][out] */ IImageProcessingParams **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ImageProcessingParams )( 
            IBarcodeBlock * This,
            /* [in] */ IImageProcessingParams *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BarcodeParams )( 
            IBarcodeBlock * This,
            /* [retval][out] */ IBarcodeParams **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BarcodeParams )( 
            IBarcodeBlock * This,
            /* [in] */ IBarcodeParams *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BarcodeType )( 
            IBarcodeBlock * This,
            /* [retval][out] */ BarcodeTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BarcodeText )( 
            IBarcodeBlock * This,
            /* [retval][out] */ IBarcodeText **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BarcodeText )( 
            IBarcodeBlock * This,
            /* [in] */ IBarcodeText *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SupplementType )( 
            IBarcodeBlock * This,
            /* [retval][out] */ BarcodeSupplementTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SupplementValue )( 
            IBarcodeBlock * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            IBarcodeBlock * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IBarcodeBlock * This,
            /* [in] */ IBarcodeBlock *From);
        
        END_INTERFACE
    } IBarcodeBlockVtbl;

    interface IBarcodeBlock
    {
        CONST_VTBL struct IBarcodeBlockVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IBarcodeBlock_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IBarcodeBlock_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IBarcodeBlock_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IBarcodeBlock_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IBarcodeBlock_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IBarcodeBlock_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IBarcodeBlock_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IBarcodeBlock_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IBarcodeBlock_get_Type(This,Result)	\
    ( (This)->lpVtbl -> get_Type(This,Result) ) 

#define IBarcodeBlock_get_Region(This,Result)	\
    ( (This)->lpVtbl -> get_Region(This,Result) ) 

#define IBarcodeBlock_put_Region(This,Value)	\
    ( (This)->lpVtbl -> put_Region(This,Value) ) 

#define IBarcodeBlock_get_UserProperty(This,Name,Result)	\
    ( (This)->lpVtbl -> get_UserProperty(This,Name,Result) ) 

#define IBarcodeBlock_put_UserProperty(This,Name,Value)	\
    ( (This)->lpVtbl -> put_UserProperty(This,Name,Value) ) 

#define IBarcodeBlock_get_BackgroundColor(This,Result)	\
    ( (This)->lpVtbl -> get_BackgroundColor(This,Result) ) 

#define IBarcodeBlock_put_BackgroundColor(This,Value)	\
    ( (This)->lpVtbl -> put_BackgroundColor(This,Value) ) 

#define IBarcodeBlock_get_Name(This,Result)	\
    ( (This)->lpVtbl -> get_Name(This,Result) ) 

#define IBarcodeBlock_put_Name(This,Value)	\
    ( (This)->lpVtbl -> put_Name(This,Value) ) 

#define IBarcodeBlock_get_Description(This,Result)	\
    ( (This)->lpVtbl -> get_Description(This,Result) ) 

#define IBarcodeBlock_put_Description(This,Value)	\
    ( (This)->lpVtbl -> put_Description(This,Value) ) 

#define IBarcodeBlock_get_BlockLayerType(This,Result)	\
    ( (This)->lpVtbl -> get_BlockLayerType(This,Result) ) 

#define IBarcodeBlock_put_BlockLayerType(This,Value)	\
    ( (This)->lpVtbl -> put_BlockLayerType(This,Value) ) 

#define IBarcodeBlock_Move(This,DeltaX,DeltaY)	\
    ( (This)->lpVtbl -> Move(This,DeltaX,DeltaY) ) 

#define IBarcodeBlock_GetAsTextBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsTextBlock(This,Result) ) 

#define IBarcodeBlock_GetAsBarcodeBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsBarcodeBlock(This,Result) ) 

#define IBarcodeBlock_GetAsRasterPictureBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsRasterPictureBlock(This,Result) ) 

#define IBarcodeBlock_GetAsTableBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsTableBlock(This,Result) ) 

#define IBarcodeBlock_GetAsCheckmarkBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsCheckmarkBlock(This,Result) ) 

#define IBarcodeBlock_GetAsCheckmarkGroup(This,Result)	\
    ( (This)->lpVtbl -> GetAsCheckmarkGroup(This,Result) ) 

#define IBarcodeBlock_GetAsSeparatorBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsSeparatorBlock(This,Result) ) 

#define IBarcodeBlock_GetAsSeparatorGroup(This,Result)	\
    ( (This)->lpVtbl -> GetAsSeparatorGroup(This,Result) ) 

#define IBarcodeBlock_GetAsVectorPictureBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsVectorPictureBlock(This,Result) ) 


#define IBarcodeBlock_get_ImageProcessingParams(This,Result)	\
    ( (This)->lpVtbl -> get_ImageProcessingParams(This,Result) ) 

#define IBarcodeBlock_put_ImageProcessingParams(This,Value)	\
    ( (This)->lpVtbl -> put_ImageProcessingParams(This,Value) ) 

#define IBarcodeBlock_get_BarcodeParams(This,Result)	\
    ( (This)->lpVtbl -> get_BarcodeParams(This,Result) ) 

#define IBarcodeBlock_put_BarcodeParams(This,Value)	\
    ( (This)->lpVtbl -> put_BarcodeParams(This,Value) ) 

#define IBarcodeBlock_get_BarcodeType(This,Result)	\
    ( (This)->lpVtbl -> get_BarcodeType(This,Result) ) 

#define IBarcodeBlock_get_BarcodeText(This,Result)	\
    ( (This)->lpVtbl -> get_BarcodeText(This,Result) ) 

#define IBarcodeBlock_put_BarcodeText(This,Value)	\
    ( (This)->lpVtbl -> put_BarcodeText(This,Value) ) 

#define IBarcodeBlock_get_SupplementType(This,Result)	\
    ( (This)->lpVtbl -> get_SupplementType(This,Result) ) 

#define IBarcodeBlock_get_SupplementValue(This,Result)	\
    ( (This)->lpVtbl -> get_SupplementValue(This,Result) ) 

#define IBarcodeBlock_get_Text(This,Result)	\
    ( (This)->lpVtbl -> get_Text(This,Result) ) 

#define IBarcodeBlock_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IBarcodeBlock_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_BarcodeBlock;

#ifdef __cplusplus

class DECLSPEC_UUID("10002005-0000-1056-976E-008048D53AE3")
BarcodeBlock;
#endif

#ifndef __IPlainText_INTERFACE_DEFINED__
#define __IPlainText_INTERFACE_DEFINED__

/* interface IPlainText */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IPlainText;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001047-0000-1056-976E-008048D53AE3")
    IPlainText : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SymbolsCount( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [in] */ long Index,
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [in] */ long Index,
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Right( 
            /* [in] */ long Index,
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Bottom( 
            /* [in] */ long Index,
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToTextFile( 
            /* [in] */ BSTR Path,
            /* [in] */ TextEncodingTypeEnum encodingType,
            /* [in] */ CodePageEnum codePageEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CharConfidence( 
            /* [in] */ long Index,
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToAsciiXMLFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetCharacterData( 
            /* [out] */ SAFEARRAY *pageNumbers,
            /* [out] */ SAFEARRAY *leftBorders,
            /* [out] */ SAFEARRAY *topBorders,
            /* [out] */ SAFEARRAY *rightBorders,
            /* [out] */ SAFEARRAY *bottomBorders,
            /* [out] */ SAFEARRAY *confidences) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PageNumber( 
            /* [in] */ long Index,
            /* [retval][out] */ long *Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPlainTextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPlainText * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPlainText * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPlainText * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPlainText * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPlainText * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPlainText * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPlainText * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPlainText * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            IPlainText * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SymbolsCount )( 
            IPlainText * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            IPlainText * This,
            /* [in] */ long Index,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            IPlainText * This,
            /* [in] */ long Index,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Right )( 
            IPlainText * This,
            /* [in] */ long Index,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Bottom )( 
            IPlainText * This,
            /* [in] */ long Index,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToTextFile )( 
            IPlainText * This,
            /* [in] */ BSTR Path,
            /* [in] */ TextEncodingTypeEnum encodingType,
            /* [in] */ CodePageEnum codePageEnum);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CharConfidence )( 
            IPlainText * This,
            /* [in] */ long Index,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToAsciiXMLFile )( 
            IPlainText * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetCharacterData )( 
            IPlainText * This,
            /* [out] */ SAFEARRAY *pageNumbers,
            /* [out] */ SAFEARRAY *leftBorders,
            /* [out] */ SAFEARRAY *topBorders,
            /* [out] */ SAFEARRAY *rightBorders,
            /* [out] */ SAFEARRAY *bottomBorders,
            /* [out] */ SAFEARRAY *confidences);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PageNumber )( 
            IPlainText * This,
            /* [in] */ long Index,
            /* [retval][out] */ long *Result);
        
        END_INTERFACE
    } IPlainTextVtbl;

    interface IPlainText
    {
        CONST_VTBL struct IPlainTextVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPlainText_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPlainText_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPlainText_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPlainText_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPlainText_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPlainText_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPlainText_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPlainText_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IPlainText_get_Text(This,Result)	\
    ( (This)->lpVtbl -> get_Text(This,Result) ) 

#define IPlainText_get_SymbolsCount(This,Result)	\
    ( (This)->lpVtbl -> get_SymbolsCount(This,Result) ) 

#define IPlainText_get_Left(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Left(This,Index,Result) ) 

#define IPlainText_get_Top(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Top(This,Index,Result) ) 

#define IPlainText_get_Right(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Right(This,Index,Result) ) 

#define IPlainText_get_Bottom(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Bottom(This,Index,Result) ) 

#define IPlainText_SaveToTextFile(This,Path,encodingType,codePageEnum)	\
    ( (This)->lpVtbl -> SaveToTextFile(This,Path,encodingType,codePageEnum) ) 

#define IPlainText_get_CharConfidence(This,Index,Result)	\
    ( (This)->lpVtbl -> get_CharConfidence(This,Index,Result) ) 

#define IPlainText_SaveToAsciiXMLFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToAsciiXMLFile(This,Path) ) 

#define IPlainText_GetCharacterData(This,pageNumbers,leftBorders,topBorders,rightBorders,bottomBorders,confidences)	\
    ( (This)->lpVtbl -> GetCharacterData(This,pageNumbers,leftBorders,topBorders,rightBorders,bottomBorders,confidences) ) 

#define IPlainText_get_PageNumber(This,Index,Result)	\
    ( (This)->lpVtbl -> get_PageNumber(This,Index,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPlainText_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_PlainText;

#ifdef __cplusplus

class DECLSPEC_UUID("1000203e-0000-1056-976E-008048D53AE3")
PlainText;
#endif


#ifndef __ITextBlock_INTERFACE_DEFINED__
#define __ITextBlock_INTERFACE_DEFINED__

/* interface ITextBlock */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ITextBlockProperties;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001004-0000-1056-976E-008048D53AE3")
    ITextBlockProperties : public IDispatch
    {
    public:

		virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;

		virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ImageProcessingParams( 
            /* [retval][out] */ IImageProcessingParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ImageProcessingParams( 
            /* [in] */ IImageProcessingParams *Value) = 0;

        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RecognizerParams( 
            /* [retval][out] */ IRecognizerParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RecognizerParams( 
            /* [in] */ IRecognizerParams *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ IText **Result) = 0;

		virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [retval][out] */ IText **Result) = 0;

		virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsFromPicture( 
            /* [retval][out] */ VARIANT_BOOL **Result) = 0;
        
        //virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AnalysisParams( 
        //    /* [retval][out] */ ITextBlockAnalysisParams **Result) = 0;
        //
        //virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_AnalysisParams( 
        //    /* [in] */ ITextBlockAnalysisParams *Value) = 0;
        //
        //virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TextOrientation( 
        //    /* [retval][out] */ ITextOrientation **Result) = 0;
        //
        //virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TextOrientation( 
        //    /* [in] */ ITextOrientation *Value) = 0;
        //virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BlockRole( 
        //    /* [retval][out] */ BlockRoleEnum *Result) = 0;
        //
        //virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BlockRole( 
        //    /* [in] */ BlockRoleEnum Value) = 0;
        //
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
        //    /* [in] */ ITextBlock *From) = 0;
        //
    };
    
#endif
#endif



#ifndef __ITextBlock_INTERFACE_DEFINED__
#define __ITextBlock_INTERFACE_DEFINED__

/* interface ITextBlock */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ITextBlock;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001004-0000-1056-976E-008048D53AE3")
    ITextBlock : public IBlock
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RecognizerParams( 
            /* [retval][out] */ IRecognizerParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RecognizerParams( 
            /* [in] */ IRecognizerParams *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ IText **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AnalysisParams( 
            /* [retval][out] */ ITextBlockAnalysisParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_AnalysisParams( 
            /* [in] */ ITextBlockAnalysisParams *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TextOrientation( 
            /* [retval][out] */ ITextOrientation **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TextOrientation( 
            /* [in] */ ITextOrientation *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ImageProcessingParams( 
            /* [retval][out] */ IImageProcessingParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ImageProcessingParams( 
            /* [in] */ IImageProcessingParams *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BlockRole( 
            /* [retval][out] */ BlockRoleEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BlockRole( 
            /* [in] */ BlockRoleEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ ITextBlock *From) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITextBlockVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITextBlock * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITextBlock * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITextBlock * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITextBlock * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITextBlock * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITextBlock * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITextBlock * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ITextBlock * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ITextBlock * This,
            /* [retval][out] */ BlockTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Region )( 
            ITextBlock * This,
            /* [retval][out] */ IRegion **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Region )( 
            ITextBlock * This,
            /* [in] */ IRegion *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserProperty )( 
            ITextBlock * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ VARIANT *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UserProperty )( 
            ITextBlock * This,
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundColor )( 
            ITextBlock * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundColor )( 
            ITextBlock * This,
            long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ITextBlock * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ITextBlock * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            ITextBlock * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            ITextBlock * This,
            BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlockLayerType )( 
            ITextBlock * This,
            /* [retval][out] */ BlockLayerTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlockLayerType )( 
            ITextBlock * This,
            BlockLayerTypeEnum Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            ITextBlock * This,
            /* [in] */ long DeltaX,
            /* [in] */ long DeltaY);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsTextBlock )( 
            ITextBlock * This,
            /* [retval][out] */ ITextBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsBarcodeBlock )( 
            ITextBlock * This,
            /* [retval][out] */ IBarcodeBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsRasterPictureBlock )( 
            ITextBlock * This,
            /* [retval][out] */ IRasterPictureBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsTableBlock )( 
            ITextBlock * This,
            /* [retval][out] */ ITableBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsCheckmarkBlock )( 
            ITextBlock * This,
            /* [retval][out] */ ICheckmarkBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsCheckmarkGroup )( 
            ITextBlock * This,
            /* [retval][out] */ ICheckmarkGroup **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsSeparatorBlock )( 
            ITextBlock * This,
            /* [retval][out] */ ISeparatorBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsSeparatorGroup )( 
            ITextBlock * This,
            /* [retval][out] */ ISeparatorGroup **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsVectorPictureBlock )( 
            ITextBlock * This,
            /* [retval][out] */ IVectorPictureBlock **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RecognizerParams )( 
            ITextBlock * This,
            /* [retval][out] */ IRecognizerParams **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RecognizerParams )( 
            ITextBlock * This,
            /* [in] */ IRecognizerParams *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            ITextBlock * This,
            /* [retval][out] */ IText **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AnalysisParams )( 
            ITextBlock * This,
            /* [retval][out] */ ITextBlockAnalysisParams **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AnalysisParams )( 
            ITextBlock * This,
            /* [in] */ ITextBlockAnalysisParams *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TextOrientation )( 
            ITextBlock * This,
            /* [retval][out] */ ITextOrientation **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TextOrientation )( 
            ITextBlock * This,
            /* [in] */ ITextOrientation *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ImageProcessingParams )( 
            ITextBlock * This,
            /* [retval][out] */ IImageProcessingParams **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ImageProcessingParams )( 
            ITextBlock * This,
            /* [in] */ IImageProcessingParams *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlockRole )( 
            ITextBlock * This,
            /* [retval][out] */ BlockRoleEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlockRole )( 
            ITextBlock * This,
            /* [in] */ BlockRoleEnum Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            ITextBlock * This,
            /* [in] */ ITextBlock *From);
        
        END_INTERFACE
    } ITextBlockVtbl;

    interface ITextBlock
    {
        CONST_VTBL struct ITextBlockVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITextBlock_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITextBlock_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITextBlock_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITextBlock_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITextBlock_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITextBlock_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITextBlock_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITextBlock_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ITextBlock_get_Type(This,Result)	\
    ( (This)->lpVtbl -> get_Type(This,Result) ) 

#define ITextBlock_get_Region(This,Result)	\
    ( (This)->lpVtbl -> get_Region(This,Result) ) 

#define ITextBlock_put_Region(This,Value)	\
    ( (This)->lpVtbl -> put_Region(This,Value) ) 

#define ITextBlock_get_UserProperty(This,Name,Result)	\
    ( (This)->lpVtbl -> get_UserProperty(This,Name,Result) ) 

#define ITextBlock_put_UserProperty(This,Name,Value)	\
    ( (This)->lpVtbl -> put_UserProperty(This,Name,Value) ) 

#define ITextBlock_get_BackgroundColor(This,Result)	\
    ( (This)->lpVtbl -> get_BackgroundColor(This,Result) ) 

#define ITextBlock_put_BackgroundColor(This,Value)	\
    ( (This)->lpVtbl -> put_BackgroundColor(This,Value) ) 

#define ITextBlock_get_Name(This,Result)	\
    ( (This)->lpVtbl -> get_Name(This,Result) ) 

#define ITextBlock_put_Name(This,Value)	\
    ( (This)->lpVtbl -> put_Name(This,Value) ) 

#define ITextBlock_get_Description(This,Result)	\
    ( (This)->lpVtbl -> get_Description(This,Result) ) 

#define ITextBlock_put_Description(This,Value)	\
    ( (This)->lpVtbl -> put_Description(This,Value) ) 

#define ITextBlock_get_BlockLayerType(This,Result)	\
    ( (This)->lpVtbl -> get_BlockLayerType(This,Result) ) 

#define ITextBlock_put_BlockLayerType(This,Value)	\
    ( (This)->lpVtbl -> put_BlockLayerType(This,Value) ) 

#define ITextBlock_Move(This,DeltaX,DeltaY)	\
    ( (This)->lpVtbl -> Move(This,DeltaX,DeltaY) ) 

#define ITextBlock_GetAsTextBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsTextBlock(This,Result) ) 

#define ITextBlock_GetAsBarcodeBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsBarcodeBlock(This,Result) ) 

#define ITextBlock_GetAsRasterPictureBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsRasterPictureBlock(This,Result) ) 

#define ITextBlock_GetAsTableBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsTableBlock(This,Result) ) 

#define ITextBlock_GetAsCheckmarkBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsCheckmarkBlock(This,Result) ) 

#define ITextBlock_GetAsCheckmarkGroup(This,Result)	\
    ( (This)->lpVtbl -> GetAsCheckmarkGroup(This,Result) ) 

#define ITextBlock_GetAsSeparatorBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsSeparatorBlock(This,Result) ) 

#define ITextBlock_GetAsSeparatorGroup(This,Result)	\
    ( (This)->lpVtbl -> GetAsSeparatorGroup(This,Result) ) 

#define ITextBlock_GetAsVectorPictureBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsVectorPictureBlock(This,Result) ) 


#define ITextBlock_get_RecognizerParams(This,Result)	\
    ( (This)->lpVtbl -> get_RecognizerParams(This,Result) ) 

#define ITextBlock_put_RecognizerParams(This,Value)	\
    ( (This)->lpVtbl -> put_RecognizerParams(This,Value) ) 

#define ITextBlock_get_Text(This,Result)	\
    ( (This)->lpVtbl -> get_Text(This,Result) ) 

#define ITextBlock_get_AnalysisParams(This,Result)	\
    ( (This)->lpVtbl -> get_AnalysisParams(This,Result) ) 

#define ITextBlock_put_AnalysisParams(This,Value)	\
    ( (This)->lpVtbl -> put_AnalysisParams(This,Value) ) 

#define ITextBlock_get_TextOrientation(This,Result)	\
    ( (This)->lpVtbl -> get_TextOrientation(This,Result) ) 

#define ITextBlock_put_TextOrientation(This,Value)	\
    ( (This)->lpVtbl -> put_TextOrientation(This,Value) ) 

#define ITextBlock_get_ImageProcessingParams(This,Result)	\
    ( (This)->lpVtbl -> get_ImageProcessingParams(This,Result) ) 

#define ITextBlock_put_ImageProcessingParams(This,Value)	\
    ( (This)->lpVtbl -> put_ImageProcessingParams(This,Value) ) 

#define ITextBlock_get_BlockRole(This,Result)	\
    ( (This)->lpVtbl -> get_BlockRole(This,Result) ) 

#define ITextBlock_put_BlockRole(This,Value)	\
    ( (This)->lpVtbl -> put_BlockRole(This,Value) ) 

#define ITextBlock_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITextBlock_INTERFACE_DEFINED__ */


#ifndef __ITableSeparator_INTERFACE_DEFINED__
#define __ITableSeparator_INTERFACE_DEFINED__

/* interface ITableSeparator */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ITableSeparator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000100a-0000-1056-976E-008048D53AE3")
    ITableSeparator : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [in] */ long Index,
            /* [retval][out] */ TableSeparatorTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ long Index,
            /* [in] */ TableSeparatorTypeEnum type) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetType( 
            /* [in] */ long Coord,
            /* [in] */ TableSeparatorTypeEnum NewType,
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITableSeparatorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITableSeparator * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITableSeparator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITableSeparator * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITableSeparator * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITableSeparator * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITableSeparator * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITableSeparator * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ITableSeparator * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            ITableSeparator * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            ITableSeparator * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ITableSeparator * This,
            /* [in] */ long Index,
            /* [retval][out] */ TableSeparatorTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            ITableSeparator * This,
            /* [in] */ long Index,
            /* [in] */ TableSeparatorTypeEnum type);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetType )( 
            ITableSeparator * This,
            /* [in] */ long Coord,
            /* [in] */ TableSeparatorTypeEnum NewType,
            /* [defaultvalue][in] */ long Count);
        
        END_INTERFACE
    } ITableSeparatorVtbl;

    interface ITableSeparator
    {
        CONST_VTBL struct ITableSeparatorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITableSeparator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITableSeparator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITableSeparator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITableSeparator_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITableSeparator_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITableSeparator_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITableSeparator_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITableSeparator_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ITableSeparator_get_Position(This,Result)	\
    ( (This)->lpVtbl -> get_Position(This,Result) ) 

#define ITableSeparator_put_Position(This,Value)	\
    ( (This)->lpVtbl -> put_Position(This,Value) ) 

#define ITableSeparator_get_Type(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Type(This,Index,Result) ) 

#define ITableSeparator_put_Type(This,Index,type)	\
    ( (This)->lpVtbl -> put_Type(This,Index,type) ) 

#define ITableSeparator_SetType(This,Coord,NewType,Count)	\
    ( (This)->lpVtbl -> SetType(This,Coord,NewType,Count) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITableSeparator_INTERFACE_DEFINED__ */


#ifndef __ITableSeparators_INTERFACE_DEFINED__
#define __ITableSeparators_INTERFACE_DEFINED__

/* interface ITableSeparators */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ITableSeparators;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001009-0000-1056-976E-008048D53AE3")
    ITableSeparators : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ ITableSeparator **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ ITableSeparator **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ long Position,
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ long Index) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITableSeparatorsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITableSeparators * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITableSeparators * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITableSeparators * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITableSeparators * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITableSeparators * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITableSeparators * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITableSeparators * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            ITableSeparators * This,
            /* [in] */ long Index,
            /* [retval][out] */ ITableSeparator **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ITableSeparators * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ITableSeparators * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ITableSeparators * This,
            /* [in] */ long Index,
            /* [retval][out] */ ITableSeparator **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            ITableSeparators * This,
            /* [in] */ long Position,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            ITableSeparators * This,
            /* [in] */ long Index);
        
        END_INTERFACE
    } ITableSeparatorsVtbl;

    interface ITableSeparators
    {
        CONST_VTBL struct ITableSeparatorsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITableSeparators_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITableSeparators_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITableSeparators_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITableSeparators_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITableSeparators_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITableSeparators_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITableSeparators_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITableSeparators_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define ITableSeparators_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ITableSeparators_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define ITableSeparators_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#define ITableSeparators_Add(This,Position,Result)	\
    ( (This)->lpVtbl -> Add(This,Position,Result) ) 

#define ITableSeparators_Remove(This,Index)	\
    ( (This)->lpVtbl -> Remove(This,Index) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITableSeparators_INTERFACE_DEFINED__ */


#ifndef __ITableCell_INTERFACE_DEFINED__
#define __ITableCell_INTERFACE_DEFINED__

/* interface ITableCell */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ITableCell;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000100c-0000-1056-976E-008048D53AE3")
    ITableCell : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Right( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Bottom( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Block( 
            /* [retval][out] */ IBlock **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ChangeBlockType( 
            /* [in] */ BlockTypeEnum Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITableCellVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITableCell * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITableCell * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITableCell * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITableCell * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITableCell * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITableCell * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITableCell * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ITableCell * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            ITableCell * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            ITableCell * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Right )( 
            ITableCell * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Bottom )( 
            ITableCell * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ITableCell * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ITableCell * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Block )( 
            ITableCell * This,
            /* [retval][out] */ IBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ChangeBlockType )( 
            ITableCell * This,
            /* [in] */ BlockTypeEnum Value);
        
        END_INTERFACE
    } ITableCellVtbl;

    interface ITableCell
    {
        CONST_VTBL struct ITableCellVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITableCell_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITableCell_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITableCell_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITableCell_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITableCell_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITableCell_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITableCell_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITableCell_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ITableCell_get_Left(This,Result)	\
    ( (This)->lpVtbl -> get_Left(This,Result) ) 

#define ITableCell_get_Top(This,Result)	\
    ( (This)->lpVtbl -> get_Top(This,Result) ) 

#define ITableCell_get_Right(This,Result)	\
    ( (This)->lpVtbl -> get_Right(This,Result) ) 

#define ITableCell_get_Bottom(This,Result)	\
    ( (This)->lpVtbl -> get_Bottom(This,Result) ) 

#define ITableCell_get_Name(This,Result)	\
    ( (This)->lpVtbl -> get_Name(This,Result) ) 

#define ITableCell_put_Name(This,Value)	\
    ( (This)->lpVtbl -> put_Name(This,Value) ) 

#define ITableCell_get_Block(This,Result)	\
    ( (This)->lpVtbl -> get_Block(This,Result) ) 

#define ITableCell_ChangeBlockType(This,Value)	\
    ( (This)->lpVtbl -> ChangeBlockType(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITableCell_INTERFACE_DEFINED__ */


#ifndef __ITableCells_INTERFACE_DEFINED__
#define __ITableCells_INTERFACE_DEFINED__

/* interface ITableCells */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ITableCells;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000100b-0000-1056-976E-008048D53AE3")
    ITableCells : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ ITableCell **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ ITableCell **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Merge( 
            /* [in] */ long Left,
            /* [in] */ long Top,
            /* [in] */ long Right,
            /* [in] */ long Bottom) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Split( 
            /* [in] */ long Left,
            /* [in] */ long Top,
            /* [in] */ long Right,
            /* [in] */ long Bottom) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindCellIndex( 
            /* [in] */ long x,
            /* [in] */ long y,
            /* [retval][out] */ long *Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITableCellsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITableCells * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITableCells * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITableCells * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITableCells * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITableCells * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITableCells * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITableCells * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            ITableCells * This,
            /* [in] */ long Index,
            /* [retval][out] */ ITableCell **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ITableCells * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ITableCells * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ITableCells * This,
            /* [in] */ long Index,
            /* [retval][out] */ ITableCell **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Merge )( 
            ITableCells * This,
            /* [in] */ long Left,
            /* [in] */ long Top,
            /* [in] */ long Right,
            /* [in] */ long Bottom);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Split )( 
            ITableCells * This,
            /* [in] */ long Left,
            /* [in] */ long Top,
            /* [in] */ long Right,
            /* [in] */ long Bottom);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindCellIndex )( 
            ITableCells * This,
            /* [in] */ long x,
            /* [in] */ long y,
            /* [retval][out] */ long *Result);
        
        END_INTERFACE
    } ITableCellsVtbl;

    interface ITableCells
    {
        CONST_VTBL struct ITableCellsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITableCells_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITableCells_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITableCells_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITableCells_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITableCells_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITableCells_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITableCells_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITableCells_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define ITableCells_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ITableCells_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define ITableCells_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#define ITableCells_Merge(This,Left,Top,Right,Bottom)	\
    ( (This)->lpVtbl -> Merge(This,Left,Top,Right,Bottom) ) 

#define ITableCells_Split(This,Left,Top,Right,Bottom)	\
    ( (This)->lpVtbl -> Split(This,Left,Top,Right,Bottom) ) 

#define ITableCells_FindCellIndex(This,x,y,Result)	\
    ( (This)->lpVtbl -> FindCellIndex(This,x,y,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITableCells_INTERFACE_DEFINED__ */


#ifndef __ITableBlock_INTERFACE_DEFINED__
#define __ITableBlock_INTERFACE_DEFINED__

/* interface ITableBlock */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ITableBlock;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001008-0000-1056-976E-008048D53AE3")
    ITableBlock : public IBlock
    {
    public:
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE InitializeGrid( 
            /* [in] */ ILongsCollection *HorzSeparators,
            /* [in] */ ILongsCollection *VertSeparators) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Cells( 
            /* [retval][out] */ ITableCells **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_VSeparators( 
            /* [retval][out] */ ITableSeparators **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HSeparators( 
            /* [retval][out] */ ITableSeparators **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindBaseCellFromPoint( 
            /* [in] */ long X,
            /* [in] */ long Y,
            /* [out] */ long *BaseX,
            /* [out] */ long *BaseY) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITableBlockVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITableBlock * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITableBlock * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITableBlock * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITableBlock * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITableBlock * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITableBlock * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITableBlock * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ITableBlock * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ITableBlock * This,
            /* [retval][out] */ BlockTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Region )( 
            ITableBlock * This,
            /* [retval][out] */ IRegion **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Region )( 
            ITableBlock * This,
            /* [in] */ IRegion *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserProperty )( 
            ITableBlock * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ VARIANT *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UserProperty )( 
            ITableBlock * This,
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundColor )( 
            ITableBlock * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundColor )( 
            ITableBlock * This,
            long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ITableBlock * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ITableBlock * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            ITableBlock * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            ITableBlock * This,
            BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlockLayerType )( 
            ITableBlock * This,
            /* [retval][out] */ BlockLayerTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlockLayerType )( 
            ITableBlock * This,
            BlockLayerTypeEnum Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            ITableBlock * This,
            /* [in] */ long DeltaX,
            /* [in] */ long DeltaY);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsTextBlock )( 
            ITableBlock * This,
            /* [retval][out] */ ITextBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsBarcodeBlock )( 
            ITableBlock * This,
            /* [retval][out] */ IBarcodeBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsRasterPictureBlock )( 
            ITableBlock * This,
            /* [retval][out] */ IRasterPictureBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsTableBlock )( 
            ITableBlock * This,
            /* [retval][out] */ ITableBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsCheckmarkBlock )( 
            ITableBlock * This,
            /* [retval][out] */ ICheckmarkBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsCheckmarkGroup )( 
            ITableBlock * This,
            /* [retval][out] */ ICheckmarkGroup **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsSeparatorBlock )( 
            ITableBlock * This,
            /* [retval][out] */ ISeparatorBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsSeparatorGroup )( 
            ITableBlock * This,
            /* [retval][out] */ ISeparatorGroup **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsVectorPictureBlock )( 
            ITableBlock * This,
            /* [retval][out] */ IVectorPictureBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InitializeGrid )( 
            ITableBlock * This,
            /* [in] */ ILongsCollection *HorzSeparators,
            /* [in] */ ILongsCollection *VertSeparators);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Cells )( 
            ITableBlock * This,
            /* [retval][out] */ ITableCells **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VSeparators )( 
            ITableBlock * This,
            /* [retval][out] */ ITableSeparators **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HSeparators )( 
            ITableBlock * This,
            /* [retval][out] */ ITableSeparators **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindBaseCellFromPoint )( 
            ITableBlock * This,
            /* [in] */ long X,
            /* [in] */ long Y,
            /* [out] */ long *BaseX,
            /* [out] */ long *BaseY);
        
        END_INTERFACE
    } ITableBlockVtbl;

    interface ITableBlock
    {
        CONST_VTBL struct ITableBlockVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITableBlock_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITableBlock_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITableBlock_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITableBlock_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITableBlock_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITableBlock_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITableBlock_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITableBlock_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ITableBlock_get_Type(This,Result)	\
    ( (This)->lpVtbl -> get_Type(This,Result) ) 

#define ITableBlock_get_Region(This,Result)	\
    ( (This)->lpVtbl -> get_Region(This,Result) ) 

#define ITableBlock_put_Region(This,Value)	\
    ( (This)->lpVtbl -> put_Region(This,Value) ) 

#define ITableBlock_get_UserProperty(This,Name,Result)	\
    ( (This)->lpVtbl -> get_UserProperty(This,Name,Result) ) 

#define ITableBlock_put_UserProperty(This,Name,Value)	\
    ( (This)->lpVtbl -> put_UserProperty(This,Name,Value) ) 

#define ITableBlock_get_BackgroundColor(This,Result)	\
    ( (This)->lpVtbl -> get_BackgroundColor(This,Result) ) 

#define ITableBlock_put_BackgroundColor(This,Value)	\
    ( (This)->lpVtbl -> put_BackgroundColor(This,Value) ) 

#define ITableBlock_get_Name(This,Result)	\
    ( (This)->lpVtbl -> get_Name(This,Result) ) 

#define ITableBlock_put_Name(This,Value)	\
    ( (This)->lpVtbl -> put_Name(This,Value) ) 

#define ITableBlock_get_Description(This,Result)	\
    ( (This)->lpVtbl -> get_Description(This,Result) ) 

#define ITableBlock_put_Description(This,Value)	\
    ( (This)->lpVtbl -> put_Description(This,Value) ) 

#define ITableBlock_get_BlockLayerType(This,Result)	\
    ( (This)->lpVtbl -> get_BlockLayerType(This,Result) ) 

#define ITableBlock_put_BlockLayerType(This,Value)	\
    ( (This)->lpVtbl -> put_BlockLayerType(This,Value) ) 

#define ITableBlock_Move(This,DeltaX,DeltaY)	\
    ( (This)->lpVtbl -> Move(This,DeltaX,DeltaY) ) 

#define ITableBlock_GetAsTextBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsTextBlock(This,Result) ) 

#define ITableBlock_GetAsBarcodeBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsBarcodeBlock(This,Result) ) 

#define ITableBlock_GetAsRasterPictureBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsRasterPictureBlock(This,Result) ) 

#define ITableBlock_GetAsTableBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsTableBlock(This,Result) ) 

#define ITableBlock_GetAsCheckmarkBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsCheckmarkBlock(This,Result) ) 

#define ITableBlock_GetAsCheckmarkGroup(This,Result)	\
    ( (This)->lpVtbl -> GetAsCheckmarkGroup(This,Result) ) 

#define ITableBlock_GetAsSeparatorBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsSeparatorBlock(This,Result) ) 

#define ITableBlock_GetAsSeparatorGroup(This,Result)	\
    ( (This)->lpVtbl -> GetAsSeparatorGroup(This,Result) ) 

#define ITableBlock_GetAsVectorPictureBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsVectorPictureBlock(This,Result) ) 


#define ITableBlock_InitializeGrid(This,HorzSeparators,VertSeparators)	\
    ( (This)->lpVtbl -> InitializeGrid(This,HorzSeparators,VertSeparators) ) 

#define ITableBlock_get_Cells(This,Result)	\
    ( (This)->lpVtbl -> get_Cells(This,Result) ) 

#define ITableBlock_get_VSeparators(This,Result)	\
    ( (This)->lpVtbl -> get_VSeparators(This,Result) ) 

#define ITableBlock_get_HSeparators(This,Result)	\
    ( (This)->lpVtbl -> get_HSeparators(This,Result) ) 

#define ITableBlock_FindBaseCellFromPoint(This,X,Y,BaseX,BaseY)	\
    ( (This)->lpVtbl -> FindBaseCellFromPoint(This,X,Y,BaseX,BaseY) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITableBlock_INTERFACE_DEFINED__ */


#ifndef __IRasterPictureBlock_INTERFACE_DEFINED__
#define __IRasterPictureBlock_INTERFACE_DEFINED__

/* interface IRasterPictureBlock */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IRasterPictureBlock;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001006-0000-1056-976E-008048D53AE3")
    IRasterPictureBlock : public IBlock
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ColorType( 
            /* [retval][out] */ ImageColorTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ColorType( 
            /* [in] */ ImageColorTypeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IRasterPictureBlock *From) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRasterPictureBlockVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRasterPictureBlock * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRasterPictureBlock * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRasterPictureBlock * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRasterPictureBlock * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRasterPictureBlock * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRasterPictureBlock * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRasterPictureBlock * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IRasterPictureBlock * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IRasterPictureBlock * This,
            /* [retval][out] */ BlockTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Region )( 
            IRasterPictureBlock * This,
            /* [retval][out] */ IRegion **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Region )( 
            IRasterPictureBlock * This,
            /* [in] */ IRegion *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserProperty )( 
            IRasterPictureBlock * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ VARIANT *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UserProperty )( 
            IRasterPictureBlock * This,
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundColor )( 
            IRasterPictureBlock * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundColor )( 
            IRasterPictureBlock * This,
            long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IRasterPictureBlock * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IRasterPictureBlock * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IRasterPictureBlock * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IRasterPictureBlock * This,
            BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlockLayerType )( 
            IRasterPictureBlock * This,
            /* [retval][out] */ BlockLayerTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlockLayerType )( 
            IRasterPictureBlock * This,
            BlockLayerTypeEnum Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IRasterPictureBlock * This,
            /* [in] */ long DeltaX,
            /* [in] */ long DeltaY);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsTextBlock )( 
            IRasterPictureBlock * This,
            /* [retval][out] */ ITextBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsBarcodeBlock )( 
            IRasterPictureBlock * This,
            /* [retval][out] */ IBarcodeBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsRasterPictureBlock )( 
            IRasterPictureBlock * This,
            /* [retval][out] */ IRasterPictureBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsTableBlock )( 
            IRasterPictureBlock * This,
            /* [retval][out] */ ITableBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsCheckmarkBlock )( 
            IRasterPictureBlock * This,
            /* [retval][out] */ ICheckmarkBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsCheckmarkGroup )( 
            IRasterPictureBlock * This,
            /* [retval][out] */ ICheckmarkGroup **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsSeparatorBlock )( 
            IRasterPictureBlock * This,
            /* [retval][out] */ ISeparatorBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsSeparatorGroup )( 
            IRasterPictureBlock * This,
            /* [retval][out] */ ISeparatorGroup **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsVectorPictureBlock )( 
            IRasterPictureBlock * This,
            /* [retval][out] */ IVectorPictureBlock **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorType )( 
            IRasterPictureBlock * This,
            /* [retval][out] */ ImageColorTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ColorType )( 
            IRasterPictureBlock * This,
            /* [in] */ ImageColorTypeEnum Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IRasterPictureBlock * This,
            /* [in] */ IRasterPictureBlock *From);
        
        END_INTERFACE
    } IRasterPictureBlockVtbl;

    interface IRasterPictureBlock
    {
        CONST_VTBL struct IRasterPictureBlockVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRasterPictureBlock_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRasterPictureBlock_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRasterPictureBlock_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRasterPictureBlock_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRasterPictureBlock_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRasterPictureBlock_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRasterPictureBlock_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRasterPictureBlock_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IRasterPictureBlock_get_Type(This,Result)	\
    ( (This)->lpVtbl -> get_Type(This,Result) ) 

#define IRasterPictureBlock_get_Region(This,Result)	\
    ( (This)->lpVtbl -> get_Region(This,Result) ) 

#define IRasterPictureBlock_put_Region(This,Value)	\
    ( (This)->lpVtbl -> put_Region(This,Value) ) 

#define IRasterPictureBlock_get_UserProperty(This,Name,Result)	\
    ( (This)->lpVtbl -> get_UserProperty(This,Name,Result) ) 

#define IRasterPictureBlock_put_UserProperty(This,Name,Value)	\
    ( (This)->lpVtbl -> put_UserProperty(This,Name,Value) ) 

#define IRasterPictureBlock_get_BackgroundColor(This,Result)	\
    ( (This)->lpVtbl -> get_BackgroundColor(This,Result) ) 

#define IRasterPictureBlock_put_BackgroundColor(This,Value)	\
    ( (This)->lpVtbl -> put_BackgroundColor(This,Value) ) 

#define IRasterPictureBlock_get_Name(This,Result)	\
    ( (This)->lpVtbl -> get_Name(This,Result) ) 

#define IRasterPictureBlock_put_Name(This,Value)	\
    ( (This)->lpVtbl -> put_Name(This,Value) ) 

#define IRasterPictureBlock_get_Description(This,Result)	\
    ( (This)->lpVtbl -> get_Description(This,Result) ) 

#define IRasterPictureBlock_put_Description(This,Value)	\
    ( (This)->lpVtbl -> put_Description(This,Value) ) 

#define IRasterPictureBlock_get_BlockLayerType(This,Result)	\
    ( (This)->lpVtbl -> get_BlockLayerType(This,Result) ) 

#define IRasterPictureBlock_put_BlockLayerType(This,Value)	\
    ( (This)->lpVtbl -> put_BlockLayerType(This,Value) ) 

#define IRasterPictureBlock_Move(This,DeltaX,DeltaY)	\
    ( (This)->lpVtbl -> Move(This,DeltaX,DeltaY) ) 

#define IRasterPictureBlock_GetAsTextBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsTextBlock(This,Result) ) 

#define IRasterPictureBlock_GetAsBarcodeBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsBarcodeBlock(This,Result) ) 

#define IRasterPictureBlock_GetAsRasterPictureBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsRasterPictureBlock(This,Result) ) 

#define IRasterPictureBlock_GetAsTableBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsTableBlock(This,Result) ) 

#define IRasterPictureBlock_GetAsCheckmarkBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsCheckmarkBlock(This,Result) ) 

#define IRasterPictureBlock_GetAsCheckmarkGroup(This,Result)	\
    ( (This)->lpVtbl -> GetAsCheckmarkGroup(This,Result) ) 

#define IRasterPictureBlock_GetAsSeparatorBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsSeparatorBlock(This,Result) ) 

#define IRasterPictureBlock_GetAsSeparatorGroup(This,Result)	\
    ( (This)->lpVtbl -> GetAsSeparatorGroup(This,Result) ) 

#define IRasterPictureBlock_GetAsVectorPictureBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsVectorPictureBlock(This,Result) ) 


#define IRasterPictureBlock_get_ColorType(This,Result)	\
    ( (This)->lpVtbl -> get_ColorType(This,Result) ) 

#define IRasterPictureBlock_put_ColorType(This,Value)	\
    ( (This)->lpVtbl -> put_ColorType(This,Value) ) 

#define IRasterPictureBlock_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRasterPictureBlock_INTERFACE_DEFINED__ */


#ifndef __IVectorPictureBlock_INTERFACE_DEFINED__
#define __IVectorPictureBlock_INTERFACE_DEFINED__

/* interface IVectorPictureBlock */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IVectorPictureBlock;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010B8-0000-1056-976E-008048D53AE3")
    IVectorPictureBlock : public IBlock
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IVectorPictureBlockVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVectorPictureBlock * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVectorPictureBlock * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVectorPictureBlock * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IVectorPictureBlock * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IVectorPictureBlock * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IVectorPictureBlock * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IVectorPictureBlock * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IVectorPictureBlock * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IVectorPictureBlock * This,
            /* [retval][out] */ BlockTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Region )( 
            IVectorPictureBlock * This,
            /* [retval][out] */ IRegion **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Region )( 
            IVectorPictureBlock * This,
            /* [in] */ IRegion *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserProperty )( 
            IVectorPictureBlock * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ VARIANT *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UserProperty )( 
            IVectorPictureBlock * This,
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundColor )( 
            IVectorPictureBlock * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundColor )( 
            IVectorPictureBlock * This,
            long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IVectorPictureBlock * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IVectorPictureBlock * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IVectorPictureBlock * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IVectorPictureBlock * This,
            BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlockLayerType )( 
            IVectorPictureBlock * This,
            /* [retval][out] */ BlockLayerTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlockLayerType )( 
            IVectorPictureBlock * This,
            BlockLayerTypeEnum Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IVectorPictureBlock * This,
            /* [in] */ long DeltaX,
            /* [in] */ long DeltaY);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsTextBlock )( 
            IVectorPictureBlock * This,
            /* [retval][out] */ ITextBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsBarcodeBlock )( 
            IVectorPictureBlock * This,
            /* [retval][out] */ IBarcodeBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsRasterPictureBlock )( 
            IVectorPictureBlock * This,
            /* [retval][out] */ IRasterPictureBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsTableBlock )( 
            IVectorPictureBlock * This,
            /* [retval][out] */ ITableBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsCheckmarkBlock )( 
            IVectorPictureBlock * This,
            /* [retval][out] */ ICheckmarkBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsCheckmarkGroup )( 
            IVectorPictureBlock * This,
            /* [retval][out] */ ICheckmarkGroup **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsSeparatorBlock )( 
            IVectorPictureBlock * This,
            /* [retval][out] */ ISeparatorBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsSeparatorGroup )( 
            IVectorPictureBlock * This,
            /* [retval][out] */ ISeparatorGroup **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsVectorPictureBlock )( 
            IVectorPictureBlock * This,
            /* [retval][out] */ IVectorPictureBlock **Result);
        
        END_INTERFACE
    } IVectorPictureBlockVtbl;

    interface IVectorPictureBlock
    {
        CONST_VTBL struct IVectorPictureBlockVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVectorPictureBlock_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IVectorPictureBlock_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IVectorPictureBlock_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IVectorPictureBlock_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IVectorPictureBlock_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IVectorPictureBlock_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IVectorPictureBlock_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IVectorPictureBlock_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IVectorPictureBlock_get_Type(This,Result)	\
    ( (This)->lpVtbl -> get_Type(This,Result) ) 

#define IVectorPictureBlock_get_Region(This,Result)	\
    ( (This)->lpVtbl -> get_Region(This,Result) ) 

#define IVectorPictureBlock_put_Region(This,Value)	\
    ( (This)->lpVtbl -> put_Region(This,Value) ) 

#define IVectorPictureBlock_get_UserProperty(This,Name,Result)	\
    ( (This)->lpVtbl -> get_UserProperty(This,Name,Result) ) 

#define IVectorPictureBlock_put_UserProperty(This,Name,Value)	\
    ( (This)->lpVtbl -> put_UserProperty(This,Name,Value) ) 

#define IVectorPictureBlock_get_BackgroundColor(This,Result)	\
    ( (This)->lpVtbl -> get_BackgroundColor(This,Result) ) 

#define IVectorPictureBlock_put_BackgroundColor(This,Value)	\
    ( (This)->lpVtbl -> put_BackgroundColor(This,Value) ) 

#define IVectorPictureBlock_get_Name(This,Result)	\
    ( (This)->lpVtbl -> get_Name(This,Result) ) 

#define IVectorPictureBlock_put_Name(This,Value)	\
    ( (This)->lpVtbl -> put_Name(This,Value) ) 

#define IVectorPictureBlock_get_Description(This,Result)	\
    ( (This)->lpVtbl -> get_Description(This,Result) ) 

#define IVectorPictureBlock_put_Description(This,Value)	\
    ( (This)->lpVtbl -> put_Description(This,Value) ) 

#define IVectorPictureBlock_get_BlockLayerType(This,Result)	\
    ( (This)->lpVtbl -> get_BlockLayerType(This,Result) ) 

#define IVectorPictureBlock_put_BlockLayerType(This,Value)	\
    ( (This)->lpVtbl -> put_BlockLayerType(This,Value) ) 

#define IVectorPictureBlock_Move(This,DeltaX,DeltaY)	\
    ( (This)->lpVtbl -> Move(This,DeltaX,DeltaY) ) 

#define IVectorPictureBlock_GetAsTextBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsTextBlock(This,Result) ) 

#define IVectorPictureBlock_GetAsBarcodeBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsBarcodeBlock(This,Result) ) 

#define IVectorPictureBlock_GetAsRasterPictureBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsRasterPictureBlock(This,Result) ) 

#define IVectorPictureBlock_GetAsTableBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsTableBlock(This,Result) ) 

#define IVectorPictureBlock_GetAsCheckmarkBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsCheckmarkBlock(This,Result) ) 

#define IVectorPictureBlock_GetAsCheckmarkGroup(This,Result)	\
    ( (This)->lpVtbl -> GetAsCheckmarkGroup(This,Result) ) 

#define IVectorPictureBlock_GetAsSeparatorBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsSeparatorBlock(This,Result) ) 

#define IVectorPictureBlock_GetAsSeparatorGroup(This,Result)	\
    ( (This)->lpVtbl -> GetAsSeparatorGroup(This,Result) ) 

#define IVectorPictureBlock_GetAsVectorPictureBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsVectorPictureBlock(This,Result) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IVectorPictureBlock_INTERFACE_DEFINED__ */


#ifndef __ICheckmarkBlock_INTERFACE_DEFINED__
#define __ICheckmarkBlock_INTERFACE_DEFINED__

/* interface ICheckmarkBlock */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ICheckmarkBlock;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001056-0000-1056-976E-008048D53AE3")
    ICheckmarkBlock : public IBlock
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CheckmarkState( 
            /* [retval][out] */ CheckmarkCheckStateEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CheckmarkState( 
            /* [in] */ CheckmarkCheckStateEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsSuspicious( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsSuspicious( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ ICheckmarkBlock *From) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CheckmarkType( 
            /* [retval][out] */ CheckmarkTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CheckmarkType( 
            /* [in] */ CheckmarkTypeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsCorrectionEnabled( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsCorrectionEnabled( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ImageProcessingParams( 
            /* [retval][out] */ IImageProcessingParams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ImageProcessingParams( 
            /* [in] */ IImageProcessingParams *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BlackThreshold( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BlackThreshold( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SuspiciousDistance( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SuspiciousDistance( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AmountOfBlack( 
            /* [retval][out] */ long *Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICheckmarkBlockVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICheckmarkBlock * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICheckmarkBlock * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICheckmarkBlock * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ICheckmarkBlock * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ICheckmarkBlock * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ICheckmarkBlock * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ICheckmarkBlock * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ICheckmarkBlock * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ICheckmarkBlock * This,
            /* [retval][out] */ BlockTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Region )( 
            ICheckmarkBlock * This,
            /* [retval][out] */ IRegion **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Region )( 
            ICheckmarkBlock * This,
            /* [in] */ IRegion *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserProperty )( 
            ICheckmarkBlock * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ VARIANT *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UserProperty )( 
            ICheckmarkBlock * This,
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundColor )( 
            ICheckmarkBlock * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundColor )( 
            ICheckmarkBlock * This,
            long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ICheckmarkBlock * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ICheckmarkBlock * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            ICheckmarkBlock * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            ICheckmarkBlock * This,
            BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlockLayerType )( 
            ICheckmarkBlock * This,
            /* [retval][out] */ BlockLayerTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlockLayerType )( 
            ICheckmarkBlock * This,
            BlockLayerTypeEnum Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            ICheckmarkBlock * This,
            /* [in] */ long DeltaX,
            /* [in] */ long DeltaY);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsTextBlock )( 
            ICheckmarkBlock * This,
            /* [retval][out] */ ITextBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsBarcodeBlock )( 
            ICheckmarkBlock * This,
            /* [retval][out] */ IBarcodeBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsRasterPictureBlock )( 
            ICheckmarkBlock * This,
            /* [retval][out] */ IRasterPictureBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsTableBlock )( 
            ICheckmarkBlock * This,
            /* [retval][out] */ ITableBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsCheckmarkBlock )( 
            ICheckmarkBlock * This,
            /* [retval][out] */ ICheckmarkBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsCheckmarkGroup )( 
            ICheckmarkBlock * This,
            /* [retval][out] */ ICheckmarkGroup **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsSeparatorBlock )( 
            ICheckmarkBlock * This,
            /* [retval][out] */ ISeparatorBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsSeparatorGroup )( 
            ICheckmarkBlock * This,
            /* [retval][out] */ ISeparatorGroup **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsVectorPictureBlock )( 
            ICheckmarkBlock * This,
            /* [retval][out] */ IVectorPictureBlock **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CheckmarkState )( 
            ICheckmarkBlock * This,
            /* [retval][out] */ CheckmarkCheckStateEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CheckmarkState )( 
            ICheckmarkBlock * This,
            /* [in] */ CheckmarkCheckStateEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsSuspicious )( 
            ICheckmarkBlock * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsSuspicious )( 
            ICheckmarkBlock * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            ICheckmarkBlock * This,
            /* [in] */ ICheckmarkBlock *From);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CheckmarkType )( 
            ICheckmarkBlock * This,
            /* [retval][out] */ CheckmarkTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CheckmarkType )( 
            ICheckmarkBlock * This,
            /* [in] */ CheckmarkTypeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsCorrectionEnabled )( 
            ICheckmarkBlock * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsCorrectionEnabled )( 
            ICheckmarkBlock * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ImageProcessingParams )( 
            ICheckmarkBlock * This,
            /* [retval][out] */ IImageProcessingParams **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ImageProcessingParams )( 
            ICheckmarkBlock * This,
            /* [in] */ IImageProcessingParams *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlackThreshold )( 
            ICheckmarkBlock * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlackThreshold )( 
            ICheckmarkBlock * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SuspiciousDistance )( 
            ICheckmarkBlock * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SuspiciousDistance )( 
            ICheckmarkBlock * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AmountOfBlack )( 
            ICheckmarkBlock * This,
            /* [retval][out] */ long *Result);
        
        END_INTERFACE
    } ICheckmarkBlockVtbl;

    interface ICheckmarkBlock
    {
        CONST_VTBL struct ICheckmarkBlockVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICheckmarkBlock_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICheckmarkBlock_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICheckmarkBlock_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICheckmarkBlock_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ICheckmarkBlock_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ICheckmarkBlock_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ICheckmarkBlock_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ICheckmarkBlock_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ICheckmarkBlock_get_Type(This,Result)	\
    ( (This)->lpVtbl -> get_Type(This,Result) ) 

#define ICheckmarkBlock_get_Region(This,Result)	\
    ( (This)->lpVtbl -> get_Region(This,Result) ) 

#define ICheckmarkBlock_put_Region(This,Value)	\
    ( (This)->lpVtbl -> put_Region(This,Value) ) 

#define ICheckmarkBlock_get_UserProperty(This,Name,Result)	\
    ( (This)->lpVtbl -> get_UserProperty(This,Name,Result) ) 

#define ICheckmarkBlock_put_UserProperty(This,Name,Value)	\
    ( (This)->lpVtbl -> put_UserProperty(This,Name,Value) ) 

#define ICheckmarkBlock_get_BackgroundColor(This,Result)	\
    ( (This)->lpVtbl -> get_BackgroundColor(This,Result) ) 

#define ICheckmarkBlock_put_BackgroundColor(This,Value)	\
    ( (This)->lpVtbl -> put_BackgroundColor(This,Value) ) 

#define ICheckmarkBlock_get_Name(This,Result)	\
    ( (This)->lpVtbl -> get_Name(This,Result) ) 

#define ICheckmarkBlock_put_Name(This,Value)	\
    ( (This)->lpVtbl -> put_Name(This,Value) ) 

#define ICheckmarkBlock_get_Description(This,Result)	\
    ( (This)->lpVtbl -> get_Description(This,Result) ) 

#define ICheckmarkBlock_put_Description(This,Value)	\
    ( (This)->lpVtbl -> put_Description(This,Value) ) 

#define ICheckmarkBlock_get_BlockLayerType(This,Result)	\
    ( (This)->lpVtbl -> get_BlockLayerType(This,Result) ) 

#define ICheckmarkBlock_put_BlockLayerType(This,Value)	\
    ( (This)->lpVtbl -> put_BlockLayerType(This,Value) ) 

#define ICheckmarkBlock_Move(This,DeltaX,DeltaY)	\
    ( (This)->lpVtbl -> Move(This,DeltaX,DeltaY) ) 

#define ICheckmarkBlock_GetAsTextBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsTextBlock(This,Result) ) 

#define ICheckmarkBlock_GetAsBarcodeBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsBarcodeBlock(This,Result) ) 

#define ICheckmarkBlock_GetAsRasterPictureBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsRasterPictureBlock(This,Result) ) 

#define ICheckmarkBlock_GetAsTableBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsTableBlock(This,Result) ) 

#define ICheckmarkBlock_GetAsCheckmarkBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsCheckmarkBlock(This,Result) ) 

#define ICheckmarkBlock_GetAsCheckmarkGroup(This,Result)	\
    ( (This)->lpVtbl -> GetAsCheckmarkGroup(This,Result) ) 

#define ICheckmarkBlock_GetAsSeparatorBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsSeparatorBlock(This,Result) ) 

#define ICheckmarkBlock_GetAsSeparatorGroup(This,Result)	\
    ( (This)->lpVtbl -> GetAsSeparatorGroup(This,Result) ) 

#define ICheckmarkBlock_GetAsVectorPictureBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsVectorPictureBlock(This,Result) ) 


#define ICheckmarkBlock_get_CheckmarkState(This,Result)	\
    ( (This)->lpVtbl -> get_CheckmarkState(This,Result) ) 

#define ICheckmarkBlock_put_CheckmarkState(This,Value)	\
    ( (This)->lpVtbl -> put_CheckmarkState(This,Value) ) 

#define ICheckmarkBlock_get_IsSuspicious(This,Result)	\
    ( (This)->lpVtbl -> get_IsSuspicious(This,Result) ) 

#define ICheckmarkBlock_put_IsSuspicious(This,Value)	\
    ( (This)->lpVtbl -> put_IsSuspicious(This,Value) ) 

#define ICheckmarkBlock_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define ICheckmarkBlock_get_CheckmarkType(This,Result)	\
    ( (This)->lpVtbl -> get_CheckmarkType(This,Result) ) 

#define ICheckmarkBlock_put_CheckmarkType(This,Value)	\
    ( (This)->lpVtbl -> put_CheckmarkType(This,Value) ) 

#define ICheckmarkBlock_get_IsCorrectionEnabled(This,Result)	\
    ( (This)->lpVtbl -> get_IsCorrectionEnabled(This,Result) ) 

#define ICheckmarkBlock_put_IsCorrectionEnabled(This,Value)	\
    ( (This)->lpVtbl -> put_IsCorrectionEnabled(This,Value) ) 

#define ICheckmarkBlock_get_ImageProcessingParams(This,Result)	\
    ( (This)->lpVtbl -> get_ImageProcessingParams(This,Result) ) 

#define ICheckmarkBlock_put_ImageProcessingParams(This,Value)	\
    ( (This)->lpVtbl -> put_ImageProcessingParams(This,Value) ) 

#define ICheckmarkBlock_get_BlackThreshold(This,Result)	\
    ( (This)->lpVtbl -> get_BlackThreshold(This,Result) ) 

#define ICheckmarkBlock_put_BlackThreshold(This,Value)	\
    ( (This)->lpVtbl -> put_BlackThreshold(This,Value) ) 

#define ICheckmarkBlock_get_SuspiciousDistance(This,Result)	\
    ( (This)->lpVtbl -> get_SuspiciousDistance(This,Result) ) 

#define ICheckmarkBlock_put_SuspiciousDistance(This,Value)	\
    ( (This)->lpVtbl -> put_SuspiciousDistance(This,Value) ) 

#define ICheckmarkBlock_get_AmountOfBlack(This,Result)	\
    ( (This)->lpVtbl -> get_AmountOfBlack(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICheckmarkBlock_INTERFACE_DEFINED__ */


#ifndef __ICheckmarkGroup_INTERFACE_DEFINED__
#define __ICheckmarkGroup_INTERFACE_DEFINED__

/* interface ICheckmarkGroup */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ICheckmarkGroup;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001057-0000-1056-976E-008048D53AE3")
    ICheckmarkGroup : public IBlock
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ ICheckmarkBlock **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ ICheckmarkBlock **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddCheckmark( 
            /* [defaultvalue][in] */ IRegion *BlockRegion,
            /* [retval][out] */ ICheckmarkBlock **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertCheckmark( 
            /* [in] */ long Index,
            /* [defaultvalue][in] */ IRegion *BlockRegion,
            /* [retval][out] */ ICheckmarkBlock **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ long Index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveAll( void) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MaximumCheckedInGroup( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_MaximumCheckedInGroup( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MinimumCheckedInGroup( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_MinimumCheckedInGroup( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ ICheckmarkGroup *From) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICheckmarkGroupVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICheckmarkGroup * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICheckmarkGroup * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICheckmarkGroup * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ICheckmarkGroup * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ICheckmarkGroup * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ICheckmarkGroup * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ICheckmarkGroup * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ICheckmarkGroup * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ICheckmarkGroup * This,
            /* [retval][out] */ BlockTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Region )( 
            ICheckmarkGroup * This,
            /* [retval][out] */ IRegion **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Region )( 
            ICheckmarkGroup * This,
            /* [in] */ IRegion *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserProperty )( 
            ICheckmarkGroup * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ VARIANT *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UserProperty )( 
            ICheckmarkGroup * This,
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundColor )( 
            ICheckmarkGroup * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundColor )( 
            ICheckmarkGroup * This,
            long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ICheckmarkGroup * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ICheckmarkGroup * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            ICheckmarkGroup * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            ICheckmarkGroup * This,
            BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlockLayerType )( 
            ICheckmarkGroup * This,
            /* [retval][out] */ BlockLayerTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlockLayerType )( 
            ICheckmarkGroup * This,
            BlockLayerTypeEnum Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            ICheckmarkGroup * This,
            /* [in] */ long DeltaX,
            /* [in] */ long DeltaY);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsTextBlock )( 
            ICheckmarkGroup * This,
            /* [retval][out] */ ITextBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsBarcodeBlock )( 
            ICheckmarkGroup * This,
            /* [retval][out] */ IBarcodeBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsRasterPictureBlock )( 
            ICheckmarkGroup * This,
            /* [retval][out] */ IRasterPictureBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsTableBlock )( 
            ICheckmarkGroup * This,
            /* [retval][out] */ ITableBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsCheckmarkBlock )( 
            ICheckmarkGroup * This,
            /* [retval][out] */ ICheckmarkBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsCheckmarkGroup )( 
            ICheckmarkGroup * This,
            /* [retval][out] */ ICheckmarkGroup **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsSeparatorBlock )( 
            ICheckmarkGroup * This,
            /* [retval][out] */ ISeparatorBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsSeparatorGroup )( 
            ICheckmarkGroup * This,
            /* [retval][out] */ ISeparatorGroup **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsVectorPictureBlock )( 
            ICheckmarkGroup * This,
            /* [retval][out] */ IVectorPictureBlock **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            ICheckmarkGroup * This,
            /* [in] */ long Index,
            /* [retval][out] */ ICheckmarkBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ICheckmarkGroup * This,
            /* [in] */ long Index,
            /* [retval][out] */ ICheckmarkBlock **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ICheckmarkGroup * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddCheckmark )( 
            ICheckmarkGroup * This,
            /* [defaultvalue][in] */ IRegion *BlockRegion,
            /* [retval][out] */ ICheckmarkBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertCheckmark )( 
            ICheckmarkGroup * This,
            /* [in] */ long Index,
            /* [defaultvalue][in] */ IRegion *BlockRegion,
            /* [retval][out] */ ICheckmarkBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            ICheckmarkGroup * This,
            /* [in] */ long Index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAll )( 
            ICheckmarkGroup * This);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaximumCheckedInGroup )( 
            ICheckmarkGroup * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MaximumCheckedInGroup )( 
            ICheckmarkGroup * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinimumCheckedInGroup )( 
            ICheckmarkGroup * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MinimumCheckedInGroup )( 
            ICheckmarkGroup * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            ICheckmarkGroup * This,
            /* [in] */ ICheckmarkGroup *From);
        
        END_INTERFACE
    } ICheckmarkGroupVtbl;

    interface ICheckmarkGroup
    {
        CONST_VTBL struct ICheckmarkGroupVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICheckmarkGroup_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICheckmarkGroup_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICheckmarkGroup_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICheckmarkGroup_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ICheckmarkGroup_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ICheckmarkGroup_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ICheckmarkGroup_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ICheckmarkGroup_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ICheckmarkGroup_get_Type(This,Result)	\
    ( (This)->lpVtbl -> get_Type(This,Result) ) 

#define ICheckmarkGroup_get_Region(This,Result)	\
    ( (This)->lpVtbl -> get_Region(This,Result) ) 

#define ICheckmarkGroup_put_Region(This,Value)	\
    ( (This)->lpVtbl -> put_Region(This,Value) ) 

#define ICheckmarkGroup_get_UserProperty(This,Name,Result)	\
    ( (This)->lpVtbl -> get_UserProperty(This,Name,Result) ) 

#define ICheckmarkGroup_put_UserProperty(This,Name,Value)	\
    ( (This)->lpVtbl -> put_UserProperty(This,Name,Value) ) 

#define ICheckmarkGroup_get_BackgroundColor(This,Result)	\
    ( (This)->lpVtbl -> get_BackgroundColor(This,Result) ) 

#define ICheckmarkGroup_put_BackgroundColor(This,Value)	\
    ( (This)->lpVtbl -> put_BackgroundColor(This,Value) ) 

#define ICheckmarkGroup_get_Name(This,Result)	\
    ( (This)->lpVtbl -> get_Name(This,Result) ) 

#define ICheckmarkGroup_put_Name(This,Value)	\
    ( (This)->lpVtbl -> put_Name(This,Value) ) 

#define ICheckmarkGroup_get_Description(This,Result)	\
    ( (This)->lpVtbl -> get_Description(This,Result) ) 

#define ICheckmarkGroup_put_Description(This,Value)	\
    ( (This)->lpVtbl -> put_Description(This,Value) ) 

#define ICheckmarkGroup_get_BlockLayerType(This,Result)	\
    ( (This)->lpVtbl -> get_BlockLayerType(This,Result) ) 

#define ICheckmarkGroup_put_BlockLayerType(This,Value)	\
    ( (This)->lpVtbl -> put_BlockLayerType(This,Value) ) 

#define ICheckmarkGroup_Move(This,DeltaX,DeltaY)	\
    ( (This)->lpVtbl -> Move(This,DeltaX,DeltaY) ) 

#define ICheckmarkGroup_GetAsTextBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsTextBlock(This,Result) ) 

#define ICheckmarkGroup_GetAsBarcodeBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsBarcodeBlock(This,Result) ) 

#define ICheckmarkGroup_GetAsRasterPictureBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsRasterPictureBlock(This,Result) ) 

#define ICheckmarkGroup_GetAsTableBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsTableBlock(This,Result) ) 

#define ICheckmarkGroup_GetAsCheckmarkBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsCheckmarkBlock(This,Result) ) 

#define ICheckmarkGroup_GetAsCheckmarkGroup(This,Result)	\
    ( (This)->lpVtbl -> GetAsCheckmarkGroup(This,Result) ) 

#define ICheckmarkGroup_GetAsSeparatorBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsSeparatorBlock(This,Result) ) 

#define ICheckmarkGroup_GetAsSeparatorGroup(This,Result)	\
    ( (This)->lpVtbl -> GetAsSeparatorGroup(This,Result) ) 

#define ICheckmarkGroup_GetAsVectorPictureBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsVectorPictureBlock(This,Result) ) 


#define ICheckmarkGroup_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define ICheckmarkGroup_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#define ICheckmarkGroup_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define ICheckmarkGroup_AddCheckmark(This,BlockRegion,Result)	\
    ( (This)->lpVtbl -> AddCheckmark(This,BlockRegion,Result) ) 

#define ICheckmarkGroup_InsertCheckmark(This,Index,BlockRegion,Result)	\
    ( (This)->lpVtbl -> InsertCheckmark(This,Index,BlockRegion,Result) ) 

#define ICheckmarkGroup_Remove(This,Index)	\
    ( (This)->lpVtbl -> Remove(This,Index) ) 

#define ICheckmarkGroup_RemoveAll(This)	\
    ( (This)->lpVtbl -> RemoveAll(This) ) 

#define ICheckmarkGroup_get_MaximumCheckedInGroup(This,Result)	\
    ( (This)->lpVtbl -> get_MaximumCheckedInGroup(This,Result) ) 

#define ICheckmarkGroup_put_MaximumCheckedInGroup(This,Value)	\
    ( (This)->lpVtbl -> put_MaximumCheckedInGroup(This,Value) ) 

#define ICheckmarkGroup_get_MinimumCheckedInGroup(This,Result)	\
    ( (This)->lpVtbl -> get_MinimumCheckedInGroup(This,Result) ) 

#define ICheckmarkGroup_put_MinimumCheckedInGroup(This,Value)	\
    ( (This)->lpVtbl -> put_MinimumCheckedInGroup(This,Value) ) 

#define ICheckmarkGroup_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICheckmarkGroup_INTERFACE_DEFINED__ */


#ifndef __ILayoutBlocks_INTERFACE_DEFINED__
#define __ILayoutBlocks_INTERFACE_DEFINED__

/* interface ILayoutBlocks */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ILayoutBlocks;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001002-0000-1056-976E-008048D53AE3")
    ILayoutBlocks : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ IBlock **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ IBlock **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ IBlock *Block,
            /* [in] */ long Index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ IBlock *Block) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ long Index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveAll( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ ILayoutBlocks *From) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ILayoutBlocksVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ILayoutBlocks * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ILayoutBlocks * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ILayoutBlocks * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ILayoutBlocks * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ILayoutBlocks * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ILayoutBlocks * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ILayoutBlocks * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            ILayoutBlocks * This,
            /* [in] */ long Index,
            /* [retval][out] */ IBlock **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ILayoutBlocks * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ILayoutBlocks * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ILayoutBlocks * This,
            /* [in] */ long Index,
            /* [retval][out] */ IBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            ILayoutBlocks * This,
            /* [in] */ IBlock *Block,
            /* [in] */ long Index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            ILayoutBlocks * This,
            /* [in] */ IBlock *Block);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            ILayoutBlocks * This,
            /* [in] */ long Index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAll )( 
            ILayoutBlocks * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            ILayoutBlocks * This,
            /* [in] */ ILayoutBlocks *From);
        
        END_INTERFACE
    } ILayoutBlocksVtbl;

    interface ILayoutBlocks
    {
        CONST_VTBL struct ILayoutBlocksVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ILayoutBlocks_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ILayoutBlocks_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ILayoutBlocks_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ILayoutBlocks_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ILayoutBlocks_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ILayoutBlocks_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ILayoutBlocks_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ILayoutBlocks_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define ILayoutBlocks_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ILayoutBlocks_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define ILayoutBlocks_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#define ILayoutBlocks_Insert(This,Block,Index)	\
    ( (This)->lpVtbl -> Insert(This,Block,Index) ) 

#define ILayoutBlocks_Add(This,Block)	\
    ( (This)->lpVtbl -> Add(This,Block) ) 

#define ILayoutBlocks_Remove(This,Index)	\
    ( (This)->lpVtbl -> Remove(This,Index) ) 

#define ILayoutBlocks_RemoveAll(This)	\
    ( (This)->lpVtbl -> RemoveAll(This) ) 

#define ILayoutBlocks_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ILayoutBlocks_INTERFACE_DEFINED__ */


#ifndef __ISeparatorBlock_INTERFACE_DEFINED__
#define __ISeparatorBlock_INTERFACE_DEFINED__

/* interface ISeparatorBlock */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ISeparatorBlock;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000101b-0000-1056-976E-008048D53AE3")
    ISeparatorBlock : public IBlock
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SeparatorType( 
            /* [retval][out] */ SeparatorTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SeparatorType( 
            /* [in] */ SeparatorTypeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_StartPointX( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_StartPointX( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_StartPointY( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_StartPointY( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EndPointX( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_EndPointX( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EndPointY( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_EndPointY( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PreciseWidth( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_PreciseWidth( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ ISeparatorBlock *From) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISeparatorBlockVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISeparatorBlock * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISeparatorBlock * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISeparatorBlock * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ISeparatorBlock * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ISeparatorBlock * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ISeparatorBlock * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISeparatorBlock * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ISeparatorBlock * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ISeparatorBlock * This,
            /* [retval][out] */ BlockTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Region )( 
            ISeparatorBlock * This,
            /* [retval][out] */ IRegion **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Region )( 
            ISeparatorBlock * This,
            /* [in] */ IRegion *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserProperty )( 
            ISeparatorBlock * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ VARIANT *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UserProperty )( 
            ISeparatorBlock * This,
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundColor )( 
            ISeparatorBlock * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundColor )( 
            ISeparatorBlock * This,
            long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ISeparatorBlock * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ISeparatorBlock * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            ISeparatorBlock * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            ISeparatorBlock * This,
            BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlockLayerType )( 
            ISeparatorBlock * This,
            /* [retval][out] */ BlockLayerTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlockLayerType )( 
            ISeparatorBlock * This,
            BlockLayerTypeEnum Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            ISeparatorBlock * This,
            /* [in] */ long DeltaX,
            /* [in] */ long DeltaY);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsTextBlock )( 
            ISeparatorBlock * This,
            /* [retval][out] */ ITextBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsBarcodeBlock )( 
            ISeparatorBlock * This,
            /* [retval][out] */ IBarcodeBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsRasterPictureBlock )( 
            ISeparatorBlock * This,
            /* [retval][out] */ IRasterPictureBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsTableBlock )( 
            ISeparatorBlock * This,
            /* [retval][out] */ ITableBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsCheckmarkBlock )( 
            ISeparatorBlock * This,
            /* [retval][out] */ ICheckmarkBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsCheckmarkGroup )( 
            ISeparatorBlock * This,
            /* [retval][out] */ ICheckmarkGroup **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsSeparatorBlock )( 
            ISeparatorBlock * This,
            /* [retval][out] */ ISeparatorBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsSeparatorGroup )( 
            ISeparatorBlock * This,
            /* [retval][out] */ ISeparatorGroup **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsVectorPictureBlock )( 
            ISeparatorBlock * This,
            /* [retval][out] */ IVectorPictureBlock **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SeparatorType )( 
            ISeparatorBlock * This,
            /* [retval][out] */ SeparatorTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SeparatorType )( 
            ISeparatorBlock * This,
            /* [in] */ SeparatorTypeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StartPointX )( 
            ISeparatorBlock * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_StartPointX )( 
            ISeparatorBlock * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StartPointY )( 
            ISeparatorBlock * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_StartPointY )( 
            ISeparatorBlock * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndPointX )( 
            ISeparatorBlock * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EndPointX )( 
            ISeparatorBlock * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndPointY )( 
            ISeparatorBlock * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EndPointY )( 
            ISeparatorBlock * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PreciseWidth )( 
            ISeparatorBlock * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PreciseWidth )( 
            ISeparatorBlock * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            ISeparatorBlock * This,
            /* [in] */ ISeparatorBlock *From);
        
        END_INTERFACE
    } ISeparatorBlockVtbl;

    interface ISeparatorBlock
    {
        CONST_VTBL struct ISeparatorBlockVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISeparatorBlock_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISeparatorBlock_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISeparatorBlock_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISeparatorBlock_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISeparatorBlock_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISeparatorBlock_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISeparatorBlock_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISeparatorBlock_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ISeparatorBlock_get_Type(This,Result)	\
    ( (This)->lpVtbl -> get_Type(This,Result) ) 

#define ISeparatorBlock_get_Region(This,Result)	\
    ( (This)->lpVtbl -> get_Region(This,Result) ) 

#define ISeparatorBlock_put_Region(This,Value)	\
    ( (This)->lpVtbl -> put_Region(This,Value) ) 

#define ISeparatorBlock_get_UserProperty(This,Name,Result)	\
    ( (This)->lpVtbl -> get_UserProperty(This,Name,Result) ) 

#define ISeparatorBlock_put_UserProperty(This,Name,Value)	\
    ( (This)->lpVtbl -> put_UserProperty(This,Name,Value) ) 

#define ISeparatorBlock_get_BackgroundColor(This,Result)	\
    ( (This)->lpVtbl -> get_BackgroundColor(This,Result) ) 

#define ISeparatorBlock_put_BackgroundColor(This,Value)	\
    ( (This)->lpVtbl -> put_BackgroundColor(This,Value) ) 

#define ISeparatorBlock_get_Name(This,Result)	\
    ( (This)->lpVtbl -> get_Name(This,Result) ) 

#define ISeparatorBlock_put_Name(This,Value)	\
    ( (This)->lpVtbl -> put_Name(This,Value) ) 

#define ISeparatorBlock_get_Description(This,Result)	\
    ( (This)->lpVtbl -> get_Description(This,Result) ) 

#define ISeparatorBlock_put_Description(This,Value)	\
    ( (This)->lpVtbl -> put_Description(This,Value) ) 

#define ISeparatorBlock_get_BlockLayerType(This,Result)	\
    ( (This)->lpVtbl -> get_BlockLayerType(This,Result) ) 

#define ISeparatorBlock_put_BlockLayerType(This,Value)	\
    ( (This)->lpVtbl -> put_BlockLayerType(This,Value) ) 

#define ISeparatorBlock_Move(This,DeltaX,DeltaY)	\
    ( (This)->lpVtbl -> Move(This,DeltaX,DeltaY) ) 

#define ISeparatorBlock_GetAsTextBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsTextBlock(This,Result) ) 

#define ISeparatorBlock_GetAsBarcodeBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsBarcodeBlock(This,Result) ) 

#define ISeparatorBlock_GetAsRasterPictureBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsRasterPictureBlock(This,Result) ) 

#define ISeparatorBlock_GetAsTableBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsTableBlock(This,Result) ) 

#define ISeparatorBlock_GetAsCheckmarkBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsCheckmarkBlock(This,Result) ) 

#define ISeparatorBlock_GetAsCheckmarkGroup(This,Result)	\
    ( (This)->lpVtbl -> GetAsCheckmarkGroup(This,Result) ) 

#define ISeparatorBlock_GetAsSeparatorBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsSeparatorBlock(This,Result) ) 

#define ISeparatorBlock_GetAsSeparatorGroup(This,Result)	\
    ( (This)->lpVtbl -> GetAsSeparatorGroup(This,Result) ) 

#define ISeparatorBlock_GetAsVectorPictureBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsVectorPictureBlock(This,Result) ) 


#define ISeparatorBlock_get_SeparatorType(This,Result)	\
    ( (This)->lpVtbl -> get_SeparatorType(This,Result) ) 

#define ISeparatorBlock_put_SeparatorType(This,Value)	\
    ( (This)->lpVtbl -> put_SeparatorType(This,Value) ) 

#define ISeparatorBlock_get_StartPointX(This,Result)	\
    ( (This)->lpVtbl -> get_StartPointX(This,Result) ) 

#define ISeparatorBlock_put_StartPointX(This,Value)	\
    ( (This)->lpVtbl -> put_StartPointX(This,Value) ) 

#define ISeparatorBlock_get_StartPointY(This,Result)	\
    ( (This)->lpVtbl -> get_StartPointY(This,Result) ) 

#define ISeparatorBlock_put_StartPointY(This,Value)	\
    ( (This)->lpVtbl -> put_StartPointY(This,Value) ) 

#define ISeparatorBlock_get_EndPointX(This,Result)	\
    ( (This)->lpVtbl -> get_EndPointX(This,Result) ) 

#define ISeparatorBlock_put_EndPointX(This,Value)	\
    ( (This)->lpVtbl -> put_EndPointX(This,Value) ) 

#define ISeparatorBlock_get_EndPointY(This,Result)	\
    ( (This)->lpVtbl -> get_EndPointY(This,Result) ) 

#define ISeparatorBlock_put_EndPointY(This,Value)	\
    ( (This)->lpVtbl -> put_EndPointY(This,Value) ) 

#define ISeparatorBlock_get_PreciseWidth(This,Result)	\
    ( (This)->lpVtbl -> get_PreciseWidth(This,Result) ) 

#define ISeparatorBlock_put_PreciseWidth(This,Value)	\
    ( (This)->lpVtbl -> put_PreciseWidth(This,Value) ) 

#define ISeparatorBlock_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISeparatorBlock_INTERFACE_DEFINED__ */


#ifndef __ISeparatorGroup_INTERFACE_DEFINED__
#define __ISeparatorGroup_INTERFACE_DEFINED__

/* interface ISeparatorGroup */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ISeparatorGroup;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000101a-0000-1056-976E-008048D53AE3")
    ISeparatorGroup : public IBlock
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ ISeparatorBlock **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ ISeparatorBlock **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertSeparator( 
            /* [in] */ long Index,
            /* [defaultvalue][in] */ IRegion *BlockRegion,
            /* [retval][out] */ ISeparatorBlock **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddSeparator( 
            /* [defaultvalue][in] */ IRegion *BlockRegion,
            /* [retval][out] */ ISeparatorBlock **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            long Index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveAll( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ ISeparatorGroup *From) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISeparatorGroupVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISeparatorGroup * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISeparatorGroup * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISeparatorGroup * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ISeparatorGroup * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ISeparatorGroup * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ISeparatorGroup * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISeparatorGroup * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ISeparatorGroup * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ISeparatorGroup * This,
            /* [retval][out] */ BlockTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Region )( 
            ISeparatorGroup * This,
            /* [retval][out] */ IRegion **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Region )( 
            ISeparatorGroup * This,
            /* [in] */ IRegion *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserProperty )( 
            ISeparatorGroup * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ VARIANT *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UserProperty )( 
            ISeparatorGroup * This,
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundColor )( 
            ISeparatorGroup * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundColor )( 
            ISeparatorGroup * This,
            long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ISeparatorGroup * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ISeparatorGroup * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            ISeparatorGroup * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            ISeparatorGroup * This,
            BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlockLayerType )( 
            ISeparatorGroup * This,
            /* [retval][out] */ BlockLayerTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlockLayerType )( 
            ISeparatorGroup * This,
            BlockLayerTypeEnum Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            ISeparatorGroup * This,
            /* [in] */ long DeltaX,
            /* [in] */ long DeltaY);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsTextBlock )( 
            ISeparatorGroup * This,
            /* [retval][out] */ ITextBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsBarcodeBlock )( 
            ISeparatorGroup * This,
            /* [retval][out] */ IBarcodeBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsRasterPictureBlock )( 
            ISeparatorGroup * This,
            /* [retval][out] */ IRasterPictureBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsTableBlock )( 
            ISeparatorGroup * This,
            /* [retval][out] */ ITableBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsCheckmarkBlock )( 
            ISeparatorGroup * This,
            /* [retval][out] */ ICheckmarkBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsCheckmarkGroup )( 
            ISeparatorGroup * This,
            /* [retval][out] */ ICheckmarkGroup **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsSeparatorBlock )( 
            ISeparatorGroup * This,
            /* [retval][out] */ ISeparatorBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsSeparatorGroup )( 
            ISeparatorGroup * This,
            /* [retval][out] */ ISeparatorGroup **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsVectorPictureBlock )( 
            ISeparatorGroup * This,
            /* [retval][out] */ IVectorPictureBlock **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            ISeparatorGroup * This,
            /* [in] */ long Index,
            /* [retval][out] */ ISeparatorBlock **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ISeparatorGroup * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ISeparatorGroup * This,
            /* [in] */ long Index,
            /* [retval][out] */ ISeparatorBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertSeparator )( 
            ISeparatorGroup * This,
            /* [in] */ long Index,
            /* [defaultvalue][in] */ IRegion *BlockRegion,
            /* [retval][out] */ ISeparatorBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddSeparator )( 
            ISeparatorGroup * This,
            /* [defaultvalue][in] */ IRegion *BlockRegion,
            /* [retval][out] */ ISeparatorBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            ISeparatorGroup * This,
            long Index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAll )( 
            ISeparatorGroup * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            ISeparatorGroup * This,
            /* [in] */ ISeparatorGroup *From);
        
        END_INTERFACE
    } ISeparatorGroupVtbl;

    interface ISeparatorGroup
    {
        CONST_VTBL struct ISeparatorGroupVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISeparatorGroup_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISeparatorGroup_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISeparatorGroup_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISeparatorGroup_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISeparatorGroup_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISeparatorGroup_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISeparatorGroup_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISeparatorGroup_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ISeparatorGroup_get_Type(This,Result)	\
    ( (This)->lpVtbl -> get_Type(This,Result) ) 

#define ISeparatorGroup_get_Region(This,Result)	\
    ( (This)->lpVtbl -> get_Region(This,Result) ) 

#define ISeparatorGroup_put_Region(This,Value)	\
    ( (This)->lpVtbl -> put_Region(This,Value) ) 

#define ISeparatorGroup_get_UserProperty(This,Name,Result)	\
    ( (This)->lpVtbl -> get_UserProperty(This,Name,Result) ) 

#define ISeparatorGroup_put_UserProperty(This,Name,Value)	\
    ( (This)->lpVtbl -> put_UserProperty(This,Name,Value) ) 

#define ISeparatorGroup_get_BackgroundColor(This,Result)	\
    ( (This)->lpVtbl -> get_BackgroundColor(This,Result) ) 

#define ISeparatorGroup_put_BackgroundColor(This,Value)	\
    ( (This)->lpVtbl -> put_BackgroundColor(This,Value) ) 

#define ISeparatorGroup_get_Name(This,Result)	\
    ( (This)->lpVtbl -> get_Name(This,Result) ) 

#define ISeparatorGroup_put_Name(This,Value)	\
    ( (This)->lpVtbl -> put_Name(This,Value) ) 

#define ISeparatorGroup_get_Description(This,Result)	\
    ( (This)->lpVtbl -> get_Description(This,Result) ) 

#define ISeparatorGroup_put_Description(This,Value)	\
    ( (This)->lpVtbl -> put_Description(This,Value) ) 

#define ISeparatorGroup_get_BlockLayerType(This,Result)	\
    ( (This)->lpVtbl -> get_BlockLayerType(This,Result) ) 

#define ISeparatorGroup_put_BlockLayerType(This,Value)	\
    ( (This)->lpVtbl -> put_BlockLayerType(This,Value) ) 

#define ISeparatorGroup_Move(This,DeltaX,DeltaY)	\
    ( (This)->lpVtbl -> Move(This,DeltaX,DeltaY) ) 

#define ISeparatorGroup_GetAsTextBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsTextBlock(This,Result) ) 

#define ISeparatorGroup_GetAsBarcodeBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsBarcodeBlock(This,Result) ) 

#define ISeparatorGroup_GetAsRasterPictureBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsRasterPictureBlock(This,Result) ) 

#define ISeparatorGroup_GetAsTableBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsTableBlock(This,Result) ) 

#define ISeparatorGroup_GetAsCheckmarkBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsCheckmarkBlock(This,Result) ) 

#define ISeparatorGroup_GetAsCheckmarkGroup(This,Result)	\
    ( (This)->lpVtbl -> GetAsCheckmarkGroup(This,Result) ) 

#define ISeparatorGroup_GetAsSeparatorBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsSeparatorBlock(This,Result) ) 

#define ISeparatorGroup_GetAsSeparatorGroup(This,Result)	\
    ( (This)->lpVtbl -> GetAsSeparatorGroup(This,Result) ) 

#define ISeparatorGroup_GetAsVectorPictureBlock(This,Result)	\
    ( (This)->lpVtbl -> GetAsVectorPictureBlock(This,Result) ) 


#define ISeparatorGroup_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define ISeparatorGroup_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define ISeparatorGroup_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#define ISeparatorGroup_InsertSeparator(This,Index,BlockRegion,Result)	\
    ( (This)->lpVtbl -> InsertSeparator(This,Index,BlockRegion,Result) ) 

#define ISeparatorGroup_AddSeparator(This,BlockRegion,Result)	\
    ( (This)->lpVtbl -> AddSeparator(This,BlockRegion,Result) ) 

#define ISeparatorGroup_Remove(This,Index)	\
    ( (This)->lpVtbl -> Remove(This,Index) ) 

#define ISeparatorGroup_RemoveAll(This)	\
    ( (This)->lpVtbl -> RemoveAll(This) ) 

#define ISeparatorGroup_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISeparatorGroup_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_TextOrientation;

#ifdef __cplusplus

class DECLSPEC_UUID("100020A3-0000-1056-976E-008048D53AE3")
TextOrientation;
#endif

EXTERN_C const CLSID CLSID_Block;

#ifdef __cplusplus

class DECLSPEC_UUID("10002003-0000-1056-976E-008048D53AE3")
Block;
#endif

EXTERN_C const CLSID CLSID_TextBlock;

#ifdef __cplusplus

class DECLSPEC_UUID("10002004-0000-1056-976E-008048D53AE3")
TextBlock;
#endif

EXTERN_C const CLSID CLSID_TableSeparator;

#ifdef __cplusplus

class DECLSPEC_UUID("1000200a-0000-1056-976E-008048D53AE3")
TableSeparator;
#endif

EXTERN_C const CLSID CLSID_TableSeparators;

#ifdef __cplusplus

class DECLSPEC_UUID("10002009-0000-1056-976E-008048D53AE3")
TableSeparators;
#endif

EXTERN_C const CLSID CLSID_TableCell;

#ifdef __cplusplus

class DECLSPEC_UUID("1000200c-0000-1056-976E-008048D53AE3")
TableCell;
#endif

EXTERN_C const CLSID CLSID_TableCells;

#ifdef __cplusplus

class DECLSPEC_UUID("1000200b-0000-1056-976E-008048D53AE3")
TableCells;
#endif

EXTERN_C const CLSID CLSID_TableBlock;

#ifdef __cplusplus

class DECLSPEC_UUID("10002008-0000-1056-976E-008048D53AE3")
TableBlock;
#endif

EXTERN_C const CLSID CLSID_RasterPictureBlock;

#ifdef __cplusplus

class DECLSPEC_UUID("10002006-0000-1056-976E-008048D53AE3")
RasterPictureBlock;
#endif

EXTERN_C const CLSID CLSID_VectorPictureBlock;

#ifdef __cplusplus

class DECLSPEC_UUID("100020A5-0000-1056-976E-008048D53AE3")
VectorPictureBlock;
#endif

EXTERN_C const CLSID CLSID_CheckmarkBlock;

#ifdef __cplusplus

class DECLSPEC_UUID("10002049-0000-1056-976E-008048D53AE3")
CheckmarkBlock;
#endif

EXTERN_C const CLSID CLSID_CheckmarkGroup;

#ifdef __cplusplus

class DECLSPEC_UUID("1000204a-0000-1056-976E-008048D53AE3")
CheckmarkGroup;
#endif

EXTERN_C const CLSID CLSID_LayoutBlocks;

#ifdef __cplusplus

class DECLSPEC_UUID("10002002-0000-1056-976E-008048D53AE3")
LayoutBlocks;
#endif

EXTERN_C const CLSID CLSID_SeparatorBlock;

#ifdef __cplusplus

class DECLSPEC_UUID("1000201c-0000-1056-976E-008048D53AE3")
SeparatorBlock;
#endif

EXTERN_C const CLSID CLSID_SeparatorGroup;

#ifdef __cplusplus

class DECLSPEC_UUID("1000201b-0000-1056-976E-008048D53AE3")
SeparatorGroup;
#endif

#ifndef __ILayout_INTERFACE_DEFINED__
#define __ILayout_INTERFACE_DEFINED__

/* interface ILayout */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ILayout;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001001-0000-1056-976E-008048D53AE3")
    ILayout : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Blocks( 
            /* [retval][out] */ IBlocksCollection **Result) = 0;     
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ long Value) = 0;

		virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Resolution( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Resolution( 
            /* [in] */ long Value) = 0;

		virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BlackSeparators( 
            /* [retval][out] */ IBlocksCollection **Result) = 0;

		virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ ILayout *From) = 0;

		 virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UserProperty( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ VARIANT *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_UserProperty( 
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT Value) = 0;

		 virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFile( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFile( 
            /* [in] */ BSTR Path) = 0;

		    
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToMemory( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromMemory( 
            /* [in] */ long HGlobal) = 0;

		 virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE LoadBlocks_donotuse() = 0;  
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TextAsString( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddBlock( 
        //    /* [in] */ BlockTypeEnum BlockType,
        //    /* [defaultvalue][in] */ IRegion *BlockRegion,
        //    /* [retval][out] */ IBlock **Result) = 0;
        //
        //virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertBlock( 
        //    /* [in] */ long Index,
        //    /* [in] */ BlockTypeEnum BlockType,
        //    /* [defaultvalue][in] */ IRegion *BlockRegion,
        //    /* [retval][out] */ IBlock **Result) = 0;
        //
        //virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PageRegion( 
        //    /* [retval][out] */ IRegion **Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ILayoutVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ILayout * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ILayout * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ILayout * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ILayout * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ILayout * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ILayout * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ILayout * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ILayout * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Blocks )( 
            ILayout * This,
            /* [retval][out] */ ILayoutBlocks **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlackSeparators )( 
            ILayout * This,
            /* [retval][out] */ ILayoutBlocks **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            ILayout * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            ILayout * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            ILayout * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            ILayout * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ILayout * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ILayout * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserProperty )( 
            ILayout * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ VARIANT *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UserProperty )( 
            ILayout * This,
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            ILayout * This,
            /* [in] */ ILayout *From);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFile )( 
            ILayout * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFile )( 
            ILayout * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToMemory )( 
            ILayout * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromMemory )( 
            ILayout * This,
            /* [in] */ long HGlobal);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TextAsString )( 
            ILayout * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddBlock )( 
            ILayout * This,
            /* [in] */ BlockTypeEnum BlockType,
            /* [defaultvalue][in] */ IRegion *BlockRegion,
            /* [retval][out] */ IBlock **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertBlock )( 
            ILayout * This,
            /* [in] */ long Index,
            /* [in] */ BlockTypeEnum BlockType,
            /* [defaultvalue][in] */ IRegion *BlockRegion,
            /* [retval][out] */ IBlock **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PageRegion )( 
            ILayout * This,
            /* [retval][out] */ IRegion **Result);
        
        END_INTERFACE
    } ILayoutVtbl;

    interface ILayout
    {
        CONST_VTBL struct ILayoutVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ILayout_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ILayout_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ILayout_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ILayout_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ILayout_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ILayout_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ILayout_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ILayout_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ILayout_get_Blocks(This,Result)	\
    ( (This)->lpVtbl -> get_Blocks(This,Result) ) 

#define ILayout_get_BlackSeparators(This,Result)	\
    ( (This)->lpVtbl -> get_BlackSeparators(This,Result) ) 

#define ILayout_get_Width(This,Result)	\
    ( (This)->lpVtbl -> get_Width(This,Result) ) 

#define ILayout_put_Width(This,Value)	\
    ( (This)->lpVtbl -> put_Width(This,Value) ) 

#define ILayout_get_Height(This,Result)	\
    ( (This)->lpVtbl -> get_Height(This,Result) ) 

#define ILayout_put_Height(This,Value)	\
    ( (This)->lpVtbl -> put_Height(This,Value) ) 

#define ILayout_get_Name(This,Result)	\
    ( (This)->lpVtbl -> get_Name(This,Result) ) 

#define ILayout_put_Name(This,Value)	\
    ( (This)->lpVtbl -> put_Name(This,Value) ) 

#define ILayout_get_UserProperty(This,Name,Result)	\
    ( (This)->lpVtbl -> get_UserProperty(This,Name,Result) ) 

#define ILayout_put_UserProperty(This,Name,Value)	\
    ( (This)->lpVtbl -> put_UserProperty(This,Name,Value) ) 

#define ILayout_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define ILayout_SaveToFile(This,Path)	\
    ( (This)->lpVtbl -> SaveToFile(This,Path) ) 

#define ILayout_LoadFromFile(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFile(This,Path) ) 

#define ILayout_SaveToMemory(This,Result)	\
    ( (This)->lpVtbl -> SaveToMemory(This,Result) ) 

#define ILayout_LoadFromMemory(This,HGlobal)	\
    ( (This)->lpVtbl -> LoadFromMemory(This,HGlobal) ) 

#define ILayout_get_TextAsString(This,Result)	\
    ( (This)->lpVtbl -> get_TextAsString(This,Result) ) 

#define ILayout_AddBlock(This,BlockType,BlockRegion,Result)	\
    ( (This)->lpVtbl -> AddBlock(This,BlockType,BlockRegion,Result) ) 

#define ILayout_InsertBlock(This,Index,BlockType,BlockRegion,Result)	\
    ( (This)->lpVtbl -> InsertBlock(This,Index,BlockType,BlockRegion,Result) ) 

#define ILayout_get_PageRegion(This,Result)	\
    ( (This)->lpVtbl -> get_PageRegion(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ILayout_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_Layout;

#ifdef __cplusplus

class DECLSPEC_UUID("10002001-0000-1056-976E-008048D53AE3")
Layout;
#endif

EXTERN_C const CLSID CLSID_StringsCollection;

#ifdef __cplusplus

class DECLSPEC_UUID("10002035-0000-1056-976E-008048D53AE3")
StringsCollection;
#endif

EXTERN_C const CLSID CLSID_FuzzyStringsCollection;

#ifdef __cplusplus

class DECLSPEC_UUID("10002063-0000-1056-976E-008048D53AE3")
FuzzyStringsCollection;
#endif

EXTERN_C const CLSID CLSID_LongsCollection;

#ifdef __cplusplus

class DECLSPEC_UUID("10002036-0000-1056-976E-008048D53AE3")
LongsCollection;
#endif

#ifndef __IImageDocumentsCollection_INTERFACE_DEFINED__
#define __IImageDocumentsCollection_INTERFACE_DEFINED__

/* interface IImageDocumentsCollection */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IImageDocumentsCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001038-0000-1056-976E-008048D53AE3")
    IImageDocumentsCollection : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ IImageDocument **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Element( 
            /* [in] */ long Index,
            /* [in] */ IImageDocument *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ IImageDocument **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ IImageDocument *Value,
            /* [in] */ long Index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ IImageDocument *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ long Index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveAll( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IImageDocumentsCollection *From) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IImageDocumentsCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IImageDocumentsCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IImageDocumentsCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IImageDocumentsCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IImageDocumentsCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IImageDocumentsCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IImageDocumentsCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IImageDocumentsCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            IImageDocumentsCollection * This,
            /* [in] */ long Index,
            /* [retval][out] */ IImageDocument **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Element )( 
            IImageDocumentsCollection * This,
            /* [in] */ long Index,
            /* [in] */ IImageDocument *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IImageDocumentsCollection * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IImageDocumentsCollection * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IImageDocumentsCollection * This,
            /* [in] */ long Index,
            /* [retval][out] */ IImageDocument **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            IImageDocumentsCollection * This,
            /* [in] */ IImageDocument *Value,
            /* [in] */ long Index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IImageDocumentsCollection * This,
            /* [in] */ IImageDocument *Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IImageDocumentsCollection * This,
            /* [in] */ long Index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAll )( 
            IImageDocumentsCollection * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IImageDocumentsCollection * This,
            /* [in] */ IImageDocumentsCollection *From);
        
        END_INTERFACE
    } IImageDocumentsCollectionVtbl;

    interface IImageDocumentsCollection
    {
        CONST_VTBL struct IImageDocumentsCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IImageDocumentsCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IImageDocumentsCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IImageDocumentsCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IImageDocumentsCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IImageDocumentsCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IImageDocumentsCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IImageDocumentsCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IImageDocumentsCollection_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define IImageDocumentsCollection_put_Element(This,Index,Value)	\
    ( (This)->lpVtbl -> put_Element(This,Index,Value) ) 

#define IImageDocumentsCollection_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IImageDocumentsCollection_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define IImageDocumentsCollection_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#define IImageDocumentsCollection_Insert(This,Value,Index)	\
    ( (This)->lpVtbl -> Insert(This,Value,Index) ) 

#define IImageDocumentsCollection_Add(This,Value)	\
    ( (This)->lpVtbl -> Add(This,Value) ) 

#define IImageDocumentsCollection_Remove(This,Index)	\
    ( (This)->lpVtbl -> Remove(This,Index) ) 

#define IImageDocumentsCollection_RemoveAll(This)	\
    ( (This)->lpVtbl -> RemoveAll(This) ) 

#define IImageDocumentsCollection_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IImageDocumentsCollection_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_ImageDocumentsCollection;

#ifdef __cplusplus

class DECLSPEC_UUID("10002037-0000-1056-976E-008048D53AE3")
ImageDocumentsCollection;
#endif


#ifndef __IBlocksCollection_INTERFACE_DEFINED__
#define __IBlocksCollection_INTERFACE_DEFINED__

/* interface ILayoutsCollection */
/* [helpstring][oleautomation][nonextensible][dual][helpcontext][uuid][object] */ 


EXTERN_C const IID IID_IBlocksCollection;

    
    MIDL_INTERFACE("10001039-0000-1056-976E-008048D53AE3")
    IBlocksCollection : public IDispatch
    {
    public:
        //virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
        //    /* [in] */ long Index,
        //    /* [retval][out] */ IBlock **Result) = 0;
        //
        //virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Element( 
        //    /* [in] */ long Index,
        //    /* [in] */ IBlock *Value) = 0;
        //
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ IBlock **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ IBlock *Value,
            /* [in] */ long Index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ IBlock *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ long Index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveAll( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IBlocksCollection *From) = 0;
        
    };
#endif
    

#ifndef __ILayoutsCollection_INTERFACE_DEFINED__
#define __ILayoutsCollection_INTERFACE_DEFINED__

/* interface ILayoutsCollection */
/* [helpstring][oleautomation][nonextensible][dual][helpcontext][uuid][object] */ 


EXTERN_C const IID IID_ILayoutsCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001039-0000-1056-976E-008048D53AE3")
    ILayoutsCollection : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ ILayout **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Element( 
            /* [in] */ long Index,
            /* [in] */ ILayout *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ ILayout **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ ILayout *Value,
            /* [in] */ long Index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ ILayout *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ long Index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveAll( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ ILayoutsCollection *From) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ILayoutsCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ILayoutsCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ILayoutsCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ILayoutsCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ILayoutsCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ILayoutsCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ILayoutsCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ILayoutsCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            ILayoutsCollection * This,
            /* [in] */ long Index,
            /* [retval][out] */ ILayout **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Element )( 
            ILayoutsCollection * This,
            /* [in] */ long Index,
            /* [in] */ ILayout *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ILayoutsCollection * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ILayoutsCollection * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ILayoutsCollection * This,
            /* [in] */ long Index,
            /* [retval][out] */ ILayout **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            ILayoutsCollection * This,
            /* [in] */ ILayout *Value,
            /* [in] */ long Index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            ILayoutsCollection * This,
            /* [in] */ ILayout *Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            ILayoutsCollection * This,
            /* [in] */ long Index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAll )( 
            ILayoutsCollection * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            ILayoutsCollection * This,
            /* [in] */ ILayoutsCollection *From);
        
        END_INTERFACE
    } ILayoutsCollectionVtbl;

    interface ILayoutsCollection
    {
        CONST_VTBL struct ILayoutsCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ILayoutsCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ILayoutsCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ILayoutsCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ILayoutsCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ILayoutsCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ILayoutsCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ILayoutsCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ILayoutsCollection_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define ILayoutsCollection_put_Element(This,Index,Value)	\
    ( (This)->lpVtbl -> put_Element(This,Index,Value) ) 

#define ILayoutsCollection_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ILayoutsCollection_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define ILayoutsCollection_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#define ILayoutsCollection_Insert(This,Value,Index)	\
    ( (This)->lpVtbl -> Insert(This,Value,Index) ) 

#define ILayoutsCollection_Add(This,Value)	\
    ( (This)->lpVtbl -> Add(This,Value) ) 

#define ILayoutsCollection_Remove(This,Index)	\
    ( (This)->lpVtbl -> Remove(This,Index) ) 

#define ILayoutsCollection_RemoveAll(This)	\
    ( (This)->lpVtbl -> RemoveAll(This) ) 

#define ILayoutsCollection_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ILayoutsCollection_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_LayoutsCollection;

#ifdef __cplusplus

class DECLSPEC_UUID("10002038-0000-1056-976E-008048D53AE3")
LayoutsCollection;
#endif

#ifndef __ITrainingImagesCollection_INTERFACE_DEFINED__
#define __ITrainingImagesCollection_INTERFACE_DEFINED__

/* interface ITrainingImagesCollection */
/* [helpstring][oleautomation][nonextensible][dual][helpcontext][uuid][object] */ 


EXTERN_C const IID IID_ITrainingImagesCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010A1-0000-1056-976E-008048D53AE3")
    ITrainingImagesCollection : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ ITrainingImage **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Element( 
            /* [in] */ long Index,
            /* [in] */ ITrainingImage *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ ITrainingImage **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ ITrainingImage *Value,
            /* [in] */ long Index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ ITrainingImage *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ long Index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveAll( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ ITrainingImagesCollection *From) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITrainingImagesCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITrainingImagesCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITrainingImagesCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITrainingImagesCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITrainingImagesCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITrainingImagesCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITrainingImagesCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITrainingImagesCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            ITrainingImagesCollection * This,
            /* [in] */ long Index,
            /* [retval][out] */ ITrainingImage **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Element )( 
            ITrainingImagesCollection * This,
            /* [in] */ long Index,
            /* [in] */ ITrainingImage *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ITrainingImagesCollection * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ITrainingImagesCollection * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ITrainingImagesCollection * This,
            /* [in] */ long Index,
            /* [retval][out] */ ITrainingImage **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            ITrainingImagesCollection * This,
            /* [in] */ ITrainingImage *Value,
            /* [in] */ long Index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            ITrainingImagesCollection * This,
            /* [in] */ ITrainingImage *Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            ITrainingImagesCollection * This,
            /* [in] */ long Index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAll )( 
            ITrainingImagesCollection * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            ITrainingImagesCollection * This,
            /* [in] */ ITrainingImagesCollection *From);
        
        END_INTERFACE
    } ITrainingImagesCollectionVtbl;

    interface ITrainingImagesCollection
    {
        CONST_VTBL struct ITrainingImagesCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITrainingImagesCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITrainingImagesCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITrainingImagesCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITrainingImagesCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITrainingImagesCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITrainingImagesCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITrainingImagesCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITrainingImagesCollection_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define ITrainingImagesCollection_put_Element(This,Index,Value)	\
    ( (This)->lpVtbl -> put_Element(This,Index,Value) ) 

#define ITrainingImagesCollection_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ITrainingImagesCollection_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define ITrainingImagesCollection_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#define ITrainingImagesCollection_Insert(This,Value,Index)	\
    ( (This)->lpVtbl -> Insert(This,Value,Index) ) 

#define ITrainingImagesCollection_Add(This,Value)	\
    ( (This)->lpVtbl -> Add(This,Value) ) 

#define ITrainingImagesCollection_Remove(This,Index)	\
    ( (This)->lpVtbl -> Remove(This,Index) ) 

#define ITrainingImagesCollection_RemoveAll(This)	\
    ( (This)->lpVtbl -> RemoveAll(This) ) 

#define ITrainingImagesCollection_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITrainingImagesCollection_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_TrainingImagesCollection;

#ifdef __cplusplus

class DECLSPEC_UUID("10002091-0000-1056-976E-008048D53AE3")
TrainingImagesCollection;
#endif

#ifndef __IScanSourceSettings_INTERFACE_DEFINED__
#define __IScanSourceSettings_INTERFACE_DEFINED__

/* interface IScanSourceSettings */
/* [helpstring][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IScanSourceSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000105C-0000-1056-976E-008048D53AE3")
    IScanSourceSettings : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RotationAngle( 
            /* [retval][out] */ ScanPageRotationAngleEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RotationAngle( 
            /* [in] */ ScanPageRotationAngleEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Resolution( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Resolution( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PaperSize( 
            /* [retval][out] */ ScanPaperSizeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PaperSize( 
            /* [in] */ ScanPaperSizeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PaperLeft( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PaperLeft( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PaperTop( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PaperTop( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PaperRight( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PaperRight( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PaperBottom( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PaperBottom( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BrightnessControl( 
            /* [retval][out] */ ScanBrightnessControlEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BrightnessControl( 
            /* [in] */ ScanBrightnessControlEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Brightness( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Brightness( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PictureMode( 
            /* [retval][out] */ ScanPictureModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PictureMode( 
            /* [in] */ ScanPictureModeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UseFeeder( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_UseFeeder( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_StopBetweenPages( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_StopBetweenPages( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PauseBetweenPages( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PauseBetweenPages( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Delay( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Delay( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DuplexMode( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DuplexMode( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IScanSourceSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScanSourceSettings * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScanSourceSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScanSourceSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IScanSourceSettings * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IScanSourceSettings * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IScanSourceSettings * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IScanSourceSettings * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IScanSourceSettings * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RotationAngle )( 
            IScanSourceSettings * This,
            /* [retval][out] */ ScanPageRotationAngleEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RotationAngle )( 
            IScanSourceSettings * This,
            /* [in] */ ScanPageRotationAngleEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Resolution )( 
            IScanSourceSettings * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Resolution )( 
            IScanSourceSettings * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PaperSize )( 
            IScanSourceSettings * This,
            /* [retval][out] */ ScanPaperSizeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PaperSize )( 
            IScanSourceSettings * This,
            /* [in] */ ScanPaperSizeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PaperLeft )( 
            IScanSourceSettings * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PaperLeft )( 
            IScanSourceSettings * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PaperTop )( 
            IScanSourceSettings * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PaperTop )( 
            IScanSourceSettings * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PaperRight )( 
            IScanSourceSettings * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PaperRight )( 
            IScanSourceSettings * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PaperBottom )( 
            IScanSourceSettings * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PaperBottom )( 
            IScanSourceSettings * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BrightnessControl )( 
            IScanSourceSettings * This,
            /* [retval][out] */ ScanBrightnessControlEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BrightnessControl )( 
            IScanSourceSettings * This,
            /* [in] */ ScanBrightnessControlEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Brightness )( 
            IScanSourceSettings * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Brightness )( 
            IScanSourceSettings * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictureMode )( 
            IScanSourceSettings * This,
            /* [retval][out] */ ScanPictureModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PictureMode )( 
            IScanSourceSettings * This,
            /* [in] */ ScanPictureModeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UseFeeder )( 
            IScanSourceSettings * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UseFeeder )( 
            IScanSourceSettings * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StopBetweenPages )( 
            IScanSourceSettings * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_StopBetweenPages )( 
            IScanSourceSettings * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PauseBetweenPages )( 
            IScanSourceSettings * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PauseBetweenPages )( 
            IScanSourceSettings * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Delay )( 
            IScanSourceSettings * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Delay )( 
            IScanSourceSettings * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DuplexMode )( 
            IScanSourceSettings * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DuplexMode )( 
            IScanSourceSettings * This,
            /* [in] */ VARIANT_BOOL Value);
        
        END_INTERFACE
    } IScanSourceSettingsVtbl;

    interface IScanSourceSettings
    {
        CONST_VTBL struct IScanSourceSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScanSourceSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScanSourceSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScanSourceSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScanSourceSettings_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IScanSourceSettings_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IScanSourceSettings_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IScanSourceSettings_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IScanSourceSettings_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IScanSourceSettings_get_RotationAngle(This,Result)	\
    ( (This)->lpVtbl -> get_RotationAngle(This,Result) ) 

#define IScanSourceSettings_put_RotationAngle(This,Value)	\
    ( (This)->lpVtbl -> put_RotationAngle(This,Value) ) 

#define IScanSourceSettings_get_Resolution(This,Result)	\
    ( (This)->lpVtbl -> get_Resolution(This,Result) ) 

#define IScanSourceSettings_put_Resolution(This,Value)	\
    ( (This)->lpVtbl -> put_Resolution(This,Value) ) 

#define IScanSourceSettings_get_PaperSize(This,Result)	\
    ( (This)->lpVtbl -> get_PaperSize(This,Result) ) 

#define IScanSourceSettings_put_PaperSize(This,Value)	\
    ( (This)->lpVtbl -> put_PaperSize(This,Value) ) 

#define IScanSourceSettings_get_PaperLeft(This,Result)	\
    ( (This)->lpVtbl -> get_PaperLeft(This,Result) ) 

#define IScanSourceSettings_put_PaperLeft(This,Value)	\
    ( (This)->lpVtbl -> put_PaperLeft(This,Value) ) 

#define IScanSourceSettings_get_PaperTop(This,Result)	\
    ( (This)->lpVtbl -> get_PaperTop(This,Result) ) 

#define IScanSourceSettings_put_PaperTop(This,Value)	\
    ( (This)->lpVtbl -> put_PaperTop(This,Value) ) 

#define IScanSourceSettings_get_PaperRight(This,Result)	\
    ( (This)->lpVtbl -> get_PaperRight(This,Result) ) 

#define IScanSourceSettings_put_PaperRight(This,Value)	\
    ( (This)->lpVtbl -> put_PaperRight(This,Value) ) 

#define IScanSourceSettings_get_PaperBottom(This,Result)	\
    ( (This)->lpVtbl -> get_PaperBottom(This,Result) ) 

#define IScanSourceSettings_put_PaperBottom(This,Value)	\
    ( (This)->lpVtbl -> put_PaperBottom(This,Value) ) 

#define IScanSourceSettings_get_BrightnessControl(This,Result)	\
    ( (This)->lpVtbl -> get_BrightnessControl(This,Result) ) 

#define IScanSourceSettings_put_BrightnessControl(This,Value)	\
    ( (This)->lpVtbl -> put_BrightnessControl(This,Value) ) 

#define IScanSourceSettings_get_Brightness(This,Result)	\
    ( (This)->lpVtbl -> get_Brightness(This,Result) ) 

#define IScanSourceSettings_put_Brightness(This,Value)	\
    ( (This)->lpVtbl -> put_Brightness(This,Value) ) 

#define IScanSourceSettings_get_PictureMode(This,Result)	\
    ( (This)->lpVtbl -> get_PictureMode(This,Result) ) 

#define IScanSourceSettings_put_PictureMode(This,Value)	\
    ( (This)->lpVtbl -> put_PictureMode(This,Value) ) 

#define IScanSourceSettings_get_UseFeeder(This,Result)	\
    ( (This)->lpVtbl -> get_UseFeeder(This,Result) ) 

#define IScanSourceSettings_put_UseFeeder(This,Value)	\
    ( (This)->lpVtbl -> put_UseFeeder(This,Value) ) 

#define IScanSourceSettings_get_StopBetweenPages(This,Result)	\
    ( (This)->lpVtbl -> get_StopBetweenPages(This,Result) ) 

#define IScanSourceSettings_put_StopBetweenPages(This,Value)	\
    ( (This)->lpVtbl -> put_StopBetweenPages(This,Value) ) 

#define IScanSourceSettings_get_PauseBetweenPages(This,Result)	\
    ( (This)->lpVtbl -> get_PauseBetweenPages(This,Result) ) 

#define IScanSourceSettings_put_PauseBetweenPages(This,Value)	\
    ( (This)->lpVtbl -> put_PauseBetweenPages(This,Value) ) 

#define IScanSourceSettings_get_Delay(This,Result)	\
    ( (This)->lpVtbl -> get_Delay(This,Result) ) 

#define IScanSourceSettings_put_Delay(This,Value)	\
    ( (This)->lpVtbl -> put_Delay(This,Value) ) 

#define IScanSourceSettings_get_DuplexMode(This,Result)	\
    ( (This)->lpVtbl -> get_DuplexMode(This,Result) ) 

#define IScanSourceSettings_put_DuplexMode(This,Value)	\
    ( (This)->lpVtbl -> put_DuplexMode(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScanSourceSettings_INTERFACE_DEFINED__ */


#ifndef __IScanManagerEvents_INTERFACE_DEFINED__
#define __IScanManagerEvents_INTERFACE_DEFINED__

/* interface IScanManagerEvents */
/* [helpstring][helpcontext][uuid][object] */ 


EXTERN_C const IID IID_IScanManagerEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001045-0000-1056-976E-008048D53AE3")
    IScanManagerEvents : public IUnknown
    {
    public:
        virtual /* [helpstring][helpcontext] */ HRESULT STDMETHODCALLTYPE NewImage( 
            /* [in] */ BSTR scannedImage,
            /* [out][in] */ VARIANT_BOOL *CancelScanning) = 0;
        
        virtual /* [helpstring][helpcontext] */ HRESULT STDMETHODCALLTYPE ScanStopped( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IScanManagerEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScanManagerEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScanManagerEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScanManagerEvents * This);
        
        /* [helpstring][helpcontext] */ HRESULT ( STDMETHODCALLTYPE *NewImage )( 
            IScanManagerEvents * This,
            /* [in] */ BSTR scannedImage,
            /* [out][in] */ VARIANT_BOOL *CancelScanning);
        
        /* [helpstring][helpcontext] */ HRESULT ( STDMETHODCALLTYPE *ScanStopped )( 
            IScanManagerEvents * This);
        
        END_INTERFACE
    } IScanManagerEventsVtbl;

    interface IScanManagerEvents
    {
        CONST_VTBL struct IScanManagerEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScanManagerEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScanManagerEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScanManagerEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScanManagerEvents_NewImage(This,scannedImage,CancelScanning)	\
    ( (This)->lpVtbl -> NewImage(This,scannedImage,CancelScanning) ) 

#define IScanManagerEvents_ScanStopped(This)	\
    ( (This)->lpVtbl -> ScanStopped(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScanManagerEvents_INTERFACE_DEFINED__ */


#ifndef __DIScanManagerEvents_DISPINTERFACE_DEFINED__
#define __DIScanManagerEvents_DISPINTERFACE_DEFINED__

/* dispinterface DIScanManagerEvents */
/* [helpstring][helpcontext][uuid] */ 


EXTERN_C const IID DIID_DIScanManagerEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("10001044-0000-1056-976E-008048D53AE3")
    DIScanManagerEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DIScanManagerEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DIScanManagerEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DIScanManagerEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DIScanManagerEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DIScanManagerEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DIScanManagerEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DIScanManagerEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DIScanManagerEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DIScanManagerEventsVtbl;

    interface DIScanManagerEvents
    {
        CONST_VTBL struct DIScanManagerEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DIScanManagerEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DIScanManagerEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DIScanManagerEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DIScanManagerEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DIScanManagerEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DIScanManagerEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DIScanManagerEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DIScanManagerEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IScanManager_INTERFACE_DEFINED__
#define __IScanManager_INTERFACE_DEFINED__

/* interface IScanManager */
/* [helpstring][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IScanManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001043-0000-1056-976E-008048D53AE3")
    IScanManager : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ScanSources( 
            /* [retval][out] */ IStringsCollection **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Scan( 
            /* [in] */ BSTR ScanSource,
            /* [in] */ BSTR DestinationFolder,
            /* [in] */ VARIANT_BOOL ScanMultiplePages,
            /* [retval][out] */ IStringsCollection **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ScanSourceSettings( 
            /* [in] */ BSTR ScanSource,
            /* [retval][out] */ IScanSourceSettings **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ScanSourceSettings( 
            /* [in] */ BSTR ScanSource,
            /* [in] */ IScanSourceSettings *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ScanOptionsInterfaceType( 
            /* [retval][out] */ ScanOptionsInterfaceTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ScanOptionsInterfaceType( 
            /* [in] */ ScanOptionsInterfaceTypeEnum Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IScanManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IScanManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IScanManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IScanManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IScanManager * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IScanManager * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IScanManager * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IScanManager * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IScanManager * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ScanSources )( 
            IScanManager * This,
            /* [retval][out] */ IStringsCollection **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Scan )( 
            IScanManager * This,
            /* [in] */ BSTR ScanSource,
            /* [in] */ BSTR DestinationFolder,
            /* [in] */ VARIANT_BOOL ScanMultiplePages,
            /* [retval][out] */ IStringsCollection **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ScanSourceSettings )( 
            IScanManager * This,
            /* [in] */ BSTR ScanSource,
            /* [retval][out] */ IScanSourceSettings **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ScanSourceSettings )( 
            IScanManager * This,
            /* [in] */ BSTR ScanSource,
            /* [in] */ IScanSourceSettings *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ScanOptionsInterfaceType )( 
            IScanManager * This,
            /* [retval][out] */ ScanOptionsInterfaceTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ScanOptionsInterfaceType )( 
            IScanManager * This,
            /* [in] */ ScanOptionsInterfaceTypeEnum Value);
        
        END_INTERFACE
    } IScanManagerVtbl;

    interface IScanManager
    {
        CONST_VTBL struct IScanManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScanManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IScanManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IScanManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IScanManager_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IScanManager_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IScanManager_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IScanManager_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IScanManager_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IScanManager_get_ScanSources(This,Result)	\
    ( (This)->lpVtbl -> get_ScanSources(This,Result) ) 

#define IScanManager_Scan(This,ScanSource,DestinationFolder,ScanMultiplePages,Result)	\
    ( (This)->lpVtbl -> Scan(This,ScanSource,DestinationFolder,ScanMultiplePages,Result) ) 

#define IScanManager_get_ScanSourceSettings(This,ScanSource,Result)	\
    ( (This)->lpVtbl -> get_ScanSourceSettings(This,ScanSource,Result) ) 

#define IScanManager_put_ScanSourceSettings(This,ScanSource,Value)	\
    ( (This)->lpVtbl -> put_ScanSourceSettings(This,ScanSource,Value) ) 

#define IScanManager_get_ScanOptionsInterfaceType(This,Result)	\
    ( (This)->lpVtbl -> get_ScanOptionsInterfaceType(This,Result) ) 

#define IScanManager_put_ScanOptionsInterfaceType(This,Value)	\
    ( (This)->lpVtbl -> put_ScanOptionsInterfaceType(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IScanManager_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_ScanManager;

#ifdef __cplusplus

class DECLSPEC_UUID("1000203c-0000-1056-976E-008048D53AE3")
ScanManager;
#endif

EXTERN_C const CLSID CLSID_ScanSourceSettings;

#ifdef __cplusplus

class DECLSPEC_UUID("1000204f-0000-1056-976E-008048D53AE3")
ScanSourceSettings;
#endif

#ifndef __IDocumentInfo_INTERFACE_DEFINED__
#define __IDocumentInfo_INTERFACE_DEFINED__

/* interface IDocumentInfo */
/* [helpstring][helpcontext][oleautomation][uuid][object] */ 


EXTERN_C const IID IID_IDocumentInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001063-0000-1056-976E-008048D53AE3")
    IDocumentInfo : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DocumentContentInfo( 
            /* [retval][out] */ IDocumentContentInfo **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDocumentInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDocumentInfo * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDocumentInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDocumentInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDocumentInfo * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDocumentInfo * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDocumentInfo * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDocumentInfo * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IDocumentInfo * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DocumentContentInfo )( 
            IDocumentInfo * This,
            /* [retval][out] */ IDocumentContentInfo **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            IDocumentInfo * This);
        
        END_INTERFACE
    } IDocumentInfoVtbl;

    interface IDocumentInfo
    {
        CONST_VTBL struct IDocumentInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDocumentInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDocumentInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDocumentInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDocumentInfo_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IDocumentInfo_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IDocumentInfo_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IDocumentInfo_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IDocumentInfo_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IDocumentInfo_get_DocumentContentInfo(This,Result)	\
    ( (This)->lpVtbl -> get_DocumentContentInfo(This,Result) ) 

#define IDocumentInfo_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDocumentInfo_INTERFACE_DEFINED__ */


#ifndef __DIDocumentAnalyzerEvents_DISPINTERFACE_DEFINED__
#define __DIDocumentAnalyzerEvents_DISPINTERFACE_DEFINED__

/* dispinterface DIDocumentAnalyzerEvents */
/* [helpstring][helpcontext][uuid] */ 


EXTERN_C const IID DIID_DIDocumentAnalyzerEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("1000103f-0000-1056-976E-008048D53AE3")
    DIDocumentAnalyzerEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DIDocumentAnalyzerEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DIDocumentAnalyzerEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DIDocumentAnalyzerEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DIDocumentAnalyzerEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DIDocumentAnalyzerEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DIDocumentAnalyzerEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DIDocumentAnalyzerEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DIDocumentAnalyzerEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DIDocumentAnalyzerEventsVtbl;

    interface DIDocumentAnalyzerEvents
    {
        CONST_VTBL struct DIDocumentAnalyzerEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DIDocumentAnalyzerEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DIDocumentAnalyzerEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DIDocumentAnalyzerEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DIDocumentAnalyzerEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DIDocumentAnalyzerEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DIDocumentAnalyzerEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DIDocumentAnalyzerEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DIDocumentAnalyzerEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IDocumentAnalyzerEvents_INTERFACE_DEFINED__
#define __IDocumentAnalyzerEvents_INTERFACE_DEFINED__

/* interface IDocumentAnalyzerEvents */
/* [object][helpstring][helpcontext][uuid] */ 


EXTERN_C const IID IID_IDocumentAnalyzerEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001040-0000-1056-976E-008048D53AE3")
    IDocumentAnalyzerEvents : public IUnknown
    {
    public:
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnRegionProcessed( 
            /* [in] */ long RecognitionPassNumber,
            /* [in] */ IRegion *Region,
            /* [out][in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnProgress( 
            /* [in] */ long Percentage,
            /* [out][in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnRecognizerTip( 
            /* [in] */ BSTR Tip,
            /* [out][in] */ VARIANT_BOOL *Cancel) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDocumentAnalyzerEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDocumentAnalyzerEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDocumentAnalyzerEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDocumentAnalyzerEvents * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnRegionProcessed )( 
            IDocumentAnalyzerEvents * This,
            /* [in] */ long RecognitionPassNumber,
            /* [in] */ IRegion *Region,
            /* [out][in] */ VARIANT_BOOL *Cancel);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnProgress )( 
            IDocumentAnalyzerEvents * This,
            /* [in] */ long Percentage,
            /* [out][in] */ VARIANT_BOOL *Cancel);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnRecognizerTip )( 
            IDocumentAnalyzerEvents * This,
            /* [in] */ BSTR Tip,
            /* [out][in] */ VARIANT_BOOL *Cancel);
        
        END_INTERFACE
    } IDocumentAnalyzerEventsVtbl;

    interface IDocumentAnalyzerEvents
    {
        CONST_VTBL struct IDocumentAnalyzerEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDocumentAnalyzerEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDocumentAnalyzerEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDocumentAnalyzerEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDocumentAnalyzerEvents_OnRegionProcessed(This,RecognitionPassNumber,Region,Cancel)	\
    ( (This)->lpVtbl -> OnRegionProcessed(This,RecognitionPassNumber,Region,Cancel) ) 

#define IDocumentAnalyzerEvents_OnProgress(This,Percentage,Cancel)	\
    ( (This)->lpVtbl -> OnProgress(This,Percentage,Cancel) ) 

#define IDocumentAnalyzerEvents_OnRecognizerTip(This,Tip,Cancel)	\
    ( (This)->lpVtbl -> OnRecognizerTip(This,Tip,Cancel) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDocumentAnalyzerEvents_INTERFACE_DEFINED__ */


#ifndef __IDocumentAnalyzer_INTERFACE_DEFINED__
#define __IDocumentAnalyzer_INTERFACE_DEFINED__

/* interface IDocumentAnalyzer */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IDocumentAnalyzer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001032-0000-1056-976E-008048D53AE3")
    IDocumentAnalyzer : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AnalyzePage( 
            /* [in] */ IImageDocument *ImageDicument,
            /* [in] */ IPageProcessingParams *ProcessingParams,
            /* [in] */ ILayout *Layout,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AnalyzeRegion( 
            /* [in] */ IImageDocument *ImageDocument,
            /* [in] */ IRegion *Region,
            /* [in] */ IPageProcessingParams *ProcessingParams,
            /* [in] */ ILayout *Layout,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AnalyzeTable( 
            /* [in] */ IImageDocument *ImageDocument,
            /* [in] */ IPageProcessingParams *ProcessingParams,
            /* [in] */ ILayout *Layout,
            /* [in] */ long BlockIndex,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RecognizePage( 
            /* [in] */ IImageDocument *ImageDocument,
            /* [in] */ ISynthesisParamsForPage *SynthesisParams,
            /* [in] */ IObjectsExtractionParams *ExtractionParams,
            /* [in] */ ILayout *Layout,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RecognizeBlocks( 
            /* [in] */ IImageDocument *ImageDocument,
            /* [in] */ ISynthesisParamsForPage *SynthesisParams,
            /* [in] */ IObjectsExtractionParams *ExtractionParams,
            /* [in] */ ILayout *Layout,
            /* [in] */ ILayoutBlocks *Blocks,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AnalyzeAndRecognizePage( 
            /* [in] */ IImageDocument *ImageDocument,
            /* [in] */ IPageProcessingParams *ProcessingParams,
            /* [in] */ ISynthesisParamsForPage *SynthesisParams,
            /* [in] */ ILayout *Layout,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RecognizeImageDocumentAsPlainText( 
            /* [in] */ IImageDocument *Image,
            /* [defaultvalue][in] */ IPageProcessingParams *ProcessingParams,
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParams,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo,
            /* [retval][out] */ IPlainText **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ExtractBarcodes( 
            /* [in] */ IImageDocument *ImageDocument,
            /* [in] */ IBarcodeParams *BarcodeParams,
            /* [in] */ IObjectsExtractionParams *ExtractionParams,
            /* [in] */ ILayout *Layout,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveGeometricalDistortions( 
            /* [in] */ IImageDocument *image,
            /* [in] */ IObjectsExtractionParams *params) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DetectOrientation( 
            /* [in] */ IImageDocument *ImageDocument,
            /* [defaultvalue][in] */ IOrientationDetectionParams *OrientationParams,
            /* [defaultvalue][in] */ IObjectsExtractionParams *ExtractionParams,
            /* [defaultvalue][in] */ IRecognizerParams *RecognizerParams,
            /* [retval][out] */ ITextOrientation **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindPageSplitPosition( 
            /* [in] */ IImageDocument *ImageDocument,
            /* [in] */ IObjectsExtractionParams *ExtractionParams,
            /* [out] */ PageSplitDirectionEnum *SplitDirection,
            /* [out] */ long *startSplitPosition,
            /* [out] */ long *endSplitPosition) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddWordToCacheDictionary( 
            /* [in] */ IRecognizerParams *params,
            /* [in] */ BSTR Word,
            /* [defaultvalue][in] */ long Weight = 30) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddWordsToCacheDictionary( 
            /* [in] */ IRecognizerParams *params,
            /* [in] */ IStringsCollection *Words,
            /* [defaultvalue][in] */ ILongsCollection *Weights = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CleanCacheDictionary( 
            /* [in] */ IRecognizerParams *params) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AnalyzePages( 
            /* [in] */ IImageDocumentsCollection *imageDocuments,
            /* [in] */ ILayoutsCollection *layouts,
            /* [in] */ IPageProcessingParams *processingParams,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RecognizePages( 
            /* [in] */ IImageDocumentsCollection *ImageDocuments,
            /* [in] */ ILayoutsCollection *Layouts,
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParams = 0,
            /* [defaultvalue][in] */ IObjectsExtractionParams *ExtractionParams = 0,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AnalyzeAndRecognizePages( 
            /* [in] */ IImageDocumentsCollection *ImageDocuments,
            /* [in] */ ILayoutsCollection *Layout,
            /* [defaultvalue][in] */ IPageProcessingParams *ProcessingParams = 0,
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParams = 0,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo = 0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDocumentAnalyzerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDocumentAnalyzer * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDocumentAnalyzer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDocumentAnalyzer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDocumentAnalyzer * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDocumentAnalyzer * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDocumentAnalyzer * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDocumentAnalyzer * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IDocumentAnalyzer * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AnalyzePage )( 
            IDocumentAnalyzer * This,
            /* [in] */ IImageDocument *ImageDicument,
            /* [in] */ IPageProcessingParams *ProcessingParams,
            /* [in] */ ILayout *Layout,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AnalyzeRegion )( 
            IDocumentAnalyzer * This,
            /* [in] */ IImageDocument *ImageDocument,
            /* [in] */ IRegion *Region,
            /* [in] */ IPageProcessingParams *ProcessingParams,
            /* [in] */ ILayout *Layout,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AnalyzeTable )( 
            IDocumentAnalyzer * This,
            /* [in] */ IImageDocument *ImageDocument,
            /* [in] */ IPageProcessingParams *ProcessingParams,
            /* [in] */ ILayout *Layout,
            /* [in] */ long BlockIndex,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RecognizePage )( 
            IDocumentAnalyzer * This,
            /* [in] */ IImageDocument *ImageDocument,
            /* [in] */ ISynthesisParamsForPage *SynthesisParams,
            /* [in] */ IObjectsExtractionParams *ExtractionParams,
            /* [in] */ ILayout *Layout,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RecognizeBlocks )( 
            IDocumentAnalyzer * This,
            /* [in] */ IImageDocument *ImageDocument,
            /* [in] */ ISynthesisParamsForPage *SynthesisParams,
            /* [in] */ IObjectsExtractionParams *ExtractionParams,
            /* [in] */ ILayout *Layout,
            /* [in] */ ILayoutBlocks *Blocks,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AnalyzeAndRecognizePage )( 
            IDocumentAnalyzer * This,
            /* [in] */ IImageDocument *ImageDocument,
            /* [in] */ IPageProcessingParams *ProcessingParams,
            /* [in] */ ISynthesisParamsForPage *SynthesisParams,
            /* [in] */ ILayout *Layout,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RecognizeImageDocumentAsPlainText )( 
            IDocumentAnalyzer * This,
            /* [in] */ IImageDocument *Image,
            /* [defaultvalue][in] */ IPageProcessingParams *ProcessingParams,
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParams,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo,
            /* [retval][out] */ IPlainText **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ExtractBarcodes )( 
            IDocumentAnalyzer * This,
            /* [in] */ IImageDocument *ImageDocument,
            /* [in] */ IBarcodeParams *BarcodeParams,
            /* [in] */ IObjectsExtractionParams *ExtractionParams,
            /* [in] */ ILayout *Layout,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveGeometricalDistortions )( 
            IDocumentAnalyzer * This,
            /* [in] */ IImageDocument *image,
            /* [in] */ IObjectsExtractionParams *params);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DetectOrientation )( 
            IDocumentAnalyzer * This,
            /* [in] */ IImageDocument *ImageDocument,
            /* [defaultvalue][in] */ IOrientationDetectionParams *OrientationParams,
            /* [defaultvalue][in] */ IObjectsExtractionParams *ExtractionParams,
            /* [defaultvalue][in] */ IRecognizerParams *RecognizerParams,
            /* [retval][out] */ ITextOrientation **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindPageSplitPosition )( 
            IDocumentAnalyzer * This,
            /* [in] */ IImageDocument *ImageDocument,
            /* [in] */ IObjectsExtractionParams *ExtractionParams,
            /* [out] */ PageSplitDirectionEnum *SplitDirection,
            /* [out] */ long *startSplitPosition,
            /* [out] */ long *endSplitPosition);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddWordToCacheDictionary )( 
            IDocumentAnalyzer * This,
            /* [in] */ IRecognizerParams *params,
            /* [in] */ BSTR Word,
            /* [defaultvalue][in] */ long Weight);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddWordsToCacheDictionary )( 
            IDocumentAnalyzer * This,
            /* [in] */ IRecognizerParams *params,
            /* [in] */ IStringsCollection *Words,
            /* [defaultvalue][in] */ ILongsCollection *Weights);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CleanCacheDictionary )( 
            IDocumentAnalyzer * This,
            /* [in] */ IRecognizerParams *params);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AnalyzePages )( 
            IDocumentAnalyzer * This,
            /* [in] */ IImageDocumentsCollection *imageDocuments,
            /* [in] */ ILayoutsCollection *layouts,
            /* [in] */ IPageProcessingParams *processingParams,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RecognizePages )( 
            IDocumentAnalyzer * This,
            /* [in] */ IImageDocumentsCollection *ImageDocuments,
            /* [in] */ ILayoutsCollection *Layouts,
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParams,
            /* [defaultvalue][in] */ IObjectsExtractionParams *ExtractionParams,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AnalyzeAndRecognizePages )( 
            IDocumentAnalyzer * This,
            /* [in] */ IImageDocumentsCollection *ImageDocuments,
            /* [in] */ ILayoutsCollection *Layout,
            /* [defaultvalue][in] */ IPageProcessingParams *ProcessingParams,
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParams,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo);
        
        END_INTERFACE
    } IDocumentAnalyzerVtbl;

    interface IDocumentAnalyzer
    {
        CONST_VTBL struct IDocumentAnalyzerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDocumentAnalyzer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDocumentAnalyzer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDocumentAnalyzer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDocumentAnalyzer_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IDocumentAnalyzer_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IDocumentAnalyzer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IDocumentAnalyzer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IDocumentAnalyzer_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IDocumentAnalyzer_AnalyzePage(This,ImageDicument,ProcessingParams,Layout,DocumentInfo)	\
    ( (This)->lpVtbl -> AnalyzePage(This,ImageDicument,ProcessingParams,Layout,DocumentInfo) ) 

#define IDocumentAnalyzer_AnalyzeRegion(This,ImageDocument,Region,ProcessingParams,Layout,DocumentInfo)	\
    ( (This)->lpVtbl -> AnalyzeRegion(This,ImageDocument,Region,ProcessingParams,Layout,DocumentInfo) ) 

#define IDocumentAnalyzer_AnalyzeTable(This,ImageDocument,ProcessingParams,Layout,BlockIndex,DocumentInfo)	\
    ( (This)->lpVtbl -> AnalyzeTable(This,ImageDocument,ProcessingParams,Layout,BlockIndex,DocumentInfo) ) 

#define IDocumentAnalyzer_RecognizePage(This,ImageDocument,SynthesisParams,ExtractionParams,Layout,DocumentInfo)	\
    ( (This)->lpVtbl -> RecognizePage(This,ImageDocument,SynthesisParams,ExtractionParams,Layout,DocumentInfo) ) 

#define IDocumentAnalyzer_RecognizeBlocks(This,ImageDocument,SynthesisParams,ExtractionParams,Layout,Blocks,DocumentInfo)	\
    ( (This)->lpVtbl -> RecognizeBlocks(This,ImageDocument,SynthesisParams,ExtractionParams,Layout,Blocks,DocumentInfo) ) 

#define IDocumentAnalyzer_AnalyzeAndRecognizePage(This,ImageDocument,ProcessingParams,SynthesisParams,Layout,DocumentInfo)	\
    ( (This)->lpVtbl -> AnalyzeAndRecognizePage(This,ImageDocument,ProcessingParams,SynthesisParams,Layout,DocumentInfo) ) 

#define IDocumentAnalyzer_RecognizeImageDocumentAsPlainText(This,Image,ProcessingParams,SynthesisParams,DocumentInfo,Result)	\
    ( (This)->lpVtbl -> RecognizeImageDocumentAsPlainText(This,Image,ProcessingParams,SynthesisParams,DocumentInfo,Result) ) 

#define IDocumentAnalyzer_ExtractBarcodes(This,ImageDocument,BarcodeParams,ExtractionParams,Layout,DocumentInfo)	\
    ( (This)->lpVtbl -> ExtractBarcodes(This,ImageDocument,BarcodeParams,ExtractionParams,Layout,DocumentInfo) ) 

#define IDocumentAnalyzer_RemoveGeometricalDistortions(This,image,params)	\
    ( (This)->lpVtbl -> RemoveGeometricalDistortions(This,image,params) ) 

#define IDocumentAnalyzer_DetectOrientation(This,ImageDocument,OrientationParams,ExtractionParams,RecognizerParams,Result)	\
    ( (This)->lpVtbl -> DetectOrientation(This,ImageDocument,OrientationParams,ExtractionParams,RecognizerParams,Result) ) 

#define IDocumentAnalyzer_FindPageSplitPosition(This,ImageDocument,ExtractionParams,SplitDirection,startSplitPosition,endSplitPosition)	\
    ( (This)->lpVtbl -> FindPageSplitPosition(This,ImageDocument,ExtractionParams,SplitDirection,startSplitPosition,endSplitPosition) ) 

#define IDocumentAnalyzer_AddWordToCacheDictionary(This,params,Word,Weight)	\
    ( (This)->lpVtbl -> AddWordToCacheDictionary(This,params,Word,Weight) ) 

#define IDocumentAnalyzer_AddWordsToCacheDictionary(This,params,Words,Weights)	\
    ( (This)->lpVtbl -> AddWordsToCacheDictionary(This,params,Words,Weights) ) 

#define IDocumentAnalyzer_CleanCacheDictionary(This,params)	\
    ( (This)->lpVtbl -> CleanCacheDictionary(This,params) ) 

#define IDocumentAnalyzer_AnalyzePages(This,imageDocuments,layouts,processingParams,DocumentInfo)	\
    ( (This)->lpVtbl -> AnalyzePages(This,imageDocuments,layouts,processingParams,DocumentInfo) ) 

#define IDocumentAnalyzer_RecognizePages(This,ImageDocuments,Layouts,SynthesisParams,ExtractionParams,DocumentInfo)	\
    ( (This)->lpVtbl -> RecognizePages(This,ImageDocuments,Layouts,SynthesisParams,ExtractionParams,DocumentInfo) ) 

#define IDocumentAnalyzer_AnalyzeAndRecognizePages(This,ImageDocuments,Layout,ProcessingParams,SynthesisParams,DocumentInfo)	\
    ( (This)->lpVtbl -> AnalyzeAndRecognizePages(This,ImageDocuments,Layout,ProcessingParams,SynthesisParams,DocumentInfo) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDocumentAnalyzer_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_DocumentAnalyzer;

#ifdef __cplusplus

class DECLSPEC_UUID("10002032-0000-1056-976E-008048D53AE3")
DocumentAnalyzer;
#endif

#ifndef __IDocumentInformationDictionaryItem_INTERFACE_DEFINED__
#define __IDocumentInformationDictionaryItem_INTERFACE_DEFINED__

/* interface IDocumentInformationDictionaryItem */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IDocumentInformationDictionaryItem;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001095-0000-1056-976E-008048D53AE3")
    IDocumentInformationDictionaryItem : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Value( 
            /* [in] */ BSTR Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDocumentInformationDictionaryItemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDocumentInformationDictionaryItem * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDocumentInformationDictionaryItem * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDocumentInformationDictionaryItem * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDocumentInformationDictionaryItem * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDocumentInformationDictionaryItem * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDocumentInformationDictionaryItem * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDocumentInformationDictionaryItem * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IDocumentInformationDictionaryItem * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IDocumentInformationDictionaryItem * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IDocumentInformationDictionaryItem * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            IDocumentInformationDictionaryItem * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            IDocumentInformationDictionaryItem * This,
            /* [in] */ BSTR Value);
        
        END_INTERFACE
    } IDocumentInformationDictionaryItemVtbl;

    interface IDocumentInformationDictionaryItem
    {
        CONST_VTBL struct IDocumentInformationDictionaryItemVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDocumentInformationDictionaryItem_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDocumentInformationDictionaryItem_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDocumentInformationDictionaryItem_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDocumentInformationDictionaryItem_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IDocumentInformationDictionaryItem_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IDocumentInformationDictionaryItem_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IDocumentInformationDictionaryItem_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IDocumentInformationDictionaryItem_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IDocumentInformationDictionaryItem_get_Name(This,Result)	\
    ( (This)->lpVtbl -> get_Name(This,Result) ) 

#define IDocumentInformationDictionaryItem_put_Name(This,Value)	\
    ( (This)->lpVtbl -> put_Name(This,Value) ) 

#define IDocumentInformationDictionaryItem_get_Value(This,Result)	\
    ( (This)->lpVtbl -> get_Value(This,Result) ) 

#define IDocumentInformationDictionaryItem_put_Value(This,Value)	\
    ( (This)->lpVtbl -> put_Value(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDocumentInformationDictionaryItem_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_DocumentInformationDictionaryItem;

#ifdef __cplusplus

class DECLSPEC_UUID("1000207f-0000-1056-976E-008048D53AE3")
DocumentInformationDictionaryItem;
#endif

#ifndef __IDocumentInformationDictionary_INTERFACE_DEFINED__
#define __IDocumentInformationDictionary_INTERFACE_DEFINED__

/* interface IDocumentInformationDictionary */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IDocumentInformationDictionary;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000109D-0000-1056-976E-008048D53AE3")
    IDocumentInformationDictionary : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ IDocumentInformationDictionaryItem **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ IDocumentInformationDictionaryItem *Value,
            /* [in] */ long Index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ IDocumentInformationDictionaryItem *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ long Index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveAll( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IDocumentInformationDictionary *From) = 0;
        
        virtual /* [helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Value( 
            /* [in] */ BSTR Name,
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateDocumentInformationDictionaryItem( 
            /* [retval][out] */ IDocumentInformationDictionaryItem **Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDocumentInformationDictionaryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDocumentInformationDictionary * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDocumentInformationDictionary * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDocumentInformationDictionary * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDocumentInformationDictionary * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDocumentInformationDictionary * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDocumentInformationDictionary * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDocumentInformationDictionary * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IDocumentInformationDictionary * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IDocumentInformationDictionary * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IDocumentInformationDictionary * This,
            /* [in] */ long Index,
            /* [retval][out] */ IDocumentInformationDictionaryItem **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            IDocumentInformationDictionary * This,
            /* [in] */ IDocumentInformationDictionaryItem *Value,
            /* [in] */ long Index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IDocumentInformationDictionary * This,
            /* [in] */ IDocumentInformationDictionaryItem *Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IDocumentInformationDictionary * This,
            /* [in] */ long Index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAll )( 
            IDocumentInformationDictionary * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IDocumentInformationDictionary * This,
            /* [in] */ IDocumentInformationDictionary *From);
        
        /* [helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            IDocumentInformationDictionary * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            IDocumentInformationDictionary * This,
            /* [in] */ BSTR Name,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateDocumentInformationDictionaryItem )( 
            IDocumentInformationDictionary * This,
            /* [retval][out] */ IDocumentInformationDictionaryItem **Result);
        
        END_INTERFACE
    } IDocumentInformationDictionaryVtbl;

    interface IDocumentInformationDictionary
    {
        CONST_VTBL struct IDocumentInformationDictionaryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDocumentInformationDictionary_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDocumentInformationDictionary_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDocumentInformationDictionary_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDocumentInformationDictionary_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IDocumentInformationDictionary_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IDocumentInformationDictionary_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IDocumentInformationDictionary_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IDocumentInformationDictionary_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IDocumentInformationDictionary_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define IDocumentInformationDictionary_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#define IDocumentInformationDictionary_Insert(This,Value,Index)	\
    ( (This)->lpVtbl -> Insert(This,Value,Index) ) 

#define IDocumentInformationDictionary_Add(This,Value)	\
    ( (This)->lpVtbl -> Add(This,Value) ) 

#define IDocumentInformationDictionary_Remove(This,Index)	\
    ( (This)->lpVtbl -> Remove(This,Index) ) 

#define IDocumentInformationDictionary_RemoveAll(This)	\
    ( (This)->lpVtbl -> RemoveAll(This) ) 

#define IDocumentInformationDictionary_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#define IDocumentInformationDictionary_get_Value(This,Name,Result)	\
    ( (This)->lpVtbl -> get_Value(This,Name,Result) ) 

#define IDocumentInformationDictionary_put_Value(This,Name,Value)	\
    ( (This)->lpVtbl -> put_Value(This,Name,Value) ) 

#define IDocumentInformationDictionary_CreateDocumentInformationDictionaryItem(This,Result)	\
    ( (This)->lpVtbl -> CreateDocumentInformationDictionaryItem(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDocumentInformationDictionary_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_DocumentInformationDictionary;

#ifdef __cplusplus

class DECLSPEC_UUID("10002087-0000-1056-976E-008048D53AE3")
DocumentInformationDictionary;
#endif

#ifndef __IDocumentContentInfo_INTERFACE_DEFINED__
#define __IDocumentContentInfo_INTERFACE_DEFINED__

/* interface IDocumentContentInfo */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IDocumentContentInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000109E-0000-1056-976E-008048D53AE3")
    IDocumentContentInfo : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DocumentInformationDictionary( 
            /* [retval][out] */ IDocumentInformationDictionary **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DocumentInformationDictionary( 
            /* [in] */ IDocumentInformationDictionary *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Author( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Author( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Keywords( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Keywords( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Subject( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Subject( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Title( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Title( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Creator( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Producer( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Producer( 
            /* [in] */ BSTR Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDocumentContentInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDocumentContentInfo * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDocumentContentInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDocumentContentInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDocumentContentInfo * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDocumentContentInfo * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDocumentContentInfo * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDocumentContentInfo * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IDocumentContentInfo * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DocumentInformationDictionary )( 
            IDocumentContentInfo * This,
            /* [retval][out] */ IDocumentInformationDictionary **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DocumentInformationDictionary )( 
            IDocumentContentInfo * This,
            /* [in] */ IDocumentInformationDictionary *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Author )( 
            IDocumentContentInfo * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Author )( 
            IDocumentContentInfo * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Keywords )( 
            IDocumentContentInfo * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Keywords )( 
            IDocumentContentInfo * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Subject )( 
            IDocumentContentInfo * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Subject )( 
            IDocumentContentInfo * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Title )( 
            IDocumentContentInfo * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Title )( 
            IDocumentContentInfo * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            IDocumentContentInfo * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Creator )( 
            IDocumentContentInfo * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Producer )( 
            IDocumentContentInfo * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Producer )( 
            IDocumentContentInfo * This,
            /* [in] */ BSTR Value);
        
        END_INTERFACE
    } IDocumentContentInfoVtbl;

    interface IDocumentContentInfo
    {
        CONST_VTBL struct IDocumentContentInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDocumentContentInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDocumentContentInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDocumentContentInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDocumentContentInfo_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IDocumentContentInfo_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IDocumentContentInfo_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IDocumentContentInfo_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IDocumentContentInfo_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IDocumentContentInfo_get_DocumentInformationDictionary(This,Result)	\
    ( (This)->lpVtbl -> get_DocumentInformationDictionary(This,Result) ) 

#define IDocumentContentInfo_put_DocumentInformationDictionary(This,Value)	\
    ( (This)->lpVtbl -> put_DocumentInformationDictionary(This,Value) ) 

#define IDocumentContentInfo_get_Author(This,Result)	\
    ( (This)->lpVtbl -> get_Author(This,Result) ) 

#define IDocumentContentInfo_put_Author(This,Value)	\
    ( (This)->lpVtbl -> put_Author(This,Value) ) 

#define IDocumentContentInfo_get_Keywords(This,Result)	\
    ( (This)->lpVtbl -> get_Keywords(This,Result) ) 

#define IDocumentContentInfo_put_Keywords(This,Value)	\
    ( (This)->lpVtbl -> put_Keywords(This,Value) ) 

#define IDocumentContentInfo_get_Subject(This,Result)	\
    ( (This)->lpVtbl -> get_Subject(This,Result) ) 

#define IDocumentContentInfo_put_Subject(This,Value)	\
    ( (This)->lpVtbl -> put_Subject(This,Value) ) 

#define IDocumentContentInfo_get_Title(This,Result)	\
    ( (This)->lpVtbl -> get_Title(This,Result) ) 

#define IDocumentContentInfo_put_Title(This,Value)	\
    ( (This)->lpVtbl -> put_Title(This,Value) ) 

#define IDocumentContentInfo_get_Creator(This,Result)	\
    ( (This)->lpVtbl -> get_Creator(This,Result) ) 

#define IDocumentContentInfo_put_Creator(This,Value)	\
    ( (This)->lpVtbl -> put_Creator(This,Value) ) 

#define IDocumentContentInfo_get_Producer(This,Result)	\
    ( (This)->lpVtbl -> get_Producer(This,Result) ) 

#define IDocumentContentInfo_put_Producer(This,Value)	\
    ( (This)->lpVtbl -> put_Producer(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDocumentContentInfo_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_DocumentContentInfo;

#ifdef __cplusplus

class DECLSPEC_UUID("10002088-0000-1056-976E-008048D53AE3")
DocumentContentInfo;
#endif

#ifndef __IPageStructure_INTERFACE_DEFINED__
#define __IPageStructure_INTERFACE_DEFINED__

/* interface IPageStructure */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IPageStructure;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010A4-0000-1056-976E-008048D53AE3")
    IPageStructure : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Header( 
            /* [retval][out] */ IRunningTitle **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Footer( 
            /* [retval][out] */ IRunningTitle **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateRunningTitle( 
            /* [in] */ VARIANT_BOOL CreateHeader,
            /* [retval][out] */ IRunningTitle **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteRunningTitles( void) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsPageOdd( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsPageOdd( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ArtefactsCount( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Artefact( 
            /* [in] */ long Position,
            /* [retval][out] */ IPageStream **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddArtefact( 
            /* [retval][out] */ IPageStream **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BackgroundLayersCount( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BackgroundLayer( 
            /* [in] */ long Position,
            /* [retval][out] */ IBackgroundLayer **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddBackgroundLayer( 
            /* [retval][out] */ IBackgroundLayer **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveBackgroundLayer( 
            /* [in] */ long Position) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BlackSeparatorsCount( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BlackSeparator( 
            /* [in] */ long Position,
            /* [retval][out] */ IPageBlackSeparator **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddBlackSeparator( 
            /* [retval][out] */ IPageBlackSeparator **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveBlackSeparator( 
            /* [in] */ long Position) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PageRect( 
            /* [retval][out] */ IFRRectangle **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PageRect( 
            /* [in] */ IFRRectangle *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Margins( 
            /* [retval][out] */ IFRRectangle **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Margins( 
            /* [in] */ IFRRectangle *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PageSections( 
            /* [retval][out] */ IPageSections **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LeftMargin( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_LeftMargin( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TopMargin( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TopMargin( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RightMargin( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RightMargin( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BottomMargin( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BottomMargin( 
            /* [in] */ long Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPageStructureVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPageStructure * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPageStructure * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPageStructure * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPageStructure * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPageStructure * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPageStructure * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPageStructure * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPageStructure * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Header )( 
            IPageStructure * This,
            /* [retval][out] */ IRunningTitle **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Footer )( 
            IPageStructure * This,
            /* [retval][out] */ IRunningTitle **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateRunningTitle )( 
            IPageStructure * This,
            /* [in] */ VARIANT_BOOL CreateHeader,
            /* [retval][out] */ IRunningTitle **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteRunningTitles )( 
            IPageStructure * This);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsPageOdd )( 
            IPageStructure * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsPageOdd )( 
            IPageStructure * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ArtefactsCount )( 
            IPageStructure * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Artefact )( 
            IPageStructure * This,
            /* [in] */ long Position,
            /* [retval][out] */ IPageStream **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddArtefact )( 
            IPageStructure * This,
            /* [retval][out] */ IPageStream **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundLayersCount )( 
            IPageStructure * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundLayer )( 
            IPageStructure * This,
            /* [in] */ long Position,
            /* [retval][out] */ IBackgroundLayer **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddBackgroundLayer )( 
            IPageStructure * This,
            /* [retval][out] */ IBackgroundLayer **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveBackgroundLayer )( 
            IPageStructure * This,
            /* [in] */ long Position);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlackSeparatorsCount )( 
            IPageStructure * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlackSeparator )( 
            IPageStructure * This,
            /* [in] */ long Position,
            /* [retval][out] */ IPageBlackSeparator **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddBlackSeparator )( 
            IPageStructure * This,
            /* [retval][out] */ IPageBlackSeparator **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveBlackSeparator )( 
            IPageStructure * This,
            /* [in] */ long Position);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PageRect )( 
            IPageStructure * This,
            /* [retval][out] */ IFRRectangle **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PageRect )( 
            IPageStructure * This,
            /* [in] */ IFRRectangle *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Margins )( 
            IPageStructure * This,
            /* [retval][out] */ IFRRectangle **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Margins )( 
            IPageStructure * This,
            /* [in] */ IFRRectangle *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PageSections )( 
            IPageStructure * This,
            /* [retval][out] */ IPageSections **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftMargin )( 
            IPageStructure * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LeftMargin )( 
            IPageStructure * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TopMargin )( 
            IPageStructure * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TopMargin )( 
            IPageStructure * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightMargin )( 
            IPageStructure * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RightMargin )( 
            IPageStructure * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BottomMargin )( 
            IPageStructure * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BottomMargin )( 
            IPageStructure * This,
            /* [in] */ long Value);
        
        END_INTERFACE
    } IPageStructureVtbl;

    interface IPageStructure
    {
        CONST_VTBL struct IPageStructureVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPageStructure_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPageStructure_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPageStructure_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPageStructure_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPageStructure_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPageStructure_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPageStructure_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPageStructure_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IPageStructure_get_Header(This,Result)	\
    ( (This)->lpVtbl -> get_Header(This,Result) ) 

#define IPageStructure_get_Footer(This,Result)	\
    ( (This)->lpVtbl -> get_Footer(This,Result) ) 

#define IPageStructure_CreateRunningTitle(This,CreateHeader,Result)	\
    ( (This)->lpVtbl -> CreateRunningTitle(This,CreateHeader,Result) ) 

#define IPageStructure_DeleteRunningTitles(This)	\
    ( (This)->lpVtbl -> DeleteRunningTitles(This) ) 

#define IPageStructure_get_IsPageOdd(This,Result)	\
    ( (This)->lpVtbl -> get_IsPageOdd(This,Result) ) 

#define IPageStructure_put_IsPageOdd(This,Value)	\
    ( (This)->lpVtbl -> put_IsPageOdd(This,Value) ) 

#define IPageStructure_get_ArtefactsCount(This,Result)	\
    ( (This)->lpVtbl -> get_ArtefactsCount(This,Result) ) 

#define IPageStructure_get_Artefact(This,Position,Result)	\
    ( (This)->lpVtbl -> get_Artefact(This,Position,Result) ) 

#define IPageStructure_AddArtefact(This,Result)	\
    ( (This)->lpVtbl -> AddArtefact(This,Result) ) 

#define IPageStructure_get_BackgroundLayersCount(This,Result)	\
    ( (This)->lpVtbl -> get_BackgroundLayersCount(This,Result) ) 

#define IPageStructure_get_BackgroundLayer(This,Position,Result)	\
    ( (This)->lpVtbl -> get_BackgroundLayer(This,Position,Result) ) 

#define IPageStructure_AddBackgroundLayer(This,Result)	\
    ( (This)->lpVtbl -> AddBackgroundLayer(This,Result) ) 

#define IPageStructure_RemoveBackgroundLayer(This,Position)	\
    ( (This)->lpVtbl -> RemoveBackgroundLayer(This,Position) ) 

#define IPageStructure_get_BlackSeparatorsCount(This,Result)	\
    ( (This)->lpVtbl -> get_BlackSeparatorsCount(This,Result) ) 

#define IPageStructure_get_BlackSeparator(This,Position,Result)	\
    ( (This)->lpVtbl -> get_BlackSeparator(This,Position,Result) ) 

#define IPageStructure_AddBlackSeparator(This,Result)	\
    ( (This)->lpVtbl -> AddBlackSeparator(This,Result) ) 

#define IPageStructure_RemoveBlackSeparator(This,Position)	\
    ( (This)->lpVtbl -> RemoveBlackSeparator(This,Position) ) 

#define IPageStructure_get_PageRect(This,Result)	\
    ( (This)->lpVtbl -> get_PageRect(This,Result) ) 

#define IPageStructure_put_PageRect(This,Result)	\
    ( (This)->lpVtbl -> put_PageRect(This,Result) ) 

#define IPageStructure_get_Margins(This,Result)	\
    ( (This)->lpVtbl -> get_Margins(This,Result) ) 

#define IPageStructure_put_Margins(This,Result)	\
    ( (This)->lpVtbl -> put_Margins(This,Result) ) 

#define IPageStructure_get_PageSections(This,Result)	\
    ( (This)->lpVtbl -> get_PageSections(This,Result) ) 

#define IPageStructure_get_LeftMargin(This,Result)	\
    ( (This)->lpVtbl -> get_LeftMargin(This,Result) ) 

#define IPageStructure_put_LeftMargin(This,Value)	\
    ( (This)->lpVtbl -> put_LeftMargin(This,Value) ) 

#define IPageStructure_get_TopMargin(This,Result)	\
    ( (This)->lpVtbl -> get_TopMargin(This,Result) ) 

#define IPageStructure_put_TopMargin(This,Value)	\
    ( (This)->lpVtbl -> put_TopMargin(This,Value) ) 

#define IPageStructure_get_RightMargin(This,Result)	\
    ( (This)->lpVtbl -> get_RightMargin(This,Result) ) 

#define IPageStructure_put_RightMargin(This,Value)	\
    ( (This)->lpVtbl -> put_RightMargin(This,Value) ) 

#define IPageStructure_get_BottomMargin(This,Result)	\
    ( (This)->lpVtbl -> get_BottomMargin(This,Result) ) 

#define IPageStructure_put_BottomMargin(This,Value)	\
    ( (This)->lpVtbl -> put_BottomMargin(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPageStructure_INTERFACE_DEFINED__ */


#ifndef __IRunningTitle_INTERFACE_DEFINED__
#define __IRunningTitle_INTERFACE_DEFINED__

/* interface IRunningTitle */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IRunningTitle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010A5-0000-1056-976E-008048D53AE3")
    IRunningTitle : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ IText **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsHeader( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RunningTitleSeries( 
            /* [retval][out] */ IRunningTitleSeries **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Rect( 
            /* [retval][out] */ IFRRectangle **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Rect( 
            /* [in] */ IFRRectangle *Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRunningTitleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRunningTitle * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRunningTitle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRunningTitle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRunningTitle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRunningTitle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRunningTitle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRunningTitle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IRunningTitle * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            IRunningTitle * This,
            /* [retval][out] */ IText **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsHeader )( 
            IRunningTitle * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RunningTitleSeries )( 
            IRunningTitle * This,
            /* [retval][out] */ IRunningTitleSeries **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Rect )( 
            IRunningTitle * This,
            /* [retval][out] */ IFRRectangle **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Rect )( 
            IRunningTitle * This,
            /* [in] */ IFRRectangle *Value);
        
        END_INTERFACE
    } IRunningTitleVtbl;

    interface IRunningTitle
    {
        CONST_VTBL struct IRunningTitleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRunningTitle_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRunningTitle_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRunningTitle_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRunningTitle_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRunningTitle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRunningTitle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRunningTitle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRunningTitle_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IRunningTitle_get_Text(This,Result)	\
    ( (This)->lpVtbl -> get_Text(This,Result) ) 

#define IRunningTitle_get_IsHeader(This,Result)	\
    ( (This)->lpVtbl -> get_IsHeader(This,Result) ) 

#define IRunningTitle_get_RunningTitleSeries(This,Result)	\
    ( (This)->lpVtbl -> get_RunningTitleSeries(This,Result) ) 

#define IRunningTitle_get_Rect(This,Result)	\
    ( (This)->lpVtbl -> get_Rect(This,Result) ) 

#define IRunningTitle_put_Rect(This,Value)	\
    ( (This)->lpVtbl -> put_Rect(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRunningTitle_INTERFACE_DEFINED__ */


#ifndef __IRunningTitleSeries_INTERFACE_DEFINED__
#define __IRunningTitleSeries_INTERFACE_DEFINED__

/* interface IRunningTitleSeries */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IRunningTitleSeries;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010A8-0000-1056-976E-008048D53AE3")
    IRunningTitleSeries : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RunningTitleSeriesArray( 
            /* [retval][out] */ IRunningTitleSeriesArray **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsEqualOddAndEven( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RunningTitle( 
            /* [in] */ VARIANT_BOOL isHeader,
            /* [in] */ VARIANT_BOOL isOdd,
            /* [retval][out] */ IRunningTitleSeriesText **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateHeader( 
            /* [retval][out] */ IRunningTitleSeriesText **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateHeaderOnOdd( 
            /* [retval][out] */ IRunningTitleSeriesText **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HeaderOnOdd( 
            /* [retval][out] */ IRunningTitleSeriesText **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateHeaderOnEven( 
            /* [retval][out] */ IRunningTitleSeriesText **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HeaderOnEven( 
            /* [retval][out] */ IRunningTitleSeriesText **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateFooter( 
            /* [retval][out] */ IRunningTitleSeriesText **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateFooterOnOdd( 
            /* [retval][out] */ IRunningTitleSeriesText **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FooterOnOdd( 
            /* [retval][out] */ IRunningTitleSeriesText **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateFooterOnEven( 
            /* [retval][out] */ IRunningTitleSeriesText **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FooterOnEven( 
            /* [retval][out] */ IRunningTitleSeriesText **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PagesCount( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Page( 
            /* [in] */ long PageIndex,
            /* [retval][out] */ IFRPage **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddPage( 
            /* [in] */ IFRPage *Page) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeletePage( 
            /* [in] */ IFRPage *Page) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRunningTitleSeriesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRunningTitleSeries * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRunningTitleSeries * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRunningTitleSeries * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRunningTitleSeries * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRunningTitleSeries * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRunningTitleSeries * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRunningTitleSeries * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IRunningTitleSeries * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RunningTitleSeriesArray )( 
            IRunningTitleSeries * This,
            /* [retval][out] */ IRunningTitleSeriesArray **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsEqualOddAndEven )( 
            IRunningTitleSeries * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RunningTitle )( 
            IRunningTitleSeries * This,
            /* [in] */ VARIANT_BOOL isHeader,
            /* [in] */ VARIANT_BOOL isOdd,
            /* [retval][out] */ IRunningTitleSeriesText **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateHeader )( 
            IRunningTitleSeries * This,
            /* [retval][out] */ IRunningTitleSeriesText **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateHeaderOnOdd )( 
            IRunningTitleSeries * This,
            /* [retval][out] */ IRunningTitleSeriesText **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeaderOnOdd )( 
            IRunningTitleSeries * This,
            /* [retval][out] */ IRunningTitleSeriesText **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateHeaderOnEven )( 
            IRunningTitleSeries * This,
            /* [retval][out] */ IRunningTitleSeriesText **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeaderOnEven )( 
            IRunningTitleSeries * This,
            /* [retval][out] */ IRunningTitleSeriesText **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateFooter )( 
            IRunningTitleSeries * This,
            /* [retval][out] */ IRunningTitleSeriesText **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateFooterOnOdd )( 
            IRunningTitleSeries * This,
            /* [retval][out] */ IRunningTitleSeriesText **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FooterOnOdd )( 
            IRunningTitleSeries * This,
            /* [retval][out] */ IRunningTitleSeriesText **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateFooterOnEven )( 
            IRunningTitleSeries * This,
            /* [retval][out] */ IRunningTitleSeriesText **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FooterOnEven )( 
            IRunningTitleSeries * This,
            /* [retval][out] */ IRunningTitleSeriesText **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PagesCount )( 
            IRunningTitleSeries * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Page )( 
            IRunningTitleSeries * This,
            /* [in] */ long PageIndex,
            /* [retval][out] */ IFRPage **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddPage )( 
            IRunningTitleSeries * This,
            /* [in] */ IFRPage *Page);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeletePage )( 
            IRunningTitleSeries * This,
            /* [in] */ IFRPage *Page);
        
        END_INTERFACE
    } IRunningTitleSeriesVtbl;

    interface IRunningTitleSeries
    {
        CONST_VTBL struct IRunningTitleSeriesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRunningTitleSeries_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRunningTitleSeries_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRunningTitleSeries_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRunningTitleSeries_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRunningTitleSeries_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRunningTitleSeries_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRunningTitleSeries_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRunningTitleSeries_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IRunningTitleSeries_get_RunningTitleSeriesArray(This,Result)	\
    ( (This)->lpVtbl -> get_RunningTitleSeriesArray(This,Result) ) 

#define IRunningTitleSeries_get_IsEqualOddAndEven(This,Result)	\
    ( (This)->lpVtbl -> get_IsEqualOddAndEven(This,Result) ) 

#define IRunningTitleSeries_get_RunningTitle(This,isHeader,isOdd,Result)	\
    ( (This)->lpVtbl -> get_RunningTitle(This,isHeader,isOdd,Result) ) 

#define IRunningTitleSeries_CreateHeader(This,Result)	\
    ( (This)->lpVtbl -> CreateHeader(This,Result) ) 

#define IRunningTitleSeries_CreateHeaderOnOdd(This,Result)	\
    ( (This)->lpVtbl -> CreateHeaderOnOdd(This,Result) ) 

#define IRunningTitleSeries_get_HeaderOnOdd(This,Result)	\
    ( (This)->lpVtbl -> get_HeaderOnOdd(This,Result) ) 

#define IRunningTitleSeries_CreateHeaderOnEven(This,Result)	\
    ( (This)->lpVtbl -> CreateHeaderOnEven(This,Result) ) 

#define IRunningTitleSeries_get_HeaderOnEven(This,Result)	\
    ( (This)->lpVtbl -> get_HeaderOnEven(This,Result) ) 

#define IRunningTitleSeries_CreateFooter(This,Result)	\
    ( (This)->lpVtbl -> CreateFooter(This,Result) ) 

#define IRunningTitleSeries_CreateFooterOnOdd(This,Result)	\
    ( (This)->lpVtbl -> CreateFooterOnOdd(This,Result) ) 

#define IRunningTitleSeries_get_FooterOnOdd(This,Result)	\
    ( (This)->lpVtbl -> get_FooterOnOdd(This,Result) ) 

#define IRunningTitleSeries_CreateFooterOnEven(This,Result)	\
    ( (This)->lpVtbl -> CreateFooterOnEven(This,Result) ) 

#define IRunningTitleSeries_get_FooterOnEven(This,Result)	\
    ( (This)->lpVtbl -> get_FooterOnEven(This,Result) ) 

#define IRunningTitleSeries_get_PagesCount(This,Result)	\
    ( (This)->lpVtbl -> get_PagesCount(This,Result) ) 

#define IRunningTitleSeries_get_Page(This,PageIndex,Result)	\
    ( (This)->lpVtbl -> get_Page(This,PageIndex,Result) ) 

#define IRunningTitleSeries_AddPage(This,Page)	\
    ( (This)->lpVtbl -> AddPage(This,Page) ) 

#define IRunningTitleSeries_DeletePage(This,Page)	\
    ( (This)->lpVtbl -> DeletePage(This,Page) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRunningTitleSeries_INTERFACE_DEFINED__ */


#ifndef __IPageStream_INTERFACE_DEFINED__
#define __IPageStream_INTERFACE_DEFINED__

/* interface IPageStream */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IPageStream;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010A6-0000-1056-976E-008048D53AE3")
    IPageStream : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ StreamTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PageSection( 
            /* [retval][out] */ IPageSection **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PageStructure( 
            /* [retval][out] */ IPageStructure **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TextOrientation( 
            /* [retval][out] */ ITextOrientation **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TextOrientation( 
            /* [in] */ ITextOrientation *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetAsMainText( 
            /* [retval][out] */ IMainText **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetAsIncut( 
            /* [retval][out] */ IIncut **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetAsArtefact( 
            /* [retval][out] */ IArtefact **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetAsFootnote( 
            /* [retval][out] */ IFootnote **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Page( 
            /* [retval][out] */ IFRPage **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PageElements( 
            /* [retval][out] */ IPageElements **Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPageStreamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPageStream * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPageStream * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPageStream * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPageStream * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPageStream * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPageStream * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPageStream * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPageStream * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IPageStream * This,
            /* [retval][out] */ StreamTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PageSection )( 
            IPageStream * This,
            /* [retval][out] */ IPageSection **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PageStructure )( 
            IPageStream * This,
            /* [retval][out] */ IPageStructure **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TextOrientation )( 
            IPageStream * This,
            /* [retval][out] */ ITextOrientation **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TextOrientation )( 
            IPageStream * This,
            /* [in] */ ITextOrientation *Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsMainText )( 
            IPageStream * This,
            /* [retval][out] */ IMainText **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsIncut )( 
            IPageStream * This,
            /* [retval][out] */ IIncut **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsArtefact )( 
            IPageStream * This,
            /* [retval][out] */ IArtefact **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsFootnote )( 
            IPageStream * This,
            /* [retval][out] */ IFootnote **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Page )( 
            IPageStream * This,
            /* [retval][out] */ IFRPage **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PageElements )( 
            IPageStream * This,
            /* [retval][out] */ IPageElements **Result);
        
        END_INTERFACE
    } IPageStreamVtbl;

    interface IPageStream
    {
        CONST_VTBL struct IPageStreamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPageStream_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPageStream_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPageStream_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPageStream_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPageStream_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPageStream_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPageStream_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPageStream_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IPageStream_get_Type(This,Result)	\
    ( (This)->lpVtbl -> get_Type(This,Result) ) 

#define IPageStream_get_PageSection(This,Result)	\
    ( (This)->lpVtbl -> get_PageSection(This,Result) ) 

#define IPageStream_get_PageStructure(This,Result)	\
    ( (This)->lpVtbl -> get_PageStructure(This,Result) ) 

#define IPageStream_get_TextOrientation(This,Result)	\
    ( (This)->lpVtbl -> get_TextOrientation(This,Result) ) 

#define IPageStream_put_TextOrientation(This,Value)	\
    ( (This)->lpVtbl -> put_TextOrientation(This,Value) ) 

#define IPageStream_GetAsMainText(This,Result)	\
    ( (This)->lpVtbl -> GetAsMainText(This,Result) ) 

#define IPageStream_GetAsIncut(This,Result)	\
    ( (This)->lpVtbl -> GetAsIncut(This,Result) ) 

#define IPageStream_GetAsArtefact(This,Result)	\
    ( (This)->lpVtbl -> GetAsArtefact(This,Result) ) 

#define IPageStream_GetAsFootnote(This,Result)	\
    ( (This)->lpVtbl -> GetAsFootnote(This,Result) ) 

#define IPageStream_get_Page(This,Result)	\
    ( (This)->lpVtbl -> get_Page(This,Result) ) 

#define IPageStream_get_PageElements(This,Result)	\
    ( (This)->lpVtbl -> get_PageElements(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPageStream_INTERFACE_DEFINED__ */


#ifndef __IPageSection_INTERFACE_DEFINED__
#define __IPageSection_INTERFACE_DEFINED__

/* interface IPageSection */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IPageSection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010A7-0000-1056-976E-008048D53AE3")
    IPageSection : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PageStructure( 
            /* [retval][out] */ IPageStructure **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsFirstOnPage( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsLastOnPage( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MainStream( 
            /* [retval][out] */ IPageStream **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateMainStream( 
            /* [retval][out] */ IPageStream **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveMainStream( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddIncut( 
            /* [retval][out] */ IPageStream **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFootnote( 
            /* [retval][out] */ IPageStream **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PageStreams( 
            /* [retval][out] */ IPageStreams **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Page( 
            /* [retval][out] */ IFRPage **Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPageSectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPageSection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPageSection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPageSection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPageSection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPageSection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPageSection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPageSection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPageSection * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PageStructure )( 
            IPageSection * This,
            /* [retval][out] */ IPageStructure **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsFirstOnPage )( 
            IPageSection * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsLastOnPage )( 
            IPageSection * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MainStream )( 
            IPageSection * This,
            /* [retval][out] */ IPageStream **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateMainStream )( 
            IPageSection * This,
            /* [retval][out] */ IPageStream **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveMainStream )( 
            IPageSection * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddIncut )( 
            IPageSection * This,
            /* [retval][out] */ IPageStream **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFootnote )( 
            IPageSection * This,
            /* [retval][out] */ IPageStream **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PageStreams )( 
            IPageSection * This,
            /* [retval][out] */ IPageStreams **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Page )( 
            IPageSection * This,
            /* [retval][out] */ IFRPage **Result);
        
        END_INTERFACE
    } IPageSectionVtbl;

    interface IPageSection
    {
        CONST_VTBL struct IPageSectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPageSection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPageSection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPageSection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPageSection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPageSection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPageSection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPageSection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPageSection_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IPageSection_get_PageStructure(This,Result)	\
    ( (This)->lpVtbl -> get_PageStructure(This,Result) ) 

#define IPageSection_get_IsFirstOnPage(This,Result)	\
    ( (This)->lpVtbl -> get_IsFirstOnPage(This,Result) ) 

#define IPageSection_get_IsLastOnPage(This,Result)	\
    ( (This)->lpVtbl -> get_IsLastOnPage(This,Result) ) 

#define IPageSection_get_MainStream(This,Result)	\
    ( (This)->lpVtbl -> get_MainStream(This,Result) ) 

#define IPageSection_CreateMainStream(This,Result)	\
    ( (This)->lpVtbl -> CreateMainStream(This,Result) ) 

#define IPageSection_RemoveMainStream(This)	\
    ( (This)->lpVtbl -> RemoveMainStream(This) ) 

#define IPageSection_AddIncut(This,Result)	\
    ( (This)->lpVtbl -> AddIncut(This,Result) ) 

#define IPageSection_AddFootnote(This,Result)	\
    ( (This)->lpVtbl -> AddFootnote(This,Result) ) 

#define IPageSection_get_PageStreams(This,Result)	\
    ( (This)->lpVtbl -> get_PageStreams(This,Result) ) 

#define IPageSection_get_Page(This,Result)	\
    ( (This)->lpVtbl -> get_Page(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPageSection_INTERFACE_DEFINED__ */


#ifndef __IIncut_INTERFACE_DEFINED__
#define __IIncut_INTERFACE_DEFINED__

/* interface IIncut */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IIncut;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010AA-0000-1056-976E-008048D53AE3")
    IIncut : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Region( 
            /* [retval][out] */ IRegion **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_VerticalOffset( 
            /* [in] */ FrameVerticalReferenceEnum Type,
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HorizontalOffset( 
            /* [in] */ FrameHorizontalReferenceEnum Type,
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetVerticalOffsetFromParagraph( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetVerticalOffsetFromSectionTop( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TextWrapping( 
            /* [retval][out] */ TextWrappingEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TextWrapping( 
            /* [in] */ TextWrappingEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Borders( 
            /* [retval][out] */ long *flags) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Borders( 
            /* [in] */ long flags) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BackgroundColor( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BackgroundColor( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LeftMargin( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_LeftMargin( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RightMargin( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RightMargin( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TopMargin( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TopMargin( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BottomMargin( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BottomMargin( 
            /* [in] */ long Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IIncutVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IIncut * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IIncut * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IIncut * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IIncut * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IIncut * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IIncut * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IIncut * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IIncut * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Region )( 
            IIncut * This,
            /* [retval][out] */ IRegion **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalOffset )( 
            IIncut * This,
            /* [in] */ FrameVerticalReferenceEnum Type,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalOffset )( 
            IIncut * This,
            /* [in] */ FrameHorizontalReferenceEnum Type,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetVerticalOffsetFromParagraph )( 
            IIncut * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetVerticalOffsetFromSectionTop )( 
            IIncut * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TextWrapping )( 
            IIncut * This,
            /* [retval][out] */ TextWrappingEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TextWrapping )( 
            IIncut * This,
            /* [in] */ TextWrappingEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Borders )( 
            IIncut * This,
            /* [retval][out] */ long *flags);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Borders )( 
            IIncut * This,
            /* [in] */ long flags);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundColor )( 
            IIncut * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundColor )( 
            IIncut * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftMargin )( 
            IIncut * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LeftMargin )( 
            IIncut * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightMargin )( 
            IIncut * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RightMargin )( 
            IIncut * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TopMargin )( 
            IIncut * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TopMargin )( 
            IIncut * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BottomMargin )( 
            IIncut * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BottomMargin )( 
            IIncut * This,
            /* [in] */ long Value);
        
        END_INTERFACE
    } IIncutVtbl;

    interface IIncut
    {
        CONST_VTBL struct IIncutVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IIncut_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IIncut_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IIncut_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IIncut_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IIncut_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IIncut_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IIncut_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IIncut_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IIncut_get_Region(This,Result)	\
    ( (This)->lpVtbl -> get_Region(This,Result) ) 

#define IIncut_get_VerticalOffset(This,Type,Result)	\
    ( (This)->lpVtbl -> get_VerticalOffset(This,Type,Result) ) 

#define IIncut_get_HorizontalOffset(This,Type,Result)	\
    ( (This)->lpVtbl -> get_HorizontalOffset(This,Type,Result) ) 

#define IIncut_SetVerticalOffsetFromParagraph(This,Value)	\
    ( (This)->lpVtbl -> SetVerticalOffsetFromParagraph(This,Value) ) 

#define IIncut_SetVerticalOffsetFromSectionTop(This,Value)	\
    ( (This)->lpVtbl -> SetVerticalOffsetFromSectionTop(This,Value) ) 

#define IIncut_get_TextWrapping(This,Result)	\
    ( (This)->lpVtbl -> get_TextWrapping(This,Result) ) 

#define IIncut_put_TextWrapping(This,Value)	\
    ( (This)->lpVtbl -> put_TextWrapping(This,Value) ) 

#define IIncut_get_Borders(This,flags)	\
    ( (This)->lpVtbl -> get_Borders(This,flags) ) 

#define IIncut_put_Borders(This,flags)	\
    ( (This)->lpVtbl -> put_Borders(This,flags) ) 

#define IIncut_get_BackgroundColor(This,Result)	\
    ( (This)->lpVtbl -> get_BackgroundColor(This,Result) ) 

#define IIncut_put_BackgroundColor(This,Value)	\
    ( (This)->lpVtbl -> put_BackgroundColor(This,Value) ) 

#define IIncut_get_LeftMargin(This,Result)	\
    ( (This)->lpVtbl -> get_LeftMargin(This,Result) ) 

#define IIncut_put_LeftMargin(This,Value)	\
    ( (This)->lpVtbl -> put_LeftMargin(This,Value) ) 

#define IIncut_get_RightMargin(This,Result)	\
    ( (This)->lpVtbl -> get_RightMargin(This,Result) ) 

#define IIncut_put_RightMargin(This,Value)	\
    ( (This)->lpVtbl -> put_RightMargin(This,Value) ) 

#define IIncut_get_TopMargin(This,Result)	\
    ( (This)->lpVtbl -> get_TopMargin(This,Result) ) 

#define IIncut_put_TopMargin(This,Value)	\
    ( (This)->lpVtbl -> put_TopMargin(This,Value) ) 

#define IIncut_get_BottomMargin(This,Result)	\
    ( (This)->lpVtbl -> get_BottomMargin(This,Result) ) 

#define IIncut_put_BottomMargin(This,Value)	\
    ( (This)->lpVtbl -> put_BottomMargin(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IIncut_INTERFACE_DEFINED__ */


#ifndef __IFootnote_INTERFACE_DEFINED__
#define __IFootnote_INTERFACE_DEFINED__

/* interface IFootnote */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IFootnote;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010AB-0000-1056-976E-008048D53AE3")
    IFootnote : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Number( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Number( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Series( 
            /* [retval][out] */ IFootnoteSeries **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Series( 
            /* [in] */ IFootnoteSeries *series) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LeftBound( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_LeftBound( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RightBound( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RightBound( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HasTail( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_HasTail( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HasHead( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_HasHead( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFootnoteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IFootnote * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IFootnote * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IFootnote * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IFootnote * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IFootnote * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IFootnote * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IFootnote * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IFootnote * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Number )( 
            IFootnote * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Number )( 
            IFootnote * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Series )( 
            IFootnote * This,
            /* [retval][out] */ IFootnoteSeries **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Series )( 
            IFootnote * This,
            /* [in] */ IFootnoteSeries *series);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftBound )( 
            IFootnote * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LeftBound )( 
            IFootnote * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightBound )( 
            IFootnote * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RightBound )( 
            IFootnote * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasTail )( 
            IFootnote * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HasTail )( 
            IFootnote * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasHead )( 
            IFootnote * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HasHead )( 
            IFootnote * This,
            /* [in] */ VARIANT_BOOL Value);
        
        END_INTERFACE
    } IFootnoteVtbl;

    interface IFootnote
    {
        CONST_VTBL struct IFootnoteVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFootnote_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IFootnote_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IFootnote_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IFootnote_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IFootnote_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IFootnote_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IFootnote_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IFootnote_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IFootnote_get_Number(This,Result)	\
    ( (This)->lpVtbl -> get_Number(This,Result) ) 

#define IFootnote_put_Number(This,Value)	\
    ( (This)->lpVtbl -> put_Number(This,Value) ) 

#define IFootnote_get_Series(This,Result)	\
    ( (This)->lpVtbl -> get_Series(This,Result) ) 

#define IFootnote_put_Series(This,series)	\
    ( (This)->lpVtbl -> put_Series(This,series) ) 

#define IFootnote_get_LeftBound(This,Result)	\
    ( (This)->lpVtbl -> get_LeftBound(This,Result) ) 

#define IFootnote_put_LeftBound(This,Value)	\
    ( (This)->lpVtbl -> put_LeftBound(This,Value) ) 

#define IFootnote_get_RightBound(This,Result)	\
    ( (This)->lpVtbl -> get_RightBound(This,Result) ) 

#define IFootnote_put_RightBound(This,Value)	\
    ( (This)->lpVtbl -> put_RightBound(This,Value) ) 

#define IFootnote_get_HasTail(This,Result)	\
    ( (This)->lpVtbl -> get_HasTail(This,Result) ) 

#define IFootnote_put_HasTail(This,Value)	\
    ( (This)->lpVtbl -> put_HasTail(This,Value) ) 

#define IFootnote_get_HasHead(This,Result)	\
    ( (This)->lpVtbl -> get_HasHead(This,Result) ) 

#define IFootnote_put_HasHead(This,Value)	\
    ( (This)->lpVtbl -> put_HasHead(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IFootnote_INTERFACE_DEFINED__ */


#ifndef __IMainText_INTERFACE_DEFINED__
#define __IMainText_INTERFACE_DEFINED__

/* interface IMainText */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IMainText;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010AC-0000-1056-976E-008048D53AE3")
    IMainText : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsRightToLeft( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsRightToLeft( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HasSeparatorsBetweenColumns( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_HasSeparatorsBetweenColumns( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HasSeparatorBefore( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_HasSeparatorBefore( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ColumnsCount( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LeftColumnBound( 
            /* [in] */ long Index,
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_LeftColumnBound( 
            /* [in] */ long Index,
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RightColumnBound( 
            /* [in] */ long Index,
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RightColumnBound( 
            /* [in] */ long Index,
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddColumn( 
            /* [in] */ long Left,
            /* [in] */ long Right) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveColumn( 
            /* [in] */ long Index) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WhiteGapBefore( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WhiteGapBefore( 
            /* [in] */ long Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMainTextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMainText * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMainText * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMainText * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMainText * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMainText * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMainText * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMainText * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IMainText * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsRightToLeft )( 
            IMainText * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsRightToLeft )( 
            IMainText * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasSeparatorsBetweenColumns )( 
            IMainText * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HasSeparatorsBetweenColumns )( 
            IMainText * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasSeparatorBefore )( 
            IMainText * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HasSeparatorBefore )( 
            IMainText * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColumnsCount )( 
            IMainText * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftColumnBound )( 
            IMainText * This,
            /* [in] */ long Index,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LeftColumnBound )( 
            IMainText * This,
            /* [in] */ long Index,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightColumnBound )( 
            IMainText * This,
            /* [in] */ long Index,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RightColumnBound )( 
            IMainText * This,
            /* [in] */ long Index,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddColumn )( 
            IMainText * This,
            /* [in] */ long Left,
            /* [in] */ long Right);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveColumn )( 
            IMainText * This,
            /* [in] */ long Index);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WhiteGapBefore )( 
            IMainText * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WhiteGapBefore )( 
            IMainText * This,
            /* [in] */ long Value);
        
        END_INTERFACE
    } IMainTextVtbl;

    interface IMainText
    {
        CONST_VTBL struct IMainTextVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMainText_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMainText_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMainText_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMainText_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMainText_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMainText_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMainText_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMainText_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IMainText_get_IsRightToLeft(This,Result)	\
    ( (This)->lpVtbl -> get_IsRightToLeft(This,Result) ) 

#define IMainText_put_IsRightToLeft(This,Value)	\
    ( (This)->lpVtbl -> put_IsRightToLeft(This,Value) ) 

#define IMainText_get_HasSeparatorsBetweenColumns(This,Result)	\
    ( (This)->lpVtbl -> get_HasSeparatorsBetweenColumns(This,Result) ) 

#define IMainText_put_HasSeparatorsBetweenColumns(This,Value)	\
    ( (This)->lpVtbl -> put_HasSeparatorsBetweenColumns(This,Value) ) 

#define IMainText_get_HasSeparatorBefore(This,Result)	\
    ( (This)->lpVtbl -> get_HasSeparatorBefore(This,Result) ) 

#define IMainText_put_HasSeparatorBefore(This,Value)	\
    ( (This)->lpVtbl -> put_HasSeparatorBefore(This,Value) ) 

#define IMainText_get_ColumnsCount(This,Result)	\
    ( (This)->lpVtbl -> get_ColumnsCount(This,Result) ) 

#define IMainText_get_LeftColumnBound(This,Index,Result)	\
    ( (This)->lpVtbl -> get_LeftColumnBound(This,Index,Result) ) 

#define IMainText_put_LeftColumnBound(This,Index,Value)	\
    ( (This)->lpVtbl -> put_LeftColumnBound(This,Index,Value) ) 

#define IMainText_get_RightColumnBound(This,Index,Result)	\
    ( (This)->lpVtbl -> get_RightColumnBound(This,Index,Result) ) 

#define IMainText_put_RightColumnBound(This,Index,Value)	\
    ( (This)->lpVtbl -> put_RightColumnBound(This,Index,Value) ) 

#define IMainText_AddColumn(This,Left,Right)	\
    ( (This)->lpVtbl -> AddColumn(This,Left,Right) ) 

#define IMainText_RemoveColumn(This,Index)	\
    ( (This)->lpVtbl -> RemoveColumn(This,Index) ) 

#define IMainText_get_WhiteGapBefore(This,Result)	\
    ( (This)->lpVtbl -> get_WhiteGapBefore(This,Result) ) 

#define IMainText_put_WhiteGapBefore(This,Value)	\
    ( (This)->lpVtbl -> put_WhiteGapBefore(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMainText_INTERFACE_DEFINED__ */


#ifndef __IArtefact_INTERFACE_DEFINED__
#define __IArtefact_INTERFACE_DEFINED__

/* interface IArtefact */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IArtefact;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010AD-0000-1056-976E-008048D53AE3")
    IArtefact : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Region( 
            /* [retval][out] */ IRegion **Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IArtefactVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IArtefact * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IArtefact * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IArtefact * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IArtefact * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IArtefact * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IArtefact * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IArtefact * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IArtefact * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Region )( 
            IArtefact * This,
            /* [retval][out] */ IRegion **Result);
        
        END_INTERFACE
    } IArtefactVtbl;

    interface IArtefact
    {
        CONST_VTBL struct IArtefactVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IArtefact_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IArtefact_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IArtefact_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IArtefact_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IArtefact_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IArtefact_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IArtefact_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IArtefact_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IArtefact_get_Region(This,Result)	\
    ( (This)->lpVtbl -> get_Region(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IArtefact_INTERFACE_DEFINED__ */


#ifndef __IRunningTitleSeriesArray_INTERFACE_DEFINED__
#define __IRunningTitleSeriesArray_INTERFACE_DEFINED__

/* interface IRunningTitleSeriesArray */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IRunningTitleSeriesArray;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010AE-0000-1056-976E-008048D53AE3")
    IRunningTitleSeriesArray : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ IRunningTitleSeries **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ IRunningTitleSeries **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateRunningTitlesSeries( 
            /* [retval][out] */ IRunningTitleSeries **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteAll( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteEmptySeries( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRunningTitleSeriesArrayVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRunningTitleSeriesArray * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRunningTitleSeriesArray * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRunningTitleSeriesArray * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRunningTitleSeriesArray * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRunningTitleSeriesArray * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRunningTitleSeriesArray * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRunningTitleSeriesArray * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            IRunningTitleSeriesArray * This,
            /* [in] */ long Index,
            /* [retval][out] */ IRunningTitleSeries **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IRunningTitleSeriesArray * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IRunningTitleSeriesArray * This,
            /* [in] */ long Index,
            /* [retval][out] */ IRunningTitleSeries **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IRunningTitleSeriesArray * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateRunningTitlesSeries )( 
            IRunningTitleSeriesArray * This,
            /* [retval][out] */ IRunningTitleSeries **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteAll )( 
            IRunningTitleSeriesArray * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteEmptySeries )( 
            IRunningTitleSeriesArray * This);
        
        END_INTERFACE
    } IRunningTitleSeriesArrayVtbl;

    interface IRunningTitleSeriesArray
    {
        CONST_VTBL struct IRunningTitleSeriesArrayVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRunningTitleSeriesArray_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRunningTitleSeriesArray_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRunningTitleSeriesArray_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRunningTitleSeriesArray_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRunningTitleSeriesArray_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRunningTitleSeriesArray_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRunningTitleSeriesArray_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRunningTitleSeriesArray_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define IRunningTitleSeriesArray_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IRunningTitleSeriesArray_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#define IRunningTitleSeriesArray_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define IRunningTitleSeriesArray_CreateRunningTitlesSeries(This,Result)	\
    ( (This)->lpVtbl -> CreateRunningTitlesSeries(This,Result) ) 

#define IRunningTitleSeriesArray_DeleteAll(This)	\
    ( (This)->lpVtbl -> DeleteAll(This) ) 

#define IRunningTitleSeriesArray_DeleteEmptySeries(This)	\
    ( (This)->lpVtbl -> DeleteEmptySeries(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRunningTitleSeriesArray_INTERFACE_DEFINED__ */


#ifndef __IPageElements_INTERFACE_DEFINED__
#define __IPageElements_INTERFACE_DEFINED__

/* interface IPageElements */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IPageElements;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010B3-0000-1056-976E-008048D53AE3")
    IPageElements : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ IPageElement **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ IPageElement **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPageElementsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPageElements * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPageElements * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPageElements * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPageElements * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPageElements * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPageElements * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPageElements * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            IPageElements * This,
            /* [in] */ long Index,
            /* [retval][out] */ IPageElement **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPageElements * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IPageElements * This,
            /* [in] */ long Index,
            /* [retval][out] */ IPageElement **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IPageElements * This,
            /* [retval][out] */ long *Result);
        
        END_INTERFACE
    } IPageElementsVtbl;

    interface IPageElements
    {
        CONST_VTBL struct IPageElementsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPageElements_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPageElements_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPageElements_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPageElements_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPageElements_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPageElements_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPageElements_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPageElements_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define IPageElements_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IPageElements_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#define IPageElements_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPageElements_INTERFACE_DEFINED__ */


#ifndef __IPageSections_INTERFACE_DEFINED__
#define __IPageSections_INTERFACE_DEFINED__

/* interface IPageSections */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IPageSections;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010A2-0000-1056-976E-008048D53AE3")
    IPageSections : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ IPageSection **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ IPageSection **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [retval][out] */ IPageSection **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveAll( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPageSectionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPageSections * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPageSections * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPageSections * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPageSections * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPageSections * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPageSections * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPageSections * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            IPageSections * This,
            /* [in] */ long Index,
            /* [retval][out] */ IPageSection **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPageSections * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IPageSections * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IPageSections * This,
            /* [in] */ long Index,
            /* [retval][out] */ IPageSection **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IPageSections * This,
            /* [retval][out] */ IPageSection **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAll )( 
            IPageSections * This);
        
        END_INTERFACE
    } IPageSectionsVtbl;

    interface IPageSections
    {
        CONST_VTBL struct IPageSectionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPageSections_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPageSections_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPageSections_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPageSections_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPageSections_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPageSections_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPageSections_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPageSections_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define IPageSections_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IPageSections_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define IPageSections_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#define IPageSections_Add(This,Result)	\
    ( (This)->lpVtbl -> Add(This,Result) ) 

#define IPageSections_RemoveAll(This)	\
    ( (This)->lpVtbl -> RemoveAll(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPageSections_INTERFACE_DEFINED__ */


#ifndef __IFootnoteSeries_INTERFACE_DEFINED__
#define __IFootnoteSeries_INTERFACE_DEFINED__

/* interface IFootnoteSeries */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IFootnoteSeries;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010C8-0000-1056-976E-008048D53AE3")
    IFootnoteSeries : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberingType( 
            /* [retval][out] */ FootnoteNumberingTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberingType( 
            /* [in] */ FootnoteNumberingTypeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsNumberingWithSuperscript( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsNumberingWithSuperscript( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsContinuousNumbering( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IsContinuousNumbering( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PositionInDocument( 
            /* [retval][out] */ FootnotePositionInDocumentTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PositionOnPage( 
            /* [retval][out] */ FootnotePositionOnPageTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetPosition( 
            /* [in] */ FootnotePositionInDocumentTypeEnum Position,
            /* [in] */ FootnotePositionOnPageTypeEnum ColumnPosition) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HasSeparator( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_HasSeparator( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ IFootnoteSeries *From) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFootnoteSeriesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IFootnoteSeries * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IFootnoteSeries * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IFootnoteSeries * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IFootnoteSeries * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IFootnoteSeries * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IFootnoteSeries * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IFootnoteSeries * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IFootnoteSeries * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberingType )( 
            IFootnoteSeries * This,
            /* [retval][out] */ FootnoteNumberingTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberingType )( 
            IFootnoteSeries * This,
            /* [in] */ FootnoteNumberingTypeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsNumberingWithSuperscript )( 
            IFootnoteSeries * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsNumberingWithSuperscript )( 
            IFootnoteSeries * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsContinuousNumbering )( 
            IFootnoteSeries * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsContinuousNumbering )( 
            IFootnoteSeries * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PositionInDocument )( 
            IFootnoteSeries * This,
            /* [retval][out] */ FootnotePositionInDocumentTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PositionOnPage )( 
            IFootnoteSeries * This,
            /* [retval][out] */ FootnotePositionOnPageTypeEnum *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetPosition )( 
            IFootnoteSeries * This,
            /* [in] */ FootnotePositionInDocumentTypeEnum Position,
            /* [in] */ FootnotePositionOnPageTypeEnum ColumnPosition);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasSeparator )( 
            IFootnoteSeries * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HasSeparator )( 
            IFootnoteSeries * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            IFootnoteSeries * This,
            /* [in] */ IFootnoteSeries *From);
        
        END_INTERFACE
    } IFootnoteSeriesVtbl;

    interface IFootnoteSeries
    {
        CONST_VTBL struct IFootnoteSeriesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFootnoteSeries_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IFootnoteSeries_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IFootnoteSeries_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IFootnoteSeries_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IFootnoteSeries_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IFootnoteSeries_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IFootnoteSeries_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IFootnoteSeries_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IFootnoteSeries_get_NumberingType(This,Result)	\
    ( (This)->lpVtbl -> get_NumberingType(This,Result) ) 

#define IFootnoteSeries_put_NumberingType(This,Value)	\
    ( (This)->lpVtbl -> put_NumberingType(This,Value) ) 

#define IFootnoteSeries_get_IsNumberingWithSuperscript(This,Result)	\
    ( (This)->lpVtbl -> get_IsNumberingWithSuperscript(This,Result) ) 

#define IFootnoteSeries_put_IsNumberingWithSuperscript(This,Value)	\
    ( (This)->lpVtbl -> put_IsNumberingWithSuperscript(This,Value) ) 

#define IFootnoteSeries_get_IsContinuousNumbering(This,Result)	\
    ( (This)->lpVtbl -> get_IsContinuousNumbering(This,Result) ) 

#define IFootnoteSeries_put_IsContinuousNumbering(This,Value)	\
    ( (This)->lpVtbl -> put_IsContinuousNumbering(This,Value) ) 

#define IFootnoteSeries_get_PositionInDocument(This,Result)	\
    ( (This)->lpVtbl -> get_PositionInDocument(This,Result) ) 

#define IFootnoteSeries_get_PositionOnPage(This,Result)	\
    ( (This)->lpVtbl -> get_PositionOnPage(This,Result) ) 

#define IFootnoteSeries_SetPosition(This,Position,ColumnPosition)	\
    ( (This)->lpVtbl -> SetPosition(This,Position,ColumnPosition) ) 

#define IFootnoteSeries_get_HasSeparator(This,Result)	\
    ( (This)->lpVtbl -> get_HasSeparator(This,Result) ) 

#define IFootnoteSeries_put_HasSeparator(This,Value)	\
    ( (This)->lpVtbl -> put_HasSeparator(This,Value) ) 

#define IFootnoteSeries_CopyFrom(This,From)	\
    ( (This)->lpVtbl -> CopyFrom(This,From) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IFootnoteSeries_INTERFACE_DEFINED__ */


#ifndef __IBackgroundLayer_INTERFACE_DEFINED__
#define __IBackgroundLayer_INTERFACE_DEFINED__

/* interface IBackgroundLayer */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IBackgroundLayer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010D0-0000-1056-976E-008048D53AE3")
    IBackgroundLayer : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Region( 
            /* [retval][out] */ IRegion **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Region( 
            /* [in] */ IRegion *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Color( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Color( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsPicture( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IBackgroundLayerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IBackgroundLayer * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IBackgroundLayer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IBackgroundLayer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IBackgroundLayer * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IBackgroundLayer * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IBackgroundLayer * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IBackgroundLayer * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IBackgroundLayer * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Region )( 
            IBackgroundLayer * This,
            /* [retval][out] */ IRegion **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Region )( 
            IBackgroundLayer * This,
            /* [in] */ IRegion *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Color )( 
            IBackgroundLayer * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Color )( 
            IBackgroundLayer * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsPicture )( 
            IBackgroundLayer * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        END_INTERFACE
    } IBackgroundLayerVtbl;

    interface IBackgroundLayer
    {
        CONST_VTBL struct IBackgroundLayerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IBackgroundLayer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IBackgroundLayer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IBackgroundLayer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IBackgroundLayer_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IBackgroundLayer_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IBackgroundLayer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IBackgroundLayer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IBackgroundLayer_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IBackgroundLayer_get_Region(This,Result)	\
    ( (This)->lpVtbl -> get_Region(This,Result) ) 

#define IBackgroundLayer_put_Region(This,Value)	\
    ( (This)->lpVtbl -> put_Region(This,Value) ) 

#define IBackgroundLayer_get_Color(This,Result)	\
    ( (This)->lpVtbl -> get_Color(This,Result) ) 

#define IBackgroundLayer_put_Color(This,Value)	\
    ( (This)->lpVtbl -> put_Color(This,Value) ) 

#define IBackgroundLayer_get_IsPicture(This,Result)	\
    ( (This)->lpVtbl -> get_IsPicture(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IBackgroundLayer_INTERFACE_DEFINED__ */


#ifndef __IPageBlackSeparator_INTERFACE_DEFINED__
#define __IPageBlackSeparator_INTERFACE_DEFINED__

/* interface IPageBlackSeparator */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IPageBlackSeparator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010D1-0000-1056-976E-008048D53AE3")
    IPageBlackSeparator : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ PageBlackSeparatorTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ PageBlackSeparatorTypeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_StartX( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_StartX( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_StartY( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_StartY( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EndX( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_EndX( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EndY( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_EndY( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Thickness( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Thickness( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Role( 
            /* [retval][out] */ PageBlackSeparatorRoleEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Role( 
            /* [in] */ PageBlackSeparatorRoleEnum Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPageBlackSeparatorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPageBlackSeparator * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPageBlackSeparator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPageBlackSeparator * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPageBlackSeparator * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPageBlackSeparator * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPageBlackSeparator * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPageBlackSeparator * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPageBlackSeparator * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IPageBlackSeparator * This,
            /* [retval][out] */ PageBlackSeparatorTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            IPageBlackSeparator * This,
            /* [in] */ PageBlackSeparatorTypeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StartX )( 
            IPageBlackSeparator * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_StartX )( 
            IPageBlackSeparator * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StartY )( 
            IPageBlackSeparator * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_StartY )( 
            IPageBlackSeparator * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndX )( 
            IPageBlackSeparator * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EndX )( 
            IPageBlackSeparator * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndY )( 
            IPageBlackSeparator * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EndY )( 
            IPageBlackSeparator * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Thickness )( 
            IPageBlackSeparator * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Thickness )( 
            IPageBlackSeparator * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Role )( 
            IPageBlackSeparator * This,
            /* [retval][out] */ PageBlackSeparatorRoleEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Role )( 
            IPageBlackSeparator * This,
            /* [in] */ PageBlackSeparatorRoleEnum Value);
        
        END_INTERFACE
    } IPageBlackSeparatorVtbl;

    interface IPageBlackSeparator
    {
        CONST_VTBL struct IPageBlackSeparatorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPageBlackSeparator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPageBlackSeparator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPageBlackSeparator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPageBlackSeparator_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPageBlackSeparator_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPageBlackSeparator_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPageBlackSeparator_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPageBlackSeparator_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IPageBlackSeparator_get_Type(This,Result)	\
    ( (This)->lpVtbl -> get_Type(This,Result) ) 

#define IPageBlackSeparator_put_Type(This,Value)	\
    ( (This)->lpVtbl -> put_Type(This,Value) ) 

#define IPageBlackSeparator_get_StartX(This,Result)	\
    ( (This)->lpVtbl -> get_StartX(This,Result) ) 

#define IPageBlackSeparator_put_StartX(This,Value)	\
    ( (This)->lpVtbl -> put_StartX(This,Value) ) 

#define IPageBlackSeparator_get_StartY(This,Result)	\
    ( (This)->lpVtbl -> get_StartY(This,Result) ) 

#define IPageBlackSeparator_put_StartY(This,Value)	\
    ( (This)->lpVtbl -> put_StartY(This,Value) ) 

#define IPageBlackSeparator_get_EndX(This,Result)	\
    ( (This)->lpVtbl -> get_EndX(This,Result) ) 

#define IPageBlackSeparator_put_EndX(This,Value)	\
    ( (This)->lpVtbl -> put_EndX(This,Value) ) 

#define IPageBlackSeparator_get_EndY(This,Result)	\
    ( (This)->lpVtbl -> get_EndY(This,Result) ) 

#define IPageBlackSeparator_put_EndY(This,Value)	\
    ( (This)->lpVtbl -> put_EndY(This,Value) ) 

#define IPageBlackSeparator_get_Thickness(This,Result)	\
    ( (This)->lpVtbl -> get_Thickness(This,Result) ) 

#define IPageBlackSeparator_put_Thickness(This,Value)	\
    ( (This)->lpVtbl -> put_Thickness(This,Value) ) 

#define IPageBlackSeparator_get_Role(This,Result)	\
    ( (This)->lpVtbl -> get_Role(This,Result) ) 

#define IPageBlackSeparator_put_Role(This,Value)	\
    ( (This)->lpVtbl -> put_Role(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPageBlackSeparator_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_PageElement;

#ifdef __cplusplus

class DECLSPEC_UUID("10002089-0000-1056-976E-008048D53AE3")
PageElement;
#endif

EXTERN_C const CLSID CLSID_PageStructure;

#ifdef __cplusplus

class DECLSPEC_UUID("10002094-0000-1056-976E-008048D53AE3")
PageStructure;
#endif

EXTERN_C const CLSID CLSID_RunningTitle;

#ifdef __cplusplus

class DECLSPEC_UUID("10002095-0000-1056-976E-008048D53AE3")
RunningTitle;
#endif

EXTERN_C const CLSID CLSID_PageStream;

#ifdef __cplusplus

class DECLSPEC_UUID("10002096-0000-1056-976E-008048D53AE3")
PageStream;
#endif

#ifndef __IPageStreams_INTERFACE_DEFINED__
#define __IPageStreams_INTERFACE_DEFINED__

/* interface IPageStreams */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IPageStreams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010B4-0000-1056-976E-008048D53AE3")
    IPageStreams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ IPageStream **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ IPageStream **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPageStreamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPageStreams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPageStreams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPageStreams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPageStreams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPageStreams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPageStreams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPageStreams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            IPageStreams * This,
            /* [in] */ long Index,
            /* [retval][out] */ IPageStream **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPageStreams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IPageStreams * This,
            /* [in] */ long Index,
            /* [retval][out] */ IPageStream **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IPageStreams * This,
            /* [retval][out] */ long *Result);
        
        END_INTERFACE
    } IPageStreamsVtbl;

    interface IPageStreams
    {
        CONST_VTBL struct IPageStreamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPageStreams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPageStreams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPageStreams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPageStreams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPageStreams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPageStreams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPageStreams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPageStreams_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define IPageStreams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IPageStreams_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#define IPageStreams_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPageStreams_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_PageSection;

#ifdef __cplusplus

class DECLSPEC_UUID("10002097-0000-1056-976E-008048D53AE3")
PageSection;
#endif

EXTERN_C const CLSID CLSID_PageSections;

#ifdef __cplusplus

class DECLSPEC_UUID("10002092-0000-1056-976E-008048D53AE3")
PageSections;
#endif

EXTERN_C const CLSID CLSID_RunningTitleSeries;

#ifdef __cplusplus

class DECLSPEC_UUID("10002098-0000-1056-976E-008048D53AE3")
RunningTitleSeries;
#endif


#ifndef __BorderFlags_MODULE_DEFINED__
#define __BorderFlags_MODULE_DEFINED__


/* module BorderFlags */
/* [helpstring][helpcontext] */ 

const long BF_Top	=	0x1;

const long BF_Bottom	=	0x2;

const long BF_Left	=	0x4;

const long BF_Right	=	0x8;

#endif /* __BorderFlags_MODULE_DEFINED__ */

EXTERN_C const CLSID CLSID_Incut;

#ifdef __cplusplus

class DECLSPEC_UUID("1000209A-0000-1056-976E-008048D53AE3")
Incut;
#endif

EXTERN_C const CLSID CLSID_Footnote;

#ifdef __cplusplus

class DECLSPEC_UUID("1000209B-0000-1056-976E-008048D53AE3")
Footnote;
#endif

EXTERN_C const CLSID CLSID_MainText;

#ifdef __cplusplus

class DECLSPEC_UUID("1000209C-0000-1056-976E-008048D53AE3")
MainText;
#endif

EXTERN_C const CLSID CLSID_Artefact;

#ifdef __cplusplus

class DECLSPEC_UUID("1000209D-0000-1056-976E-008048D53AE3")
Artefact;
#endif

EXTERN_C const CLSID CLSID_RunningTitleSeriesArray;

#ifdef __cplusplus

class DECLSPEC_UUID("1000209E-0000-1056-976E-008048D53AE3")
RunningTitleSeriesArray;
#endif

EXTERN_C const CLSID CLSID_RunningTitleSeriesText;

#ifdef __cplusplus

class DECLSPEC_UUID("1000209F-0000-1056-976E-008048D53AE3")
RunningTitleSeriesText;
#endif

EXTERN_C const CLSID CLSID_BackgroundLayer;

#ifdef __cplusplus

class DECLSPEC_UUID("100020BA-0000-1056-976E-008048D53AE3")
BackgroundLayer;
#endif

EXTERN_C const CLSID CLSID_BlackSeparator;

#ifdef __cplusplus

class DECLSPEC_UUID("100020BB-0000-1056-976E-008048D53AE3")
BlackSeparator;
#endif

#ifndef __IGlobalStyleStorage_INTERFACE_DEFINED__
#define __IGlobalStyleStorage_INTERFACE_DEFINED__

/* interface IGlobalStyleStorage */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IGlobalStyleStorage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010BB-0000-1056-976E-008048D53AE3")
    IGlobalStyleStorage : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ParagraphStylesCount( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ParagraphStyle( 
            /* [in] */ long StyleIndex,
            /* [retval][out] */ IParagraphStyle **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateParagraphStyle( 
            /* [retval][out] */ IParagraphStyle **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BaseStyleForParagraphRole( 
            /* [defaultvalue][in] */ ParagraphRoleEnum Role,
            /* [defaultvalue][in] */ long Level,
            /* [retval][out] */ IParagraphStyle **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BaseStyleForParagraphRole( 
            /* [in] */ ParagraphRoleEnum Role,
            /* [in] */ long Level,
            /* [in] */ IParagraphStyle *Style) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteAndReplaceParagraphStyle( 
            /* [in] */ IParagraphStyle *Deleted,
            /* [in] */ IParagraphStyle *Substitute) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteAllStyles( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clean( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IGlobalStyleStorageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGlobalStyleStorage * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGlobalStyleStorage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGlobalStyleStorage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IGlobalStyleStorage * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IGlobalStyleStorage * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IGlobalStyleStorage * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IGlobalStyleStorage * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IGlobalStyleStorage * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ParagraphStylesCount )( 
            IGlobalStyleStorage * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ParagraphStyle )( 
            IGlobalStyleStorage * This,
            /* [in] */ long StyleIndex,
            /* [retval][out] */ IParagraphStyle **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateParagraphStyle )( 
            IGlobalStyleStorage * This,
            /* [retval][out] */ IParagraphStyle **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BaseStyleForParagraphRole )( 
            IGlobalStyleStorage * This,
            /* [defaultvalue][in] */ ParagraphRoleEnum Role,
            /* [defaultvalue][in] */ long Level,
            /* [retval][out] */ IParagraphStyle **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BaseStyleForParagraphRole )( 
            IGlobalStyleStorage * This,
            /* [in] */ ParagraphRoleEnum Role,
            /* [in] */ long Level,
            /* [in] */ IParagraphStyle *Style);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteAndReplaceParagraphStyle )( 
            IGlobalStyleStorage * This,
            /* [in] */ IParagraphStyle *Deleted,
            /* [in] */ IParagraphStyle *Substitute);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteAllStyles )( 
            IGlobalStyleStorage * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clean )( 
            IGlobalStyleStorage * This);
        
        END_INTERFACE
    } IGlobalStyleStorageVtbl;

    interface IGlobalStyleStorage
    {
        CONST_VTBL struct IGlobalStyleStorageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGlobalStyleStorage_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGlobalStyleStorage_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGlobalStyleStorage_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGlobalStyleStorage_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IGlobalStyleStorage_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IGlobalStyleStorage_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IGlobalStyleStorage_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IGlobalStyleStorage_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IGlobalStyleStorage_get_ParagraphStylesCount(This,Result)	\
    ( (This)->lpVtbl -> get_ParagraphStylesCount(This,Result) ) 

#define IGlobalStyleStorage_get_ParagraphStyle(This,StyleIndex,Result)	\
    ( (This)->lpVtbl -> get_ParagraphStyle(This,StyleIndex,Result) ) 

#define IGlobalStyleStorage_CreateParagraphStyle(This,Result)	\
    ( (This)->lpVtbl -> CreateParagraphStyle(This,Result) ) 

#define IGlobalStyleStorage_get_BaseStyleForParagraphRole(This,Role,Level,Result)	\
    ( (This)->lpVtbl -> get_BaseStyleForParagraphRole(This,Role,Level,Result) ) 

#define IGlobalStyleStorage_put_BaseStyleForParagraphRole(This,Role,Level,Style)	\
    ( (This)->lpVtbl -> put_BaseStyleForParagraphRole(This,Role,Level,Style) ) 

#define IGlobalStyleStorage_DeleteAndReplaceParagraphStyle(This,Deleted,Substitute)	\
    ( (This)->lpVtbl -> DeleteAndReplaceParagraphStyle(This,Deleted,Substitute) ) 

#define IGlobalStyleStorage_DeleteAllStyles(This)	\
    ( (This)->lpVtbl -> DeleteAllStyles(This) ) 

#define IGlobalStyleStorage_Clean(This)	\
    ( (This)->lpVtbl -> Clean(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGlobalStyleStorage_INTERFACE_DEFINED__ */


#ifndef __IFootnoteSeriesArray_INTERFACE_DEFINED__
#define __IFootnoteSeriesArray_INTERFACE_DEFINED__

/* interface IFootnoteSeriesArray */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IFootnoteSeriesArray;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010C7-0000-1056-976E-008048D53AE3")
    IFootnoteSeriesArray : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ IFootnoteSeries **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ IFootnoteSeries **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateFootnoteSeries( 
            /* [retval][out] */ IFootnoteSeries **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteAll( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteEmptySeries( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFootnoteSeriesArrayVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IFootnoteSeriesArray * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IFootnoteSeriesArray * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IFootnoteSeriesArray * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IFootnoteSeriesArray * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IFootnoteSeriesArray * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IFootnoteSeriesArray * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IFootnoteSeriesArray * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            IFootnoteSeriesArray * This,
            /* [in] */ long Index,
            /* [retval][out] */ IFootnoteSeries **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IFootnoteSeriesArray * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IFootnoteSeriesArray * This,
            /* [in] */ long Index,
            /* [retval][out] */ IFootnoteSeries **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IFootnoteSeriesArray * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateFootnoteSeries )( 
            IFootnoteSeriesArray * This,
            /* [retval][out] */ IFootnoteSeries **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteAll )( 
            IFootnoteSeriesArray * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteEmptySeries )( 
            IFootnoteSeriesArray * This);
        
        END_INTERFACE
    } IFootnoteSeriesArrayVtbl;

    interface IFootnoteSeriesArray
    {
        CONST_VTBL struct IFootnoteSeriesArrayVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFootnoteSeriesArray_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IFootnoteSeriesArray_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IFootnoteSeriesArray_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IFootnoteSeriesArray_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IFootnoteSeriesArray_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IFootnoteSeriesArray_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IFootnoteSeriesArray_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IFootnoteSeriesArray_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define IFootnoteSeriesArray_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IFootnoteSeriesArray_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#define IFootnoteSeriesArray_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define IFootnoteSeriesArray_CreateFootnoteSeries(This,Result)	\
    ( (This)->lpVtbl -> CreateFootnoteSeries(This,Result) ) 

#define IFootnoteSeriesArray_DeleteAll(This)	\
    ( (This)->lpVtbl -> DeleteAll(This) ) 

#define IFootnoteSeriesArray_DeleteEmptySeries(This)	\
    ( (This)->lpVtbl -> DeleteEmptySeries(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IFootnoteSeriesArray_INTERFACE_DEFINED__ */


#ifndef __IDocumentSection_INTERFACE_DEFINED__
#define __IDocumentSection_INTERFACE_DEFINED__

/* interface IDocumentSection */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IDocumentSection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010BC-0000-1056-976E-008048D53AE3")
    IDocumentSection : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DocumentStreamsCount( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DocumentStream( 
            /* [in] */ long StreamIndex,
            /* [retval][out] */ IDocumentStream **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PageWidth( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PageWidth( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PageHeight( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PageHeight( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Margins( 
            /* [retval][out] */ IFRRectangle **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Margins( 
            /* [in] */ IFRRectangle *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AreMarginsMirroredOnEvenPages( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_AreMarginsMirroredOnEvenPages( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MainTextStream( 
            /* [retval][out] */ IDocumentStream **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddNewStream( 
            /* [in] */ StreamTypeEnum StreamType,
            /* [retval][out] */ IDocumentStream **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FirstPage( 
            /* [retval][out] */ IFRPage **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LastPage( 
            /* [retval][out] */ IFRPage **Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDocumentSectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDocumentSection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDocumentSection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDocumentSection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDocumentSection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDocumentSection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDocumentSection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDocumentSection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IDocumentSection * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DocumentStreamsCount )( 
            IDocumentSection * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DocumentStream )( 
            IDocumentSection * This,
            /* [in] */ long StreamIndex,
            /* [retval][out] */ IDocumentStream **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PageWidth )( 
            IDocumentSection * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PageWidth )( 
            IDocumentSection * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PageHeight )( 
            IDocumentSection * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PageHeight )( 
            IDocumentSection * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Margins )( 
            IDocumentSection * This,
            /* [retval][out] */ IFRRectangle **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Margins )( 
            IDocumentSection * This,
            /* [in] */ IFRRectangle *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AreMarginsMirroredOnEvenPages )( 
            IDocumentSection * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AreMarginsMirroredOnEvenPages )( 
            IDocumentSection * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MainTextStream )( 
            IDocumentSection * This,
            /* [retval][out] */ IDocumentStream **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddNewStream )( 
            IDocumentSection * This,
            /* [in] */ StreamTypeEnum StreamType,
            /* [retval][out] */ IDocumentStream **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FirstPage )( 
            IDocumentSection * This,
            /* [retval][out] */ IFRPage **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LastPage )( 
            IDocumentSection * This,
            /* [retval][out] */ IFRPage **Result);
        
        END_INTERFACE
    } IDocumentSectionVtbl;

    interface IDocumentSection
    {
        CONST_VTBL struct IDocumentSectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDocumentSection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDocumentSection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDocumentSection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDocumentSection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IDocumentSection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IDocumentSection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IDocumentSection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IDocumentSection_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IDocumentSection_get_DocumentStreamsCount(This,Result)	\
    ( (This)->lpVtbl -> get_DocumentStreamsCount(This,Result) ) 

#define IDocumentSection_get_DocumentStream(This,StreamIndex,Result)	\
    ( (This)->lpVtbl -> get_DocumentStream(This,StreamIndex,Result) ) 

#define IDocumentSection_get_PageWidth(This,Result)	\
    ( (This)->lpVtbl -> get_PageWidth(This,Result) ) 

#define IDocumentSection_put_PageWidth(This,Value)	\
    ( (This)->lpVtbl -> put_PageWidth(This,Value) ) 

#define IDocumentSection_get_PageHeight(This,Result)	\
    ( (This)->lpVtbl -> get_PageHeight(This,Result) ) 

#define IDocumentSection_put_PageHeight(This,Value)	\
    ( (This)->lpVtbl -> put_PageHeight(This,Value) ) 

#define IDocumentSection_get_Margins(This,Result)	\
    ( (This)->lpVtbl -> get_Margins(This,Result) ) 

#define IDocumentSection_put_Margins(This,Value)	\
    ( (This)->lpVtbl -> put_Margins(This,Value) ) 

#define IDocumentSection_get_AreMarginsMirroredOnEvenPages(This,Result)	\
    ( (This)->lpVtbl -> get_AreMarginsMirroredOnEvenPages(This,Result) ) 

#define IDocumentSection_put_AreMarginsMirroredOnEvenPages(This,Value)	\
    ( (This)->lpVtbl -> put_AreMarginsMirroredOnEvenPages(This,Value) ) 

#define IDocumentSection_get_MainTextStream(This,Result)	\
    ( (This)->lpVtbl -> get_MainTextStream(This,Result) ) 

#define IDocumentSection_AddNewStream(This,StreamType,Result)	\
    ( (This)->lpVtbl -> AddNewStream(This,StreamType,Result) ) 

#define IDocumentSection_get_FirstPage(This,Result)	\
    ( (This)->lpVtbl -> get_FirstPage(This,Result) ) 

#define IDocumentSection_get_LastPage(This,Result)	\
    ( (This)->lpVtbl -> get_LastPage(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDocumentSection_INTERFACE_DEFINED__ */


#ifndef __IDocumentStream_INTERFACE_DEFINED__
#define __IDocumentStream_INTERFACE_DEFINED__

/* interface IDocumentStream */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IDocumentStream;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010BD-0000-1056-976E-008048D53AE3")
    IDocumentStream : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ StreamTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TextOrientation( 
            /* [retval][out] */ ITextOrientation **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsEmpty( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FirstElement( 
            /* [retval][out] */ IDocumentElement **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LastElement( 
            /* [retval][out] */ IDocumentElement **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NextElement( 
            /* [in] */ IDocumentElement *Element,
            /* [retval][out] */ IDocumentElement **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PrevElement( 
            /* [in] */ IDocumentElement *Element,
            /* [retval][out] */ IDocumentElement **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindFirstObjectOnPage( 
            /* [in] */ IFRPage *Page,
            /* [retval][out] */ IDocumentElement **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FirstPage( 
            /* [retval][out] */ IFRPage **Page) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LastPage( 
            /* [retval][out] */ IFRPage **Page) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetAllPageElements( 
            /* [retval][out] */ IPageElements **Ids) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetAsMainText( 
            /* [retval][out] */ IMainText **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetAsIncut( 
            /* [retval][out] */ IIncut **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetAsFootnote( 
            /* [retval][out] */ IFootnote **Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDocumentStreamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDocumentStream * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDocumentStream * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDocumentStream * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDocumentStream * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDocumentStream * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDocumentStream * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDocumentStream * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IDocumentStream * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IDocumentStream * This,
            /* [retval][out] */ StreamTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TextOrientation )( 
            IDocumentStream * This,
            /* [retval][out] */ ITextOrientation **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsEmpty )( 
            IDocumentStream * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FirstElement )( 
            IDocumentStream * This,
            /* [retval][out] */ IDocumentElement **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LastElement )( 
            IDocumentStream * This,
            /* [retval][out] */ IDocumentElement **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NextElement )( 
            IDocumentStream * This,
            /* [in] */ IDocumentElement *Element,
            /* [retval][out] */ IDocumentElement **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PrevElement )( 
            IDocumentStream * This,
            /* [in] */ IDocumentElement *Element,
            /* [retval][out] */ IDocumentElement **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindFirstObjectOnPage )( 
            IDocumentStream * This,
            /* [in] */ IFRPage *Page,
            /* [retval][out] */ IDocumentElement **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FirstPage )( 
            IDocumentStream * This,
            /* [retval][out] */ IFRPage **Page);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LastPage )( 
            IDocumentStream * This,
            /* [retval][out] */ IFRPage **Page);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAllPageElements )( 
            IDocumentStream * This,
            /* [retval][out] */ IPageElements **Ids);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsMainText )( 
            IDocumentStream * This,
            /* [retval][out] */ IMainText **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsIncut )( 
            IDocumentStream * This,
            /* [retval][out] */ IIncut **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsFootnote )( 
            IDocumentStream * This,
            /* [retval][out] */ IFootnote **Result);
        
        END_INTERFACE
    } IDocumentStreamVtbl;

    interface IDocumentStream
    {
        CONST_VTBL struct IDocumentStreamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDocumentStream_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDocumentStream_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDocumentStream_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDocumentStream_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IDocumentStream_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IDocumentStream_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IDocumentStream_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IDocumentStream_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IDocumentStream_get_Type(This,Result)	\
    ( (This)->lpVtbl -> get_Type(This,Result) ) 

#define IDocumentStream_get_TextOrientation(This,Result)	\
    ( (This)->lpVtbl -> get_TextOrientation(This,Result) ) 

#define IDocumentStream_get_IsEmpty(This,Result)	\
    ( (This)->lpVtbl -> get_IsEmpty(This,Result) ) 

#define IDocumentStream_get_FirstElement(This,Result)	\
    ( (This)->lpVtbl -> get_FirstElement(This,Result) ) 

#define IDocumentStream_get_LastElement(This,Result)	\
    ( (This)->lpVtbl -> get_LastElement(This,Result) ) 

#define IDocumentStream_get_NextElement(This,Element,Result)	\
    ( (This)->lpVtbl -> get_NextElement(This,Element,Result) ) 

#define IDocumentStream_get_PrevElement(This,Element,Result)	\
    ( (This)->lpVtbl -> get_PrevElement(This,Element,Result) ) 

#define IDocumentStream_FindFirstObjectOnPage(This,Page,Result)	\
    ( (This)->lpVtbl -> FindFirstObjectOnPage(This,Page,Result) ) 

#define IDocumentStream_get_FirstPage(This,Page)	\
    ( (This)->lpVtbl -> get_FirstPage(This,Page) ) 

#define IDocumentStream_get_LastPage(This,Page)	\
    ( (This)->lpVtbl -> get_LastPage(This,Page) ) 

#define IDocumentStream_GetAllPageElements(This,Ids)	\
    ( (This)->lpVtbl -> GetAllPageElements(This,Ids) ) 

#define IDocumentStream_GetAsMainText(This,Result)	\
    ( (This)->lpVtbl -> GetAsMainText(This,Result) ) 

#define IDocumentStream_GetAsIncut(This,Result)	\
    ( (This)->lpVtbl -> GetAsIncut(This,Result) ) 

#define IDocumentStream_GetAsFootnote(This,Result)	\
    ( (This)->lpVtbl -> GetAsFootnote(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDocumentStream_INTERFACE_DEFINED__ */


#ifndef __IDocumentElement_INTERFACE_DEFINED__
#define __IDocumentElement_INTERFACE_DEFINED__

/* interface IDocumentElement */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IDocumentElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010C3-0000-1056-976E-008048D53AE3")
    IDocumentElement : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ DocumentElementTypeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_OccupiedPagesCount( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_OccupiedPage( 
            /* [in] */ long PageNumber,
            /* [retval][out] */ IFRPage **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetAsParagraph( 
            /* [retval][out] */ IParagraph **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetAsTable( 
            /* [retval][out] */ ITextTable **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetAsPicture( 
            /* [retval][out] */ ITextPicture **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetAsBarcode( 
            /* [retval][out] */ ITextBarcode **Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDocumentElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDocumentElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDocumentElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDocumentElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDocumentElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDocumentElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDocumentElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDocumentElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IDocumentElement * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IDocumentElement * This,
            /* [retval][out] */ DocumentElementTypeEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OccupiedPagesCount )( 
            IDocumentElement * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OccupiedPage )( 
            IDocumentElement * This,
            /* [in] */ long PageNumber,
            /* [retval][out] */ IFRPage **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsParagraph )( 
            IDocumentElement * This,
            /* [retval][out] */ IParagraph **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsTable )( 
            IDocumentElement * This,
            /* [retval][out] */ ITextTable **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsPicture )( 
            IDocumentElement * This,
            /* [retval][out] */ ITextPicture **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAsBarcode )( 
            IDocumentElement * This,
            /* [retval][out] */ ITextBarcode **Result);
        
        END_INTERFACE
    } IDocumentElementVtbl;

    interface IDocumentElement
    {
        CONST_VTBL struct IDocumentElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDocumentElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDocumentElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDocumentElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDocumentElement_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IDocumentElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IDocumentElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IDocumentElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IDocumentElement_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IDocumentElement_get_Type(This,Result)	\
    ( (This)->lpVtbl -> get_Type(This,Result) ) 

#define IDocumentElement_get_OccupiedPagesCount(This,Result)	\
    ( (This)->lpVtbl -> get_OccupiedPagesCount(This,Result) ) 

#define IDocumentElement_get_OccupiedPage(This,PageNumber,Result)	\
    ( (This)->lpVtbl -> get_OccupiedPage(This,PageNumber,Result) ) 

#define IDocumentElement_GetAsParagraph(This,Result)	\
    ( (This)->lpVtbl -> GetAsParagraph(This,Result) ) 

#define IDocumentElement_GetAsTable(This,Result)	\
    ( (This)->lpVtbl -> GetAsTable(This,Result) ) 

#define IDocumentElement_GetAsPicture(This,Result)	\
    ( (This)->lpVtbl -> GetAsPicture(This,Result) ) 

#define IDocumentElement_GetAsBarcode(This,Result)	\
    ( (This)->lpVtbl -> GetAsBarcode(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDocumentElement_INTERFACE_DEFINED__ */


#ifndef __IListLevel_INTERFACE_DEFINED__
#define __IListLevel_INTERFACE_DEFINED__

/* interface IListLevel */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IListLevel;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010D2-0000-1056-976E-008048D53AE3")
    IListLevel : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LevelIndex( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberingStyle( 
            /* [retval][out] */ NumberingStyleEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberingStyle( 
            /* [in] */ NumberingStyleEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_StartNumber( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_StartNumber( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BulletSymbol( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BulletSymbol( 
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RestartNumberingOnUpperListLevelOccurance( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RestartNumberingOnUpperListLevelOccurance( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TemplateText( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TemplateText( 
            /* [in] */ BSTR Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IListLevelVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IListLevel * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IListLevel * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IListLevel * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IListLevel * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IListLevel * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IListLevel * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IListLevel * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IListLevel * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LevelIndex )( 
            IListLevel * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberingStyle )( 
            IListLevel * This,
            /* [retval][out] */ NumberingStyleEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberingStyle )( 
            IListLevel * This,
            /* [in] */ NumberingStyleEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StartNumber )( 
            IListLevel * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_StartNumber )( 
            IListLevel * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BulletSymbol )( 
            IListLevel * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BulletSymbol )( 
            IListLevel * This,
            /* [in] */ BSTR Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RestartNumberingOnUpperListLevelOccurance )( 
            IListLevel * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RestartNumberingOnUpperListLevelOccurance )( 
            IListLevel * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TemplateText )( 
            IListLevel * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TemplateText )( 
            IListLevel * This,
            /* [in] */ BSTR Value);
        
        END_INTERFACE
    } IListLevelVtbl;

    interface IListLevel
    {
        CONST_VTBL struct IListLevelVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IListLevel_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IListLevel_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IListLevel_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IListLevel_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IListLevel_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IListLevel_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IListLevel_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IListLevel_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IListLevel_get_LevelIndex(This,Result)	\
    ( (This)->lpVtbl -> get_LevelIndex(This,Result) ) 

#define IListLevel_get_NumberingStyle(This,Result)	\
    ( (This)->lpVtbl -> get_NumberingStyle(This,Result) ) 

#define IListLevel_put_NumberingStyle(This,Value)	\
    ( (This)->lpVtbl -> put_NumberingStyle(This,Value) ) 

#define IListLevel_get_StartNumber(This,Result)	\
    ( (This)->lpVtbl -> get_StartNumber(This,Result) ) 

#define IListLevel_put_StartNumber(This,Value)	\
    ( (This)->lpVtbl -> put_StartNumber(This,Value) ) 

#define IListLevel_get_BulletSymbol(This,Result)	\
    ( (This)->lpVtbl -> get_BulletSymbol(This,Result) ) 

#define IListLevel_put_BulletSymbol(This,Value)	\
    ( (This)->lpVtbl -> put_BulletSymbol(This,Value) ) 

#define IListLevel_get_RestartNumberingOnUpperListLevelOccurance(This,Result)	\
    ( (This)->lpVtbl -> get_RestartNumberingOnUpperListLevelOccurance(This,Result) ) 

#define IListLevel_put_RestartNumberingOnUpperListLevelOccurance(This,Value)	\
    ( (This)->lpVtbl -> put_RestartNumberingOnUpperListLevelOccurance(This,Value) ) 

#define IListLevel_get_TemplateText(This,Result)	\
    ( (This)->lpVtbl -> get_TemplateText(This,Result) ) 

#define IListLevel_put_TemplateText(This,Value)	\
    ( (This)->lpVtbl -> put_TemplateText(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IListLevel_INTERFACE_DEFINED__ */


#ifndef __IList_INTERFACE_DEFINED__
#define __IList_INTERFACE_DEFINED__

/* interface IList */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IList;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010C0-0000-1056-976E-008048D53AE3")
    IList : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ IListLevel **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ IListLevel **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddLevel( 
            /* [retval][out] */ IListLevel **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveAll( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IList * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IList * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IList * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IList * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IList * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IList * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IList * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            IList * This,
            /* [in] */ long Index,
            /* [retval][out] */ IListLevel **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IList * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IList * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IList * This,
            /* [in] */ long Index,
            /* [retval][out] */ IListLevel **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddLevel )( 
            IList * This,
            /* [retval][out] */ IListLevel **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAll )( 
            IList * This);
        
        END_INTERFACE
    } IListVtbl;

    interface IList
    {
        CONST_VTBL struct IListVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IList_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IList_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IList_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IList_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IList_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IList_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IList_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IList_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define IList_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IList_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define IList_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#define IList_AddLevel(This,Result)	\
    ( (This)->lpVtbl -> AddLevel(This,Result) ) 

#define IList_RemoveAll(This)	\
    ( (This)->lpVtbl -> RemoveAll(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IList_INTERFACE_DEFINED__ */


#ifndef __IDocumentStructure_INTERFACE_DEFINED__
#define __IDocumentStructure_INTERFACE_DEFINED__

/* interface IDocumentStructure */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IDocumentStructure;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010BA-0000-1056-976E-008048D53AE3")
    IDocumentStructure : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_GlobalStyleStorage( 
            /* [retval][out] */ IGlobalStyleStorage **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RunningTitleSeriesArray( 
            /* [retval][out] */ IRunningTitleSeriesArray **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FootnoteSeriesArray( 
            /* [retval][out] */ IFootnoteSeriesArray **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DocumentSectionsCount( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DocumentSection( 
            /* [in] */ long SectionIndex,
            /* [retval][out] */ IDocumentSection **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindFirstSectionOnPage( 
            /* [in] */ long PageIndex,
            /* [retval][out] */ IDocumentSection **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindFootnoteByHyperlinkTarget( 
            /* [in] */ BSTR Target,
            /* [retval][out] */ IDocumentStream **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetAllFootnoteTargets( 
            /* [retval][out] */ IStringsCollection **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE UnloadUnusedPages( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE UnloadAllPages( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDocumentStructureVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDocumentStructure * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDocumentStructure * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDocumentStructure * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDocumentStructure * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDocumentStructure * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDocumentStructure * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDocumentStructure * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IDocumentStructure * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GlobalStyleStorage )( 
            IDocumentStructure * This,
            /* [retval][out] */ IGlobalStyleStorage **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RunningTitleSeriesArray )( 
            IDocumentStructure * This,
            /* [retval][out] */ IRunningTitleSeriesArray **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FootnoteSeriesArray )( 
            IDocumentStructure * This,
            /* [retval][out] */ IFootnoteSeriesArray **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DocumentSectionsCount )( 
            IDocumentStructure * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DocumentSection )( 
            IDocumentStructure * This,
            /* [in] */ long SectionIndex,
            /* [retval][out] */ IDocumentSection **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindFirstSectionOnPage )( 
            IDocumentStructure * This,
            /* [in] */ long PageIndex,
            /* [retval][out] */ IDocumentSection **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindFootnoteByHyperlinkTarget )( 
            IDocumentStructure * This,
            /* [in] */ BSTR Target,
            /* [retval][out] */ IDocumentStream **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAllFootnoteTargets )( 
            IDocumentStructure * This,
            /* [retval][out] */ IStringsCollection **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *UnloadUnusedPages )( 
            IDocumentStructure * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *UnloadAllPages )( 
            IDocumentStructure * This);
        
        END_INTERFACE
    } IDocumentStructureVtbl;

    interface IDocumentStructure
    {
        CONST_VTBL struct IDocumentStructureVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDocumentStructure_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDocumentStructure_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDocumentStructure_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDocumentStructure_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IDocumentStructure_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IDocumentStructure_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IDocumentStructure_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IDocumentStructure_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IDocumentStructure_get_GlobalStyleStorage(This,Result)	\
    ( (This)->lpVtbl -> get_GlobalStyleStorage(This,Result) ) 

#define IDocumentStructure_get_RunningTitleSeriesArray(This,Result)	\
    ( (This)->lpVtbl -> get_RunningTitleSeriesArray(This,Result) ) 

#define IDocumentStructure_get_FootnoteSeriesArray(This,Result)	\
    ( (This)->lpVtbl -> get_FootnoteSeriesArray(This,Result) ) 

#define IDocumentStructure_get_DocumentSectionsCount(This,Result)	\
    ( (This)->lpVtbl -> get_DocumentSectionsCount(This,Result) ) 

#define IDocumentStructure_get_DocumentSection(This,SectionIndex,Result)	\
    ( (This)->lpVtbl -> get_DocumentSection(This,SectionIndex,Result) ) 

#define IDocumentStructure_FindFirstSectionOnPage(This,PageIndex,Result)	\
    ( (This)->lpVtbl -> FindFirstSectionOnPage(This,PageIndex,Result) ) 

#define IDocumentStructure_FindFootnoteByHyperlinkTarget(This,Target,Result)	\
    ( (This)->lpVtbl -> FindFootnoteByHyperlinkTarget(This,Target,Result) ) 

#define IDocumentStructure_GetAllFootnoteTargets(This,Result)	\
    ( (This)->lpVtbl -> GetAllFootnoteTargets(This,Result) ) 

#define IDocumentStructure_UnloadUnusedPages(This)	\
    ( (This)->lpVtbl -> UnloadUnusedPages(This) ) 

#define IDocumentStructure_UnloadAllPages(This)	\
    ( (This)->lpVtbl -> UnloadAllPages(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDocumentStructure_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_DocumentStructure;

#ifdef __cplusplus

class DECLSPEC_UUID("100020A7-0000-1056-976E-008048D53AE3")
DocumentStructure;
#endif

EXTERN_C const CLSID CLSID_FootnoteSeriesArray;

#ifdef __cplusplus

class DECLSPEC_UUID("100020B2-0000-1056-976E-008048D53AE3")
FootnoteSeriesArray;
#endif

EXTERN_C const CLSID CLSID_FootnoteSeries;

#ifdef __cplusplus

class DECLSPEC_UUID("100020B3-0000-1056-976E-008048D53AE3")
FootnoteSeries;
#endif

EXTERN_C const CLSID CLSID_GlobalStyleStorage;

#ifdef __cplusplus

class DECLSPEC_UUID("100020A8-0000-1056-976E-008048D53AE3")
GlobalStyleStorage;
#endif

EXTERN_C const CLSID CLSID_DocumentSection;

#ifdef __cplusplus

class DECLSPEC_UUID("100020A9-0000-1056-976E-008048D53AE3")
DocumentSection;
#endif

EXTERN_C const CLSID CLSID_DocumentStream;

#ifdef __cplusplus

class DECLSPEC_UUID("100020AA-0000-1056-976E-008048D53AE3")
DocumentStream;
#endif

EXTERN_C const CLSID CLSID_DocumentElement;

#ifdef __cplusplus

class DECLSPEC_UUID("100020B0-0000-1056-976E-008048D53AE3")
DocumentElement;
#endif

EXTERN_C const CLSID CLSID_StreamElementLocationParams;

#ifdef __cplusplus

class DECLSPEC_UUID("100020B1-0000-1056-976E-008048D53AE3")
StreamElementLocationParams;
#endif

EXTERN_C const CLSID CLSID_ParagraphStyle;

#ifdef __cplusplus

class DECLSPEC_UUID("100020AB-0000-1056-976E-008048D53AE3")
ParagraphStyle;
#endif

EXTERN_C const CLSID CLSID_FontStyle;

#ifdef __cplusplus

class DECLSPEC_UUID("100020AC-0000-1056-976E-008048D53AE3")
FontStyle;
#endif

EXTERN_C const CLSID CLSID_List;

#ifdef __cplusplus

class DECLSPEC_UUID("100020AD-0000-1056-976E-008048D53AE3")
List;
#endif

EXTERN_C const CLSID CLSID_ListLevel;

#ifdef __cplusplus

class DECLSPEC_UUID("100020BC-0000-1056-976E-008048D53AE3")
ListLevel;
#endif

EXTERN_C const CLSID CLSID_ListParams;

#ifdef __cplusplus

class DECLSPEC_UUID("100020B9-0000-1056-976E-008048D53AE3")
ListParams;
#endif

#ifndef __IFRPages_INTERFACE_DEFINED__
#define __IFRPages_INTERFACE_DEFINED__

/* interface IFRPages */
/* [unique][helpstring][helpcontext][dual][uuid][object] */ 


EXTERN_C const IID IID_IFRPages;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001082-0000-1056-976E-008048D53AE3")
    IFRPages : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
            /* [in] */ long Index,
            /* [retval][out] */ IFRPage **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Count) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            long Index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Renumber( 
            ILongsCollection *NewOrder) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Swap( 
            long FirstIndex,
            long SecondIndex) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Find( 
            /* [in] */ IFRPage *Page,
            /* [retval][out] */ long *Index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ IFRPage **Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFRPagesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IFRPages * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IFRPages * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IFRPages * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IFRPages * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IFRPages * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IFRPages * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IFRPages * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            IFRPages * This,
            /* [in] */ long Index,
            /* [retval][out] */ IFRPage **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IFRPages * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IFRPages * This,
            /* [retval][out] */ long *Count);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IFRPages * This,
            long Index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Renumber )( 
            IFRPages * This,
            ILongsCollection *NewOrder);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Swap )( 
            IFRPages * This,
            long FirstIndex,
            long SecondIndex);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Find )( 
            IFRPages * This,
            /* [in] */ IFRPage *Page,
            /* [retval][out] */ long *Index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IFRPages * This,
            /* [in] */ long Index,
            /* [retval][out] */ IFRPage **Result);
        
        END_INTERFACE
    } IFRPagesVtbl;

    interface IFRPages
    {
        CONST_VTBL struct IFRPagesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFRPages_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IFRPages_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IFRPages_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IFRPages_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IFRPages_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IFRPages_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IFRPages_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IFRPages_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define IFRPages_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IFRPages_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 

#define IFRPages_Remove(This,Index)	\
    ( (This)->lpVtbl -> Remove(This,Index) ) 

#define IFRPages_Renumber(This,NewOrder)	\
    ( (This)->lpVtbl -> Renumber(This,NewOrder) ) 

#define IFRPages_Swap(This,FirstIndex,SecondIndex)	\
    ( (This)->lpVtbl -> Swap(This,FirstIndex,SecondIndex) ) 

#define IFRPages_Find(This,Page,Index)	\
    ( (This)->lpVtbl -> Find(This,Page,Index) ) 

#define IFRPages_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IFRPages_INTERFACE_DEFINED__ */


#ifndef __IFRPagesEvents_INTERFACE_DEFINED__
#define __IFRPagesEvents_INTERFACE_DEFINED__

/* interface IFRPagesEvents */
/* [object][helpstring][helpcontext][uuid] */ 


EXTERN_C const IID IID_IFRPagesEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001086-0000-1056-976E-008048D53AE3")
    IFRPagesEvents : public IUnknown
    {
    public:
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PageRemoved( 
            IFRPages *Sender,
            /* [in] */ IFRPage *Page,
            /* [in] */ long Index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PageAdded( 
            IFRPages *Sender,
            /* [in] */ long Index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PagesRenumbered( 
            IFRPages *Sender) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFRPagesEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IFRPagesEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IFRPagesEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IFRPagesEvents * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PageRemoved )( 
            IFRPagesEvents * This,
            IFRPages *Sender,
            /* [in] */ IFRPage *Page,
            /* [in] */ long Index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PageAdded )( 
            IFRPagesEvents * This,
            IFRPages *Sender,
            /* [in] */ long Index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PagesRenumbered )( 
            IFRPagesEvents * This,
            IFRPages *Sender);
        
        END_INTERFACE
    } IFRPagesEventsVtbl;

    interface IFRPagesEvents
    {
        CONST_VTBL struct IFRPagesEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFRPagesEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IFRPagesEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IFRPagesEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IFRPagesEvents_PageRemoved(This,Sender,Page,Index)	\
    ( (This)->lpVtbl -> PageRemoved(This,Sender,Page,Index) ) 

#define IFRPagesEvents_PageAdded(This,Sender,Index)	\
    ( (This)->lpVtbl -> PageAdded(This,Sender,Index) ) 

#define IFRPagesEvents_PagesRenumbered(This,Sender)	\
    ( (This)->lpVtbl -> PagesRenumbered(This,Sender) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IFRPagesEvents_INTERFACE_DEFINED__ */


#ifndef __DIFRPagesEvents_DISPINTERFACE_DEFINED__
#define __DIFRPagesEvents_DISPINTERFACE_DEFINED__

/* dispinterface DIFRPagesEvents */
/* [helpstring][helpcontext][uuid] */ 


EXTERN_C const IID DIID_DIFRPagesEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("10001087-0000-1056-976E-008048D53AE3")
    DIFRPagesEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DIFRPagesEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DIFRPagesEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DIFRPagesEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DIFRPagesEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DIFRPagesEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DIFRPagesEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DIFRPagesEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DIFRPagesEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DIFRPagesEventsVtbl;

    interface DIFRPagesEvents
    {
        CONST_VTBL struct DIFRPagesEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DIFRPagesEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DIFRPagesEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DIFRPagesEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DIFRPagesEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DIFRPagesEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DIFRPagesEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DIFRPagesEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DIFRPagesEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_FRPages;

#ifdef __cplusplus

class DECLSPEC_UUID("10002071-0000-1056-976E-008048D53AE3")
FRPages;
#endif

#ifndef __IFRDocument_INTERFACE_DEFINED__
#define __IFRDocument_INTERFACE_DEFINED__

/* interface IFRDocument */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IFRDocument;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001080-0000-1056-976E-008048D53AE3")
    IFRDocument : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Analyze( 
            /* [in] */ IPageProcessingParams *PageProcessingParams) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AnalyzePages( 
            /* [in] */ ILongsCollection *PageIndices,
            /* [defaultvalue][in] */ IPageProcessingParams *PageProcessingParams = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Recognize( 
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParamsForPage = 0,
            /* [defaultvalue][in] */ IObjectsExtractionParams *ExtractionParams = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RecognizePages( 
            /* [in] */ ILongsCollection *PageIndices,
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParamsForPage = 0,
            /* [defaultvalue][in] */ IObjectsExtractionParams *ExtractionParams = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Synthesize( 
            /* [defaultvalue][in] */ ISynthesisParamsForDocument *SynthesisParamsForDocument = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AnalyzeAndRecognize( 
            /* [defaultvalue][in] */ IPageProcessingParams *PageProcessingParams = 0,
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParamsForPage = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AnalyzeAndRecognizePages( 
            /* [in] */ ILongsCollection *PageIndices,
            /* [defaultvalue][in] */ IPageProcessingParams *PageProcessingParams = 0,
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParamsForPage = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Process( 
            /* [defaultvalue][in] */ IPageProcessingParams *PageProcessingParams = 0,
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParamsForPage = 0,
            /* [defaultvalue][in] */ ISynthesisParamsForDocument *SynthesisParamsForDocument = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Export( 
            /* [in] */ BSTR ExportFileName,
            /* [in] */ FileExportFormatEnum format,
            /* [in] */ IUnknown *ExportParams) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ExportPages( 
            /* [in] */ BSTR ExportFileName,
            /* [in] */ FileExportFormatEnum Format,
            /* [in] */ IUnknown *ExportParams,
            /* [defaultvalue][in] */ ILongsCollection *PageIndices = 0,
            /* [defaultvalue][out] */ IStringsCollection **AdditionalFiles = 0,
            /* [defaultvalue][out] */ IStringsCollection **AdditionalDirectories = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddImageFile( 
            /* [in] */ BSTR ImageFileName,
            /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode = 0,
            /* [defaultvalue][in] */ ILongsCollection *PageIndices = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddImageFileWithPassword( 
            /* [in] */ BSTR ImageFileName,
            /* [in] */ BSTR Password,
            /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode = 0,
            /* [defaultvalue][in] */ ILongsCollection *PageIndices = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddImageFileWithPasswordCallback( 
            /* [in] */ BSTR ImageFileName,
            /* [in] */ IImagePasswordCallback *Callback,
            /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode = 0,
            /* [defaultvalue][in] */ ILongsCollection *PageIndices = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddImage( 
            /* [in] */ IImageDocument *Image) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Pages( 
            /* [retval][out] */ IFRPages **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TempDir( 
            /* [retval][out] */ BSTR *TempDirPath) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TempDir( 
            /* [in] */ BSTR TempDirPath) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DocumentContentInfo( 
            /* [retval][out] */ IDocumentContentInfo **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DocumentContentInfo( 
            /* [in] */ IDocumentContentInfo *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PageFlushingPolicy( 
            /* [retval][out] */ PageFlushingPolicyEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PageFlushingPolicy( 
            /* [in] */ PageFlushingPolicyEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DocumentStructure( 
            /* [retval][out] */ IDocumentStructure **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SynthesizePages( 
            /* [in] */ ILongsCollection *pageIndices,
            /* [defaultvalue][in] */ ISynthesisParamsForDocument *_synthesisParamsForDocument = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PlainText( 
            /* [retval][out] */ IPlainText **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddImageFileFromMemory( 
            /* [in] */ long HGlobal,
            /* [defaultvalue][in] */ BSTR FileName = 0,
            /* [defaultvalue][in] */ ImageFileFormatEnum FileFormat = IFF_UnknownFormat,
            /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveToFolder( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadFromFolder( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddPage( 
            /* [in] */ IFRPage *Page) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFRDocumentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IFRDocument * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IFRDocument * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IFRDocument * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IFRDocument * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IFRDocument * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IFRDocument * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IFRDocument * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IFRDocument * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Analyze )( 
            IFRDocument * This,
            /* [in] */ IPageProcessingParams *PageProcessingParams);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AnalyzePages )( 
            IFRDocument * This,
            /* [in] */ ILongsCollection *PageIndices,
            /* [defaultvalue][in] */ IPageProcessingParams *PageProcessingParams);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Recognize )( 
            IFRDocument * This,
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParamsForPage,
            /* [defaultvalue][in] */ IObjectsExtractionParams *ExtractionParams);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RecognizePages )( 
            IFRDocument * This,
            /* [in] */ ILongsCollection *PageIndices,
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParamsForPage,
            /* [defaultvalue][in] */ IObjectsExtractionParams *ExtractionParams);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Synthesize )( 
            IFRDocument * This,
            /* [defaultvalue][in] */ ISynthesisParamsForDocument *SynthesisParamsForDocument);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AnalyzeAndRecognize )( 
            IFRDocument * This,
            /* [defaultvalue][in] */ IPageProcessingParams *PageProcessingParams,
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParamsForPage);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AnalyzeAndRecognizePages )( 
            IFRDocument * This,
            /* [in] */ ILongsCollection *PageIndices,
            /* [defaultvalue][in] */ IPageProcessingParams *PageProcessingParams,
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParamsForPage);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Process )( 
            IFRDocument * This,
            /* [defaultvalue][in] */ IPageProcessingParams *PageProcessingParams,
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParamsForPage,
            /* [defaultvalue][in] */ ISynthesisParamsForDocument *SynthesisParamsForDocument);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Export )( 
            IFRDocument * This,
            /* [in] */ BSTR ExportFileName,
            /* [in] */ FileExportFormatEnum format,
            /* [in] */ IUnknown *ExportParams);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ExportPages )( 
            IFRDocument * This,
            /* [in] */ BSTR ExportFileName,
            /* [in] */ FileExportFormatEnum Format,
            /* [in] */ IUnknown *ExportParams,
            /* [defaultvalue][in] */ ILongsCollection *PageIndices,
            /* [defaultvalue][out] */ IStringsCollection **AdditionalFiles,
            /* [defaultvalue][out] */ IStringsCollection **AdditionalDirectories);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddImageFile )( 
            IFRDocument * This,
            /* [in] */ BSTR ImageFileName,
            /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode,
            /* [defaultvalue][in] */ ILongsCollection *PageIndices);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddImageFileWithPassword )( 
            IFRDocument * This,
            /* [in] */ BSTR ImageFileName,
            /* [in] */ BSTR Password,
            /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode,
            /* [defaultvalue][in] */ ILongsCollection *PageIndices);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddImageFileWithPasswordCallback )( 
            IFRDocument * This,
            /* [in] */ BSTR ImageFileName,
            /* [in] */ IImagePasswordCallback *Callback,
            /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode,
            /* [defaultvalue][in] */ ILongsCollection *PageIndices);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddImage )( 
            IFRDocument * This,
            /* [in] */ IImageDocument *Image);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Pages )( 
            IFRDocument * This,
            /* [retval][out] */ IFRPages **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TempDir )( 
            IFRDocument * This,
            /* [retval][out] */ BSTR *TempDirPath);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TempDir )( 
            IFRDocument * This,
            /* [in] */ BSTR TempDirPath);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DocumentContentInfo )( 
            IFRDocument * This,
            /* [retval][out] */ IDocumentContentInfo **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DocumentContentInfo )( 
            IFRDocument * This,
            /* [in] */ IDocumentContentInfo *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PageFlushingPolicy )( 
            IFRDocument * This,
            /* [retval][out] */ PageFlushingPolicyEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PageFlushingPolicy )( 
            IFRDocument * This,
            /* [in] */ PageFlushingPolicyEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DocumentStructure )( 
            IFRDocument * This,
            /* [retval][out] */ IDocumentStructure **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SynthesizePages )( 
            IFRDocument * This,
            /* [in] */ ILongsCollection *pageIndices,
            /* [defaultvalue][in] */ ISynthesisParamsForDocument *_synthesisParamsForDocument);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlainText )( 
            IFRDocument * This,
            /* [retval][out] */ IPlainText **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            IFRDocument * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddImageFileFromMemory )( 
            IFRDocument * This,
            /* [in] */ long HGlobal,
            /* [defaultvalue][in] */ BSTR FileName,
            /* [defaultvalue][in] */ ImageFileFormatEnum FileFormat,
            /* [defaultvalue][in] */ IPrepareImageMode *PrepareMode);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveToFolder )( 
            IFRDocument * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadFromFolder )( 
            IFRDocument * This,
            /* [in] */ BSTR Path);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddPage )( 
            IFRDocument * This,
            /* [in] */ IFRPage *Page);
        
        END_INTERFACE
    } IFRDocumentVtbl;

    interface IFRDocument
    {
        CONST_VTBL struct IFRDocumentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFRDocument_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IFRDocument_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IFRDocument_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IFRDocument_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IFRDocument_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IFRDocument_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IFRDocument_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IFRDocument_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IFRDocument_Analyze(This,PageProcessingParams)	\
    ( (This)->lpVtbl -> Analyze(This,PageProcessingParams) ) 

#define IFRDocument_AnalyzePages(This,PageIndices,PageProcessingParams)	\
    ( (This)->lpVtbl -> AnalyzePages(This,PageIndices,PageProcessingParams) ) 

#define IFRDocument_Recognize(This,SynthesisParamsForPage,ExtractionParams)	\
    ( (This)->lpVtbl -> Recognize(This,SynthesisParamsForPage,ExtractionParams) ) 

#define IFRDocument_RecognizePages(This,PageIndices,SynthesisParamsForPage,ExtractionParams)	\
    ( (This)->lpVtbl -> RecognizePages(This,PageIndices,SynthesisParamsForPage,ExtractionParams) ) 

#define IFRDocument_Synthesize(This,SynthesisParamsForDocument)	\
    ( (This)->lpVtbl -> Synthesize(This,SynthesisParamsForDocument) ) 

#define IFRDocument_AnalyzeAndRecognize(This,PageProcessingParams,SynthesisParamsForPage)	\
    ( (This)->lpVtbl -> AnalyzeAndRecognize(This,PageProcessingParams,SynthesisParamsForPage) ) 

#define IFRDocument_AnalyzeAndRecognizePages(This,PageIndices,PageProcessingParams,SynthesisParamsForPage)	\
    ( (This)->lpVtbl -> AnalyzeAndRecognizePages(This,PageIndices,PageProcessingParams,SynthesisParamsForPage) ) 

#define IFRDocument_Process(This,PageProcessingParams,SynthesisParamsForPage,SynthesisParamsForDocument)	\
    ( (This)->lpVtbl -> Process(This,PageProcessingParams,SynthesisParamsForPage,SynthesisParamsForDocument) ) 

#define IFRDocument_Export(This,ExportFileName,format,ExportParams)	\
    ( (This)->lpVtbl -> Export(This,ExportFileName,format,ExportParams) ) 

#define IFRDocument_ExportPages(This,ExportFileName,Format,ExportParams,PageIndices,AdditionalFiles,AdditionalDirectories)	\
    ( (This)->lpVtbl -> ExportPages(This,ExportFileName,Format,ExportParams,PageIndices,AdditionalFiles,AdditionalDirectories) ) 

#define IFRDocument_AddImageFile(This,ImageFileName,PrepareMode,PageIndices)	\
    ( (This)->lpVtbl -> AddImageFile(This,ImageFileName,PrepareMode,PageIndices) ) 

#define IFRDocument_AddImageFileWithPassword(This,ImageFileName,Password,PrepareMode,PageIndices)	\
    ( (This)->lpVtbl -> AddImageFileWithPassword(This,ImageFileName,Password,PrepareMode,PageIndices) ) 

#define IFRDocument_AddImageFileWithPasswordCallback(This,ImageFileName,Callback,PrepareMode,PageIndices)	\
    ( (This)->lpVtbl -> AddImageFileWithPasswordCallback(This,ImageFileName,Callback,PrepareMode,PageIndices) ) 

#define IFRDocument_AddImage(This,Image)	\
    ( (This)->lpVtbl -> AddImage(This,Image) ) 

#define IFRDocument_get_Pages(This,Result)	\
    ( (This)->lpVtbl -> get_Pages(This,Result) ) 

#define IFRDocument_get_TempDir(This,TempDirPath)	\
    ( (This)->lpVtbl -> get_TempDir(This,TempDirPath) ) 

#define IFRDocument_put_TempDir(This,TempDirPath)	\
    ( (This)->lpVtbl -> put_TempDir(This,TempDirPath) ) 

#define IFRDocument_get_DocumentContentInfo(This,Result)	\
    ( (This)->lpVtbl -> get_DocumentContentInfo(This,Result) ) 

#define IFRDocument_put_DocumentContentInfo(This,Value)	\
    ( (This)->lpVtbl -> put_DocumentContentInfo(This,Value) ) 

#define IFRDocument_get_PageFlushingPolicy(This,Result)	\
    ( (This)->lpVtbl -> get_PageFlushingPolicy(This,Result) ) 

#define IFRDocument_put_PageFlushingPolicy(This,Value)	\
    ( (This)->lpVtbl -> put_PageFlushingPolicy(This,Value) ) 

#define IFRDocument_get_DocumentStructure(This,Result)	\
    ( (This)->lpVtbl -> get_DocumentStructure(This,Result) ) 

#define IFRDocument_SynthesizePages(This,pageIndices,_synthesisParamsForDocument)	\
    ( (This)->lpVtbl -> SynthesizePages(This,pageIndices,_synthesisParamsForDocument) ) 

#define IFRDocument_get_PlainText(This,Result)	\
    ( (This)->lpVtbl -> get_PlainText(This,Result) ) 

#define IFRDocument_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#define IFRDocument_AddImageFileFromMemory(This,HGlobal,FileName,FileFormat,PrepareMode)	\
    ( (This)->lpVtbl -> AddImageFileFromMemory(This,HGlobal,FileName,FileFormat,PrepareMode) ) 

#define IFRDocument_SaveToFolder(This,Path)	\
    ( (This)->lpVtbl -> SaveToFolder(This,Path) ) 

#define IFRDocument_LoadFromFolder(This,Path)	\
    ( (This)->lpVtbl -> LoadFromFolder(This,Path) ) 

#define IFRDocument_AddPage(This,Page)	\
    ( (This)->lpVtbl -> AddPage(This,Page) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IFRDocument_INTERFACE_DEFINED__ */


#ifndef __IFRPageEvents_INTERFACE_DEFINED__
#define __IFRPageEvents_INTERFACE_DEFINED__

/* interface IFRPageEvents */
/* [object][helpstring][helpcontext][uuid] */ 


EXTERN_C const IID IID_IFRPageEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001083-0000-1056-976E-008048D53AE3")
    IFRPageEvents : public IUnknown
    {
    public:
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnProgress( 
            /* [in] */ IFRPage *Sender,
            /* [in] */ long Percentage,
            /* [out][in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnRecognizerTip( 
            /* [in] */ IFRPage *Sender,
            /* [in] */ BSTR Tip,
            /* [out][in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnRegionProcessed( 
            /* [in] */ IFRPage *Sender,
            /* [in] */ long RecognitionPassNumber,
            /* [in] */ IRegion *Region,
            /* [out][in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnPageProcessed( 
            /* [in] */ IFRPage *Sender,
            /* [in] */ PageProcessingStageEnum Stage) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFRPageEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IFRPageEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IFRPageEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IFRPageEvents * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnProgress )( 
            IFRPageEvents * This,
            /* [in] */ IFRPage *Sender,
            /* [in] */ long Percentage,
            /* [out][in] */ VARIANT_BOOL *Cancel);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnRecognizerTip )( 
            IFRPageEvents * This,
            /* [in] */ IFRPage *Sender,
            /* [in] */ BSTR Tip,
            /* [out][in] */ VARIANT_BOOL *Cancel);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnRegionProcessed )( 
            IFRPageEvents * This,
            /* [in] */ IFRPage *Sender,
            /* [in] */ long RecognitionPassNumber,
            /* [in] */ IRegion *Region,
            /* [out][in] */ VARIANT_BOOL *Cancel);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnPageProcessed )( 
            IFRPageEvents * This,
            /* [in] */ IFRPage *Sender,
            /* [in] */ PageProcessingStageEnum Stage);
        
        END_INTERFACE
    } IFRPageEventsVtbl;

    interface IFRPageEvents
    {
        CONST_VTBL struct IFRPageEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFRPageEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IFRPageEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IFRPageEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IFRPageEvents_OnProgress(This,Sender,Percentage,Cancel)	\
    ( (This)->lpVtbl -> OnProgress(This,Sender,Percentage,Cancel) ) 

#define IFRPageEvents_OnRecognizerTip(This,Sender,Tip,Cancel)	\
    ( (This)->lpVtbl -> OnRecognizerTip(This,Sender,Tip,Cancel) ) 

#define IFRPageEvents_OnRegionProcessed(This,Sender,RecognitionPassNumber,Region,Cancel)	\
    ( (This)->lpVtbl -> OnRegionProcessed(This,Sender,RecognitionPassNumber,Region,Cancel) ) 

#define IFRPageEvents_OnPageProcessed(This,Sender,Stage)	\
    ( (This)->lpVtbl -> OnPageProcessed(This,Sender,Stage) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IFRPageEvents_INTERFACE_DEFINED__ */


#ifndef __DIFRPageEvents_DISPINTERFACE_DEFINED__
#define __DIFRPageEvents_DISPINTERFACE_DEFINED__

/* dispinterface DIFRPageEvents */
/* [helpstring][helpcontext][uuid] */ 


EXTERN_C const IID DIID_DIFRPageEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("10001084-0000-1056-976E-008048D53AE3")
    DIFRPageEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DIFRPageEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DIFRPageEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DIFRPageEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DIFRPageEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DIFRPageEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DIFRPageEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DIFRPageEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DIFRPageEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DIFRPageEventsVtbl;

    interface DIFRPageEvents
    {
        CONST_VTBL struct DIFRPageEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DIFRPageEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DIFRPageEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DIFRPageEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DIFRPageEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DIFRPageEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DIFRPageEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DIFRPageEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DIFRPageEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_FRPage;

#ifdef __cplusplus

class DECLSPEC_UUID("10002070-0000-1056-976E-008048D53AE3")
FRPage;
#endif

#ifndef __IImagePasswordCallback_INTERFACE_DEFINED__
#define __IImagePasswordCallback_INTERFACE_DEFINED__

/* interface IImagePasswordCallback */
/* [helpstring][helpcontext][oleautomation][uuid][object] */ 


EXTERN_C const IID IID_IImagePasswordCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001053-0000-1056-976E-008048D53AE3")
    IImagePasswordCallback : public IUnknown
    {
    public:
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetPassword( 
            /* [in] */ VARIANT_BOOL ownerNeeded,
            /* [out][in] */ VARIANT_BOOL *isResultValid,
            /* [retval][out] */ BSTR *password) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IImagePasswordCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IImagePasswordCallback * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IImagePasswordCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IImagePasswordCallback * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetPassword )( 
            IImagePasswordCallback * This,
            /* [in] */ VARIANT_BOOL ownerNeeded,
            /* [out][in] */ VARIANT_BOOL *isResultValid,
            /* [retval][out] */ BSTR *password);
        
        END_INTERFACE
    } IImagePasswordCallbackVtbl;

    interface IImagePasswordCallback
    {
        CONST_VTBL struct IImagePasswordCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IImagePasswordCallback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IImagePasswordCallback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IImagePasswordCallback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IImagePasswordCallback_GetPassword(This,ownerNeeded,isResultValid,password)	\
    ( (This)->lpVtbl -> GetPassword(This,ownerNeeded,isResultValid,password) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IImagePasswordCallback_INTERFACE_DEFINED__ */


#ifndef __IFRDocumentEvents_INTERFACE_DEFINED__
#define __IFRDocumentEvents_INTERFACE_DEFINED__

/* interface IFRDocumentEvents */
/* [object][helpstring][helpcontext][uuid] */ 


EXTERN_C const IID IID_IFRDocumentEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001088-0000-1056-976E-008048D53AE3")
    IFRDocumentEvents : public IUnknown
    {
    public:
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnProgress( 
            /* [in] */ IFRDocument *Sender,
            /* [in] */ long Percentage,
            /* [out][in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnRecognizerTip( 
            /* [in] */ IFRDocument *Sender,
            /* [in] */ BSTR Tip,
            /* [out][in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnPageProcessed( 
            /* [in] */ IFRDocument *Sender,
            /* [in] */ long Index,
            /* [in] */ PageProcessingStageEnum Stage) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFRDocumentEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IFRDocumentEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IFRDocumentEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IFRDocumentEvents * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnProgress )( 
            IFRDocumentEvents * This,
            /* [in] */ IFRDocument *Sender,
            /* [in] */ long Percentage,
            /* [out][in] */ VARIANT_BOOL *Cancel);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnRecognizerTip )( 
            IFRDocumentEvents * This,
            /* [in] */ IFRDocument *Sender,
            /* [in] */ BSTR Tip,
            /* [out][in] */ VARIANT_BOOL *Cancel);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnPageProcessed )( 
            IFRDocumentEvents * This,
            /* [in] */ IFRDocument *Sender,
            /* [in] */ long Index,
            /* [in] */ PageProcessingStageEnum Stage);
        
        END_INTERFACE
    } IFRDocumentEventsVtbl;

    interface IFRDocumentEvents
    {
        CONST_VTBL struct IFRDocumentEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFRDocumentEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IFRDocumentEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IFRDocumentEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IFRDocumentEvents_OnProgress(This,Sender,Percentage,Cancel)	\
    ( (This)->lpVtbl -> OnProgress(This,Sender,Percentage,Cancel) ) 

#define IFRDocumentEvents_OnRecognizerTip(This,Sender,Tip,Cancel)	\
    ( (This)->lpVtbl -> OnRecognizerTip(This,Sender,Tip,Cancel) ) 

#define IFRDocumentEvents_OnPageProcessed(This,Sender,Index,Stage)	\
    ( (This)->lpVtbl -> OnPageProcessed(This,Sender,Index,Stage) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IFRDocumentEvents_INTERFACE_DEFINED__ */


#ifndef __DIFRDocumentEvents_DISPINTERFACE_DEFINED__
#define __DIFRDocumentEvents_DISPINTERFACE_DEFINED__

/* dispinterface DIFRDocumentEvents */
/* [helpstring][helpcontext][uuid] */ 


EXTERN_C const IID DIID_DIFRDocumentEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("10001089-0000-1056-976E-008048D53AE3")
    DIFRDocumentEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DIFRDocumentEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DIFRDocumentEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DIFRDocumentEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DIFRDocumentEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DIFRDocumentEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DIFRDocumentEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DIFRDocumentEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DIFRDocumentEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DIFRDocumentEventsVtbl;

    interface DIFRDocumentEvents
    {
        CONST_VTBL struct DIFRDocumentEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DIFRDocumentEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DIFRDocumentEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DIFRDocumentEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DIFRDocumentEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DIFRDocumentEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DIFRDocumentEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DIFRDocumentEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DIFRDocumentEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_FRDocument;

#ifdef __cplusplus

class DECLSPEC_UUID("1000206F-0000-1056-976E-008048D53AE3")
FRDocument;
#endif

EXTERN_C const CLSID CLSID_FRRectangle;

#ifdef __cplusplus

class DECLSPEC_UUID("10002072-0000-1056-976E-008048D53AE3")
FRRectangle;
#endif

#ifndef __IFileAdapter_INTERFACE_DEFINED__
#define __IFileAdapter_INTERFACE_DEFINED__

/* interface IFileAdapter */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IFileAdapter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010E3-0000-1056-976E-008048D53AE3")
    IFileAdapter : public IUnknown
    {
    public:
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetFileName( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetPassword( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetPagesToProcess( 
            /* [retval][out] */ ILongsCollection **PageIndices) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFileAdapterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IFileAdapter * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IFileAdapter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IFileAdapter * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetFileName )( 
            IFileAdapter * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetPassword )( 
            IFileAdapter * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetPagesToProcess )( 
            IFileAdapter * This,
            /* [retval][out] */ ILongsCollection **PageIndices);
        
        END_INTERFACE
    } IFileAdapterVtbl;

    interface IFileAdapter
    {
        CONST_VTBL struct IFileAdapterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFileAdapter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IFileAdapter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IFileAdapter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IFileAdapter_GetFileName(This,Result)	\
    ( (This)->lpVtbl -> GetFileName(This,Result) ) 

#define IFileAdapter_GetPassword(This,Result)	\
    ( (This)->lpVtbl -> GetPassword(This,Result) ) 

#define IFileAdapter_GetPagesToProcess(This,PageIndices)	\
    ( (This)->lpVtbl -> GetPagesToProcess(This,PageIndices) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IFileAdapter_INTERFACE_DEFINED__ */


#ifndef __IImageSource_INTERFACE_DEFINED__
#define __IImageSource_INTERFACE_DEFINED__

/* interface IImageSource */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IImageSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010E2-0000-1056-976E-008048D53AE3")
    IImageSource : public IUnknown
    {
    public:
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetNextImageFile( 
            /* [retval][out] */ IFileAdapter **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IsEmpty( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IImageSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IImageSource * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IImageSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IImageSource * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetNextImageFile )( 
            IImageSource * This,
            /* [retval][out] */ IFileAdapter **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IsEmpty )( 
            IImageSource * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        END_INTERFACE
    } IImageSourceVtbl;

    interface IImageSource
    {
        CONST_VTBL struct IImageSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IImageSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IImageSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IImageSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IImageSource_GetNextImageFile(This,Result)	\
    ( (This)->lpVtbl -> GetNextImageFile(This,Result) ) 

#define IImageSource_IsEmpty(This,Result)	\
    ( (This)->lpVtbl -> IsEmpty(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IImageSource_INTERFACE_DEFINED__ */


#ifndef __IBatchProcessor_INTERFACE_DEFINED__
#define __IBatchProcessor_INTERFACE_DEFINED__

/* interface IBatchProcessor */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IBatchProcessor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010DB-0000-1056-976E-008048D53AE3")
    IBatchProcessor : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Start( 
            /* [in] */ IImageSource *ImageSource,
            /* [defaultvalue][in] */ IPrepareImageMode *OpeningParams = 0,
            /* [defaultvalue][in] */ IPageProcessingParams *ProcessingParams = 0,
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParams = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetNextProcessedPage( 
            /* [retval][out] */ IFRPage **Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IBatchProcessorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IBatchProcessor * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IBatchProcessor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IBatchProcessor * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IBatchProcessor * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IBatchProcessor * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IBatchProcessor * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IBatchProcessor * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IBatchProcessor * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IBatchProcessor * This,
            /* [in] */ IImageSource *ImageSource,
            /* [defaultvalue][in] */ IPrepareImageMode *OpeningParams,
            /* [defaultvalue][in] */ IPageProcessingParams *ProcessingParams,
            /* [defaultvalue][in] */ ISynthesisParamsForPage *SynthesisParams);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetNextProcessedPage )( 
            IBatchProcessor * This,
            /* [retval][out] */ IFRPage **Result);
        
        END_INTERFACE
    } IBatchProcessorVtbl;

    interface IBatchProcessor
    {
        CONST_VTBL struct IBatchProcessorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IBatchProcessor_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IBatchProcessor_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IBatchProcessor_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IBatchProcessor_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IBatchProcessor_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IBatchProcessor_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IBatchProcessor_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IBatchProcessor_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IBatchProcessor_Start(This,ImageSource,OpeningParams,ProcessingParams,SynthesisParams)	\
    ( (This)->lpVtbl -> Start(This,ImageSource,OpeningParams,ProcessingParams,SynthesisParams) ) 

#define IBatchProcessor_GetNextProcessedPage(This,Result)	\
    ( (This)->lpVtbl -> GetNextProcessedPage(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IBatchProcessor_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_BatchProcessor;

#ifdef __cplusplus

class DECLSPEC_UUID("100020C3-0000-1056-976E-008048D53AE3")
BatchProcessor;
#endif

#ifndef __IRecognizedPages_INTERFACE_DEFINED__
#define __IRecognizedPages_INTERFACE_DEFINED__

/* interface IRecognizedPages */
/* [helpstring][helpcontext][oleautomation][uuid][object] */ 


EXTERN_C const IID IID_IRecognizedPages;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001048-0000-1056-976E-008048D53AE3")
    IRecognizedPages : public IUnknown
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PageIds( 
            /* [retval][out] */ ILongsCollection **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Layout( 
            /* [in] */ long PageId,
            /* [retval][out] */ ILayout **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Layout( 
            /* [in] */ long PageId,
            /* [in] */ ILayout *Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ImageDocument( 
            /* [in] */ long PageId,
            /* [retval][out] */ IImageDocument **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ReleasePage( 
            /* [in] */ long PageId) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRecognizedPagesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRecognizedPages * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRecognizedPages * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRecognizedPages * This);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PageIds )( 
            IRecognizedPages * This,
            /* [retval][out] */ ILongsCollection **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Layout )( 
            IRecognizedPages * This,
            /* [in] */ long PageId,
            /* [retval][out] */ ILayout **Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Layout )( 
            IRecognizedPages * This,
            /* [in] */ long PageId,
            /* [in] */ ILayout *Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ImageDocument )( 
            IRecognizedPages * This,
            /* [in] */ long PageId,
            /* [retval][out] */ IImageDocument **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ReleasePage )( 
            IRecognizedPages * This,
            /* [in] */ long PageId);
        
        END_INTERFACE
    } IRecognizedPagesVtbl;

    interface IRecognizedPages
    {
        CONST_VTBL struct IRecognizedPagesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRecognizedPages_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRecognizedPages_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRecognizedPages_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRecognizedPages_get_PageIds(This,Result)	\
    ( (This)->lpVtbl -> get_PageIds(This,Result) ) 

#define IRecognizedPages_get_Layout(This,PageId,Result)	\
    ( (This)->lpVtbl -> get_Layout(This,PageId,Result) ) 

#define IRecognizedPages_put_Layout(This,PageId,Value)	\
    ( (This)->lpVtbl -> put_Layout(This,PageId,Value) ) 

#define IRecognizedPages_get_ImageDocument(This,PageId,Result)	\
    ( (This)->lpVtbl -> get_ImageDocument(This,PageId,Result) ) 

#define IRecognizedPages_ReleasePage(This,PageId)	\
    ( (This)->lpVtbl -> ReleasePage(This,PageId) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRecognizedPages_INTERFACE_DEFINED__ */


#ifndef __DIExporterEvents_DISPINTERFACE_DEFINED__
#define __DIExporterEvents_DISPINTERFACE_DEFINED__

/* dispinterface DIExporterEvents */
/* [helpstring][helpcontext][uuid] */ 


EXTERN_C const IID DIID_DIExporterEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("10001041-0000-1056-976E-008048D53AE3")
    DIExporterEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DIExporterEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DIExporterEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DIExporterEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DIExporterEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DIExporterEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DIExporterEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DIExporterEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DIExporterEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DIExporterEventsVtbl;

    interface DIExporterEvents
    {
        CONST_VTBL struct DIExporterEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DIExporterEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DIExporterEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DIExporterEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DIExporterEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DIExporterEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DIExporterEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DIExporterEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DIExporterEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IExporterEvents_INTERFACE_DEFINED__
#define __IExporterEvents_INTERFACE_DEFINED__

/* interface IExporterEvents */
/* [object][helpstring][helpcontext][uuid] */ 


EXTERN_C const IID IID_IExporterEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001042-0000-1056-976E-008048D53AE3")
    IExporterEvents : public IUnknown
    {
    public:
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ReportPercentage( 
            /* [in] */ long Percentage,
            /* [out][in] */ VARIANT_BOOL *ShouldTerminate) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IExporterEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IExporterEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IExporterEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IExporterEvents * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ReportPercentage )( 
            IExporterEvents * This,
            /* [in] */ long Percentage,
            /* [out][in] */ VARIANT_BOOL *ShouldTerminate);
        
        END_INTERFACE
    } IExporterEventsVtbl;

    interface IExporterEvents
    {
        CONST_VTBL struct IExporterEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IExporterEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IExporterEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IExporterEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IExporterEvents_ReportPercentage(This,Percentage,ShouldTerminate)	\
    ( (This)->lpVtbl -> ReportPercentage(This,Percentage,ShouldTerminate) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IExporterEvents_INTERFACE_DEFINED__ */


#ifndef __IExporter_INTERFACE_DEFINED__
#define __IExporter_INTERFACE_DEFINED__

/* interface IExporter */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IExporter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001034-0000-1056-976E-008048D53AE3")
    IExporter : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ExportPages( 
            /* [in] */ FileExportFormatEnum Format,
            /* [in] */ BSTR FileName,
            /* [in] */ IImageDocumentsCollection *ImageDocuments,
            /* [in] */ ILayoutsCollection *Layouts,
            /* [defaultvalue][in] */ IUnknown *ExportParams = 0,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo = 0,
            /* [defaultvalue][out] */ IStringsCollection **AdditionalFiles = 0,
            /* [defaultvalue][out] */ IStringsCollection **AdditionalDirectories = 0) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ExportPagesEx( 
            /* [in] */ FileExportFormatEnum Format,
            /* [in] */ BSTR FileName,
            /* [in] */ IRecognizedPages *RecognizedPages,
            /* [defaultvalue][in] */ IUnknown *ExportParams = 0,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo = 0,
            /* [defaultvalue][out] */ IStringsCollection **AdditionalFiles = 0,
            /* [defaultvalue][out] */ IStringsCollection **AdditionalDirectories = 0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IExporterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IExporter * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IExporter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IExporter * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IExporter * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IExporter * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IExporter * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IExporter * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IExporter * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ExportPages )( 
            IExporter * This,
            /* [in] */ FileExportFormatEnum Format,
            /* [in] */ BSTR FileName,
            /* [in] */ IImageDocumentsCollection *ImageDocuments,
            /* [in] */ ILayoutsCollection *Layouts,
            /* [defaultvalue][in] */ IUnknown *ExportParams,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo,
            /* [defaultvalue][out] */ IStringsCollection **AdditionalFiles,
            /* [defaultvalue][out] */ IStringsCollection **AdditionalDirectories);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ExportPagesEx )( 
            IExporter * This,
            /* [in] */ FileExportFormatEnum Format,
            /* [in] */ BSTR FileName,
            /* [in] */ IRecognizedPages *RecognizedPages,
            /* [defaultvalue][in] */ IUnknown *ExportParams,
            /* [defaultvalue][in] */ IDocumentInfo *DocumentInfo,
            /* [defaultvalue][out] */ IStringsCollection **AdditionalFiles,
            /* [defaultvalue][out] */ IStringsCollection **AdditionalDirectories);
        
        END_INTERFACE
    } IExporterVtbl;

    interface IExporter
    {
        CONST_VTBL struct IExporterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IExporter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IExporter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IExporter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IExporter_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IExporter_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IExporter_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IExporter_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IExporter_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IExporter_ExportPages(This,Format,FileName,ImageDocuments,Layouts,ExportParams,DocumentInfo,AdditionalFiles,AdditionalDirectories)	\
    ( (This)->lpVtbl -> ExportPages(This,Format,FileName,ImageDocuments,Layouts,ExportParams,DocumentInfo,AdditionalFiles,AdditionalDirectories) ) 

#define IExporter_ExportPagesEx(This,Format,FileName,RecognizedPages,ExportParams,DocumentInfo,AdditionalFiles,AdditionalDirectories)	\
    ( (This)->lpVtbl -> ExportPagesEx(This,Format,FileName,RecognizedPages,ExportParams,DocumentInfo,AdditionalFiles,AdditionalDirectories) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IExporter_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_Exporter;

#ifdef __cplusplus

class DECLSPEC_UUID("10002033-0000-1056-976E-008048D53AE3")
Exporter;
#endif


#ifndef __AvailableTextTypesFlags_MODULE_DEFINED__
#define __AvailableTextTypesFlags_MODULE_DEFINED__


/* module AvailableTextTypesFlags */
/* [helpstring][helpcontext] */ 

/* [helpstring][helpcontext] */ const long ATT_Normal	=	0x1;

/* [helpstring][helpcontext] */ const long ATT_Typewriter	=	0x2;

/* [helpstring][helpcontext] */ const long ATT_Matrix	=	0x4;

/* [helpstring][helpcontext] */ const long ATT_Index	=	0x8;

/* [helpstring][helpcontext] */ const long ATT_Handprinted	=	0x10;

/* [helpstring][helpcontext] */ const long ATT_OCR_A	=	0x20;

/* [helpstring][helpcontext] */ const long ATT_OCR_B	=	0x40;

/* [helpstring][helpcontext] */ const long ATT_MICR_E13B	=	0x80;

/* [helpstring][helpcontext] */ const long ATT_Gothic	=	0x100;

/* [helpstring][helpcontext] */ const long ATT_MICR_CMC7	=	0x200;

/* [helpstring][helpcontext] */ const long ATT_Advanced	=	0x400;

#endif /* __AvailableTextTypesFlags_MODULE_DEFINED__ */


#ifndef __AvailableEngineModulesFlags_MODULE_DEFINED__
#define __AvailableEngineModulesFlags_MODULE_DEFINED__


/* module AvailableEngineModulesFlags */
/* [helpstring][helpcontext] */ 

/* [helpstring][helpcontext] */ const long AEM_1DBarcode	=	0x1;

/* [helpstring][helpcontext] */ const long AEM_PDF417	=	0x2;

/* [helpstring][helpcontext] */ const long AEM_Aztec	=	0x4;

/* [helpstring][helpcontext] */ const long AEM_QRCode	=	0x8;

/* [helpstring][helpcontext] */ const long AEM_DataMatrix	=	0x10;

/* [helpstring][helpcontext] */ const long AEM_BarcodeAutolocation	=	0x20;

/* [helpstring][helpcontext] */ const long AEM_Analyze	=	0x40;

/* [helpstring][helpcontext] */ const long AEM_FullTextIndexDA	=	0x80;

/* [helpstring][helpcontext] */ const long AEM_FlexiFormsDA	=	0x100;

/* [helpstring][helpcontext] */ const long AEM_CyrillicHandprint	=	0x200;

/* [helpstring][helpcontext] */ const long AEM_OMR	=	0x400;

/* [helpstring][helpcontext] */ const long AEM_ExtendedCharacterInfo	=	0x800;

/* [helpstring][helpcontext] */ const long AEM_ASCII	=	0x1000;

/* [helpstring][helpcontext] */ const long AEM_OpenPDF	=	0x2000;

/* [helpstring][helpcontext] */ const long AEM_UserPatterns	=	0x4000;

/* [helpstring][helpcontext] */ const long AEM_BalancedMode	=	0x8000;

/* [helpstring][helpcontext] */ const long AEM_FastMode	=	0x10000;

/* [helpstring][helpcontext] */ const long AEM_CameraOCR	=	0x20000;

/* [helpstring][helpcontext] */ const long AEM_ColorFiltering	=	0x40000;

#endif /* __AvailableEngineModulesFlags_MODULE_DEFINED__ */


#ifndef __AvailableLanguageSetsFlags_MODULE_DEFINED__
#define __AvailableLanguageSetsFlags_MODULE_DEFINED__


/* module AvailableLanguageSetsFlags */
/* [helpstring][helpcontext] */ 

/* [helpstring][helpcontext] */ const long ALS_Standard	=	0x1;

/* [helpstring][helpcontext] */ const long ALS_DataCapture	=	0x2;

/* [helpstring][helpcontext] */ const long ALS_Artificial	=	0x4;

/* [helpstring][helpcontext] */ const long ALS_FineReaderXIX	=	0x8;

/* [helpstring][helpcontext] */ const long ALS_Programming	=	0x10;

/* [helpstring][helpcontext] */ const long ALS_User	=	0x20;

/* [helpstring][helpcontext] */ const long ALS_CJK	=	0x40;

/* [helpstring][helpcontext] */ const long ALS_Hebrew	=	0x80;

/* [helpstring][helpcontext] */ const long ALS_Thai	=	0x100;

/* [helpstring][helpcontext] */ const long ALS_Vietnamese	=	0x200;

/* [helpstring][helpcontext] */ const long ALS_Arabic	=	0x400;

#endif /* __AvailableLanguageSetsFlags_MODULE_DEFINED__ */


#ifndef __AvailableVisualComponentsFlags_MODULE_DEFINED__
#define __AvailableVisualComponentsFlags_MODULE_DEFINED__


/* module AvailableVisualComponentsFlags */
/* [helpstring][helpcontext] */ 

/* [helpstring][helpcontext] */ const long AVC_ImageViewer	=	0x1;

/* [helpstring][helpcontext] */ const long AVC_DocumentViewer	=	0x2;

/* [helpstring][helpcontext] */ const long AVC_TextEditor	=	0x4;

/* [helpstring][helpcontext] */ const long AVC_TextValidator	=	0x8;

/* [helpstring][helpcontext] */ const long AVC_Scanning	=	0x10;

/* [helpstring][helpcontext] */ const long AVC_Training	=	0x20;

#endif /* __AvailableVisualComponentsFlags_MODULE_DEFINED__ */


#ifndef __AvailableExportFormatesFlags_MODULE_DEFINED__
#define __AvailableExportFormatesFlags_MODULE_DEFINED__


/* module AvailableExportFormatesFlags */
/* [helpstring][helpcontext] */ 

/* [helpstring][helpcontext] */ const long AEF_RTF	=	0x1;

/* [helpstring][helpcontext] */ const long AEF_HTML	=	0x2;

/* [helpstring][helpcontext] */ const long AEF_XLS	=	0x4;

/* [helpstring][helpcontext] */ const long AEF_PDF	=	0x8;

/* [helpstring][helpcontext] */ const long AEF_Text	=	0x20;

/* [helpstring][helpcontext] */ const long AEF_PDFImageOnly	=	0x40;

/* [helpstring][helpcontext] */ const long AEF_XML	=	0x80;

/* [helpstring][helpcontext] */ const long AEF_PPT	=	0x100;

/* [helpstring][helpcontext] */ const long AEF_PDFA	=	0x200;

/* [helpstring][helpcontext] */ const long AEF_PDFMRC	=	0x800;

/* [helpstring][helpcontext] */ const long AEF_ALTO	=	0x1000;

/* [helpstring][helpcontext] */ const long AEF_EPUB	=	0x2000;

/* [helpstring][helpcontext] */ const long AEF_FB2	=	0x4000;

#endif /* __AvailableExportFormatesFlags_MODULE_DEFINED__ */

#ifndef __ILicense_INTERFACE_DEFINED__
#define __ILicense_INTERFACE_DEFINED__

/* interface ILicense */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ILicense;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10001054-0000-1056-976E-008048D53AE3")
    ILicense : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AvailableTextTypes( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AvailableEngineModules( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AvailableExportFormats( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AvailableVisualComponents( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AvailableLanguageSets( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_VolumeRefreshingPeriod( 
            /* [in] */ LicenseCounterTypeEnum CounterType,
            /* [retval][out] */ VolumeRefreshingPeriodEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Volume( 
            /* [in] */ LicenseCounterTypeEnum CounterType,
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_VolumeRemaining( 
            /* [in] */ LicenseCounterTypeEnum CounterType,
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ExpirationDate( 
            /* [out] */ long *Year,
            /* [out] */ long *Month,
            /* [out] */ long *Day,
            /* [retval][out] */ VARIANT_BOOL *HasTimeLimitation) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SerialNumber( 
            /* [retval][out] */ BSTR *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllowedCoresCount( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MinimumCoresCountPerInstance( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ProjectId( 
            /* [retval][out] */ BSTR *Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ILicenseVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ILicense * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ILicense * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ILicense * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ILicense * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ILicense * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ILicense * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ILicense * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ILicense * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AvailableTextTypes )( 
            ILicense * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AvailableEngineModules )( 
            ILicense * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AvailableExportFormats )( 
            ILicense * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AvailableVisualComponents )( 
            ILicense * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AvailableLanguageSets )( 
            ILicense * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VolumeRefreshingPeriod )( 
            ILicense * This,
            /* [in] */ LicenseCounterTypeEnum CounterType,
            /* [retval][out] */ VolumeRefreshingPeriodEnum *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Volume )( 
            ILicense * This,
            /* [in] */ LicenseCounterTypeEnum CounterType,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VolumeRemaining )( 
            ILicense * This,
            /* [in] */ LicenseCounterTypeEnum CounterType,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ExpirationDate )( 
            ILicense * This,
            /* [out] */ long *Year,
            /* [out] */ long *Month,
            /* [out] */ long *Day,
            /* [retval][out] */ VARIANT_BOOL *HasTimeLimitation);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SerialNumber )( 
            ILicense * This,
            /* [retval][out] */ BSTR *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowedCoresCount )( 
            ILicense * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinimumCoresCountPerInstance )( 
            ILicense * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectId )( 
            ILicense * This,
            /* [retval][out] */ BSTR *Result);
        
        END_INTERFACE
    } ILicenseVtbl;

    interface ILicense
    {
        CONST_VTBL struct ILicenseVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ILicense_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ILicense_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ILicense_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ILicense_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ILicense_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ILicense_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ILicense_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ILicense_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ILicense_get_AvailableTextTypes(This,Result)	\
    ( (This)->lpVtbl -> get_AvailableTextTypes(This,Result) ) 

#define ILicense_get_AvailableEngineModules(This,Result)	\
    ( (This)->lpVtbl -> get_AvailableEngineModules(This,Result) ) 

#define ILicense_get_AvailableExportFormats(This,Result)	\
    ( (This)->lpVtbl -> get_AvailableExportFormats(This,Result) ) 

#define ILicense_get_AvailableVisualComponents(This,Result)	\
    ( (This)->lpVtbl -> get_AvailableVisualComponents(This,Result) ) 

#define ILicense_get_AvailableLanguageSets(This,Result)	\
    ( (This)->lpVtbl -> get_AvailableLanguageSets(This,Result) ) 

#define ILicense_get_VolumeRefreshingPeriod(This,CounterType,Result)	\
    ( (This)->lpVtbl -> get_VolumeRefreshingPeriod(This,CounterType,Result) ) 

#define ILicense_get_Volume(This,CounterType,Result)	\
    ( (This)->lpVtbl -> get_Volume(This,CounterType,Result) ) 

#define ILicense_get_VolumeRemaining(This,CounterType,Result)	\
    ( (This)->lpVtbl -> get_VolumeRemaining(This,CounterType,Result) ) 

#define ILicense_ExpirationDate(This,Year,Month,Day,HasTimeLimitation)	\
    ( (This)->lpVtbl -> ExpirationDate(This,Year,Month,Day,HasTimeLimitation) ) 

#define ILicense_get_SerialNumber(This,Result)	\
    ( (This)->lpVtbl -> get_SerialNumber(This,Result) ) 

#define ILicense_get_AllowedCoresCount(This,Result)	\
    ( (This)->lpVtbl -> get_AllowedCoresCount(This,Result) ) 

#define ILicense_get_MinimumCoresCountPerInstance(This,Result)	\
    ( (This)->lpVtbl -> get_MinimumCoresCountPerInstance(This,Result) ) 

#define ILicense_get_ProjectId(This,Result)	\
    ( (This)->lpVtbl -> get_ProjectId(This,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ILicense_INTERFACE_DEFINED__ */


#ifndef __ILicenseCollection_INTERFACE_DEFINED__
#define __ILicenseCollection_INTERFACE_DEFINED__

/* interface ILicenseCollection */
/* [helpstring][helpcontext][oleautomation][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_ILicenseCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1000106D-0000-1056-976E-008048D53AE3")
    ILicenseCollection : public IDispatch
    {
    public:
        //virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Element( 
        //    /* [in] */ long Index,
        //    /* [retval][out] */ ILicense **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ ILicense **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindLicense( 
            /* [in] */ BSTR SerialNumber,
            /* [retval][out] */ ILicense **Result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ILicenseCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ILicenseCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ILicenseCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ILicenseCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ILicenseCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ILicenseCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ILicenseCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ILicenseCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Element )( 
            ILicenseCollection * This,
            /* [in] */ long Index,
            /* [retval][out] */ ILicense **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ILicenseCollection * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ILicenseCollection * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ILicenseCollection * This,
            /* [in] */ long Index,
            /* [retval][out] */ ILicense **Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindLicense )( 
            ILicenseCollection * This,
            /* [in] */ BSTR SerialNumber,
            /* [retval][out] */ ILicense **Result);
        
        END_INTERFACE
    } ILicenseCollectionVtbl;

    interface ILicenseCollection
    {
        CONST_VTBL struct ILicenseCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ILicenseCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ILicenseCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ILicenseCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ILicenseCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ILicenseCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ILicenseCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ILicenseCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ILicenseCollection_get_Element(This,Index,Result)	\
    ( (This)->lpVtbl -> get_Element(This,Index,Result) ) 

#define ILicenseCollection_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define ILicenseCollection_get_Count(This,Result)	\
    ( (This)->lpVtbl -> get_Count(This,Result) ) 

#define ILicenseCollection_Item(This,Index,Result)	\
    ( (This)->lpVtbl -> Item(This,Index,Result) ) 

#define ILicenseCollection_FindLicense(This,SerialNumber,Result)	\
    ( (This)->lpVtbl -> FindLicense(This,SerialNumber,Result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ILicenseCollection_INTERFACE_DEFINED__ */


#ifndef __IMultiProcessingParams_INTERFACE_DEFINED__
#define __IMultiProcessingParams_INTERFACE_DEFINED__

/* interface IMultiProcessingParams */
/* [helpstring][helpcontext][oleautomation][uuid][object] */ 


EXTERN_C const IID IID_IMultiProcessingParams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("100010DA-0000-1056-976E-008048D53AE3")
    IMultiProcessingParams : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IEngine **Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MultiProcessingMode( 
            /* [retval][out] */ MultiProcessingModeEnum *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_MultiProcessingMode( 
            /* [in] */ MultiProcessingModeEnum Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RecognitionProcessesCount( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RecognitionProcessesCount( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SharedCPUCoresMode( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SharedCPUCoresMode( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SharedCPUCoresMask( 
            /* [retval][out] */ long *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SharedCPUCoresMask( 
            /* [in] */ long Value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UseOnlyPhysicalCPUCores( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_UseOnlyPhysicalCPUCores( 
            /* [in] */ VARIANT_BOOL Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMultiProcessingParamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMultiProcessingParams * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMultiProcessingParams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMultiProcessingParams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMultiProcessingParams * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMultiProcessingParams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMultiProcessingParams * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMultiProcessingParams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IMultiProcessingParams * This,
            /* [retval][out] */ IEngine **Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MultiProcessingMode )( 
            IMultiProcessingParams * This,
            /* [retval][out] */ MultiProcessingModeEnum *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MultiProcessingMode )( 
            IMultiProcessingParams * This,
            /* [in] */ MultiProcessingModeEnum Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RecognitionProcessesCount )( 
            IMultiProcessingParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RecognitionProcessesCount )( 
            IMultiProcessingParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SharedCPUCoresMode )( 
            IMultiProcessingParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SharedCPUCoresMode )( 
            IMultiProcessingParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SharedCPUCoresMask )( 
            IMultiProcessingParams * This,
            /* [retval][out] */ long *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SharedCPUCoresMask )( 
            IMultiProcessingParams * This,
            /* [in] */ long Value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UseOnlyPhysicalCPUCores )( 
            IMultiProcessingParams * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UseOnlyPhysicalCPUCores )( 
            IMultiProcessingParams * This,
            /* [in] */ VARIANT_BOOL Value);
        
        END_INTERFACE
    } IMultiProcessingParamsVtbl;

    interface IMultiProcessingParams
    {
        CONST_VTBL struct IMultiProcessingParamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMultiProcessingParams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMultiProcessingParams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMultiProcessingParams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMultiProcessingParams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMultiProcessingParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMultiProcessingParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMultiProcessingParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMultiProcessingParams_get_Application(This,Result)	\
    ( (This)->lpVtbl -> get_Application(This,Result) ) 

#define IMultiProcessingParams_get_MultiProcessingMode(This,Result)	\
    ( (This)->lpVtbl -> get_MultiProcessingMode(This,Result) ) 

#define IMultiProcessingParams_put_MultiProcessingMode(This,Value)	\
    ( (This)->lpVtbl -> put_MultiProcessingMode(This,Value) ) 

#define IMultiProcessingParams_get_RecognitionProcessesCount(This,Result)	\
    ( (This)->lpVtbl -> get_RecognitionProcessesCount(This,Result) ) 

#define IMultiProcessingParams_put_RecognitionProcessesCount(This,Value)	\
    ( (This)->lpVtbl -> put_RecognitionProcessesCount(This,Value) ) 

#define IMultiProcessingParams_get_SharedCPUCoresMode(This,Result)	\
    ( (This)->lpVtbl -> get_SharedCPUCoresMode(This,Result) ) 

#define IMultiProcessingParams_put_SharedCPUCoresMode(This,Value)	\
    ( (This)->lpVtbl -> put_SharedCPUCoresMode(This,Value) ) 

#define IMultiProcessingParams_get_SharedCPUCoresMask(This,Result)	\
    ( (This)->lpVtbl -> get_SharedCPUCoresMask(This,Result) ) 

#define IMultiProcessingParams_put_SharedCPUCoresMask(This,Value)	\
    ( (This)->lpVtbl -> put_SharedCPUCoresMask(This,Value) ) 

#define IMultiProcessingParams_get_UseOnlyPhysicalCPUCores(This,Result)	\
    ( (This)->lpVtbl -> get_UseOnlyPhysicalCPUCores(This,Result) ) 

#define IMultiProcessingParams_put_UseOnlyPhysicalCPUCores(This,Value)	\
    ( (This)->lpVtbl -> put_UseOnlyPhysicalCPUCores(This,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMultiProcessingParams_INTERFACE_DEFINED__ */



#ifndef __ErrorCodes_MODULE_DEFINED__
#define __ErrorCodes_MODULE_DEFINED__


/* module ErrorCodes */
/* [helpstring][helpcontext] */ 

/* [helpstring][helpcontext] */ const long FREN_E_PATTERN_TRAINING_ABORTED	=	0x80040001;

#endif /* __ErrorCodes_MODULE_DEFINED__ */

EXTERN_C const CLSID CLSID_DocumentInfo;

#ifdef __cplusplus

class DECLSPEC_UUID("10002055-0000-1056-976E-008048D53AE3")
DocumentInfo;
#endif


#ifndef __UserPatternsTrainingFlags_MODULE_DEFINED__
#define __UserPatternsTrainingFlags_MODULE_DEFINED__


/* module UserPatternsTrainingFlags */
/* [helpstring][helpcontext] */ 

/* [helpstring][helpcontext] */ const long UPTF_UnusualScript	=	0x1;

/* [helpstring][helpcontext] */ const long UPTF_Bold	=	0x2;

/* [helpstring][helpcontext] */ const long UPTF_Italic	=	0x4;

/* [helpstring][helpcontext] */ const long UPTF_Subscript	=	0x8;

/* [helpstring][helpcontext] */ const long UPTF_Superscript	=	0x10;

const long UPTF_UnsupportedFlagValue	=	0x20;

#endif /* __UserPatternsTrainingFlags_MODULE_DEFINED__ */

EXTERN_C const CLSID CLSID_Engine;

#ifdef __cplusplus

class DECLSPEC_UUID("10002000-0000-1056-976E-008048D53AE3")
Engine;
#endif


#ifndef __FREngine_MODULE_DEFINED__
#define __FREngine_MODULE_DEFINED__


/* module FREngine */
/* [helpstring][helpcontext][dllname] */ 

/* [helpstring][helpcontext][entry] */ HRESULT __stdcall GetEngineObject( 
    /* [defaultvalue][in] */ BSTR ProjectId,
    /* [defaultvalue][in] */ BSTR Reserved1,
    /* [defaultvalue][in] */ BSTR Reserved2,
    /* [retval][out] */ IEngine **Engine);

/* [helpstring][helpcontext][entry] */ HRESULT __stdcall DeinitializeEngine( void);

#endif /* __FREngine_MODULE_DEFINED__ */
#endif /* __FREngine_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif


